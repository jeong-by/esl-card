'use strict';

// TEST 환경을 위해 주석처리한 코드 확인 후 실제 서버 적용 필요.

// BY START 2020-01-14

const axios = require('axios');

const ajax = require('ajax-request');

const config = require('./config/config');

// // logger
const logger = require('./util/logger');


const base64js = require('base64-js');
const sysUtil = require('util');
// ESL controller
const sync_to_mci_controller = require('./controllers/sync_to_mci-controller');

const net = require('net');
const MCI = require('./external/mci');


let MCI_SERVER_URL;
let wardId;
let mci_interval = config.interval.mci; 

const mci= new MCI();
const SyncToMCI = new sync_to_mci_controller ();

const DIDsocket_host = config.external[3].host;
const DIDsocket_port = config.external[3].port;
let didState = 'ok';

const Main = async () => {
    logger.info('Sync_to_MCI is started.');
    
    MCI_SERVER_URL = 'http://localhost:7001';

    // JU START 2021-12-15
	// 05E : 05동(TEST), 202365
	// 05IU : 음압격리병동 5층, 202366
	// 10W : 10서(GS5), 171130
	// 15W : 171119
	// C08E : 176213
	// C08W : 176214
	// C07E : 176215
	// C07W : 176216
	// C09E : 176211
	// C09W : 176212
	// wardId = ['176215', '176216', '176211', '176212'];  //암병원 7층, 9층
	//wardId = ['176215', '176216', '176211', '176212', '176213', '176214', '171119', '202366', '202365']; //암병원 7층, 9층 포함
    // BY START 2022-02-24
    wardId = ['171130']; //test 용 
    // BY END 2022-02-24
	// JU END 2021-12-15

    
    
    logger.info('Sync_to_mci Controller is imported.');

    // batteryInfoUpdate()
    mciPatientInfo();
    
}

// MCI 정보 받아오는 함수
const mciPatientInfo = async() => {
    // step 1. MCI의 응답데이터를 이용하여 DID 환자정보 조회
    // BY START 2020-12-01
    // mci 와의 통신 중 통신이 안될 시 재시작 대기를 위함
    let mciState = 'ok';
    // BY END
    logger.info('MCIPatientInfo started')
    for (let i = 0; i < wardId.length; i++) {
        let patientInfoData = [];
        let noPatientWardInfo = [];
        let wardName;
        console.info('mciPatientInfo', 'wardId : ' + wardId[i] + ' is start.'); 
        await axios({
            method: 'get',
            url: MCI_SERVER_URL + '/mci-test/patient-list?wardId=' + wardId[i],
                responseType: 'json'
            })
            .then(async function (response) {
                // step1. MCI -> DID hash map 사용하기
                patientInfoData = response.data.data.body;
                // 환자가 없는 병실 확인 하기 (1)
                const wardInfo= await SyncToMCI.getWardInfo(wardId);
                noPatientWardInfo = wardInfo.response;
                wardName = wardInfo.wardName;

                console.log('Begin to make [DID] Socket Data in the ['+wardId[i] +'] department');
                // did 정보 담기
                let hashMap = new HashMap();
                
                let arr=[];
                let arr2=[];
                for(let j = 0 ; j < patientInfoData.length ; j ++){
                    arr.push(patientInfoData[j].roomNo);
                    arr2.push(patientInfoData[j].ward);
                }
                // 환자가 없는 병실 확인 하기 (2)
                for(let j = 0 ; j < arr.length; j ++) {
                    noPatientWardInfo = noPatientWardInfo.filter((element) => element !== arr[j]);
                }
                
                let roomArray = arr.filter((item,index)=>arr.indexOf(item) === index);
                let wardArray = arr2.filter((item,index)=>arr2.indexOf(item) === index);
                for (let k = 0 ; k < roomArray.length ; k ++){
                    let patients = [];
                    let elbdNo;
                    for(let j = 0 ; j < patientInfoData.length; j ++) {
                        
                        
                        if(patientInfoData[j].roomNo == roomArray[k]) { 
                            const patient = await MappingMCIDataForDID(patientInfoData[j]);
                            patients.push(patient);
                        }
                    }  
                    elbdNo = 'DID' + wardArray[0] + roomArray[k];
                    hashMap.put(elbdNo,patients);
                }
                // 환자가 없는 병실 확인 하기 (3)
                for(let j = 0 ; j < noPatientWardInfo.length ; j ++) {
                    const patient = [];
                    const elbdNo = 'DID'+wardName+noPatientWardInfo[j];
                    console.log(elbdNo);
                    hashMap.put(elbdNo,patient);
                }
                for(let j = 0 ; j<hashMap.size(); j++) {
                    await StartDIDData(hashMap.keys()[j],hashMap.values()[j]);
                }
                logger.info('[DID] information in the  ['+wardId[i] +']  department has been updated.')
            })
            // BY START 2022-03-02
            .catch(function (err) {
                console.log(err);
                if (err.code  == 'ECONNRESET') {
                    logger.error("MCI 정보 갖고 오는 상황에서 오류 발생");
                }
                console.log("sync_to_mci_did 오류 발생.")
                mciState = 'error'
                
            });
            // BY END 2022-03-02
    }
    if (mciState == 'ok') {  
        console.log('All Data Finished');     
        // delay(1000*3);
    }
    else {
        logger.error("재시작 대기");
    }
}


// DID에 MCI 정보 넘겨주는 전체 함수
async function StartDIDData (elbdNo,patients) {
    
    const did_values = DIDInputData(elbdNo,patients);
    const sendData = mci.createJsonData(did_values);
    let socket = new net.Socket();
    didState = 'ok';
    socket.connect({host:DIDsocket_host, port:DIDsocket_port}, async function() {
        //console.log('Client connected - %s : %d', socket.remoteAddress, socket.remotePort);
        if (sendData != null) {
            
            await sendRequest(socket, sendData);
    
        } else {
            socket.end();
            socket.destroy();
            //console.log("socket closed");
        } 
    });
    
    socket.on('data', function(data) {
        //console.log('Received data size : %d', socket.bytesRead);
        console.log('DATA : %s', data);
    
    });
    
    socket.on('close', function() {
        //console.log('Client closed.');
    });

    // BY START 2022-03-02
            
    socket.on('error', function () {
        didState = 'error';
        logger.error("DID sockect connection error [" + elbdNo + "]");
    })
    // BY END 2022-03-02

}

// MCI정보 DID에 맞게 Mapping 하는 함수
async function MappingMCIDataForDID(patientInfoData) {
    const patient = {
    	ptntNm: patientInfoData.firstName,	   // 환자 이름
		btdt: "",
		awtrDvsnCd: "",
		coloCd: patientInfoData.bedNo,
		ptntExmnNornSno: 0,
		doctorNm1: patientInfoData.doctorName1, // 지정의 이름
		doctorNm2: patientInfoData.doctorName2, // 주치의 이름
		ptntId: patientInfoData.id	// 환자번호
    }
    return patient;
}

//  Mapping된 정보를 DIDInputDATA로 바꾸는 함수
function DIDInputData(elbdNo,patients) {
	// JU START 2020-02-20
	let input;
	if(patients != null) {
		input = {
			evntTypCd: 'L',
			elbdNo: elbdNo,
			exrmNo: '',
			exrmNm: '',
			elbdMesgCtn: '',
			waitYn: '',
			apntCnt: 0,
			mddrNm: '',
			waitRsrvMi: 0,
			elbdDereCtn: '',
			clotResnCd: '',
			asnuIdNm: '',
			asgnNm: '',
			afiReptNtm: patients.length,
			mns_dispush_000: patients,
			afiReptNtm01: 0,
			mns_dispush_001: []
		};
	} else {
		input = {
			evntTypCd: 'L',
			elbdNo: elbdNo,
			exrmNo: '',
			exrmNm: '',
			elbdMesgCtn: '',
			waitYn: '',
			apntCnt: 0,
			mddrNm: '',
			waitRsrvMi: 0,
			elbdDereCtn: '',
			clotResnCd: '',
			asnuIdNm: '',
			asgnNm: '',
			afiReptNtm: 0,
			mns_dispush_000: [],
			afiReptNtm01: 0,
			mns_dispush_001: []
		};
	}
	/*
    let input = {
        evntTypCd: 'L',
        elbdNo: elbdNo,
        exrmNo: '',
        exrmNm: '',
        elbdMesgCtn: '',
        waitYn: '',
        apntCnt: 0,
        mddrNm: '',
        waitRsrvMi: 0,
        elbdDereCtn: '',
        clotResnCd: '',
        asnuIdNm: '',
        asgnNm: '',
        afiReptNtm: patients.length,
        mns_dispush_000: patients,
        afiReptNtm01: 0,
        mns_dispush_001: []
    };
	*/
	// JU END 2020-02-20
    
    let values = {
        input: input,
        interfaceId: 'uns_didpush_m01',
        requestId: 'mnc_dispush_000'
    };
    
    return values;
}
// DID에 정보 Send하는 함수
const sendRequest = async function(socket, data) {
    socket.write(data, 'utf8', async function() {
        console.log('Sent data size : %d', data.length);
        await socket.end();
        await socket.destroy();
        console.log("socket closed");
    });
};







// BY END 2022-03-02

/* HashMap 객체 생성 */
let HashMap = function(){
    this.map = new Object();
}
 
HashMap.prototype = {
    /* key, value 값으로 구성된 데이터를 추가 */
    put: function (key, value) {
        this.map[key] = value;
    },
    /* 지정한 key값의 value값 반환 */
    get: function (key) {
        return this.map[key];
    },
    /* 구성된 key 값 존재여부 반환 */
    containsKey: function (key) {
        return key in this.map;
    },
    /* 구성된 value 값 존재여부 반환 */
    containsValue: function (value) {
        for (let prop in this.map) {
            if (this.map[prop] == value) {
                return true;
            }
        }
        return false;
    },
    /* 구성된 데이터 초기화 */
    clear: function () {
        for (let prop in this.map) {
            delete this.map[prop];
        }
    },
    /*  key에 해당하는 데이터 삭제 */
    remove: function (key) {
        delete this.map[key];
    },
    /* 배열로 key 반환 */
    keys: function () {
        let arKey = new Array();
        for (let prop in this.map) {
            arKey.push(prop);
        }
        return arKey;
    },
    /* 배열로 value 반환 */
    values: function () {
        let arVal = new Array();
        for (let prop in this.map) {
            arVal.push(this.map[prop]);
        }
        return arVal;
    },
    /* Map에 구성된 개수 반환 */
    size: function () {
        let count = 0;
        for (let prop in this.map) {
            count++;
        }
        return count;
    }
}




// ======================================================================================================================================================

// 메인함수 시작
Main();
setInterval(mciPatientInfo,mci_interval); 
