<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>ESL Index</title>

    <!-- Font Awesome -->
    <link rel="stylesheet" href="/fontawesome/css/all.css">
    <!-- Bootstrap core CSS -->
    <link href="/mdb/css/bootstrap.min.css" rel="stylesheet">
    <!-- Material Design Bootstrap -->
    <link href="/mdb/css/mdb.min.css" rel="stylesheet">
    <!-- Fonts -->
    <link href="/fonts/NanumFonts.css" rel="stylesheet">


    <style>

        .double-nav .breadcrumb-dn {
            color: #fff;
        }

        .side-nav.wide .sn-ad-avatar-wrapper a span {
            display: none;
        }

        table.table td,
        table.table th {
            padding-top: 0.2em;
            padding-bottom: 0.2em;
        }

        main {
            /*background-color: #000; */
            margin-left: 0 !important;
            margin-right: 0 !important;
        }

        .
        /*===== Layout Editor =====*/

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html,
        body {
            width: 100%;
            height: 100%;
        }

        /* 선택된 아이템 */
        .selected-item {
            border: 4px solid rgba(235, 115, 0, 0.5) !important;
        }

        /* 갖다 놓을 공간 */
        /*
                11.6' 640x960
                7.5'  800x480
                6.0'  600x448
            */
        #dropzone1 {
            height: 640px;
            width: 960px;
            border: 2px solid black;
            

        }

        /* 갖다 놓을 공간 공통 */
        .dropzone {
            background-color: #ccc;
            border: dashed 4px transparent;
            transition: background-color 0.3s;
        }

        .drop-active {
            border-color: #aaa;
        }

        .drop-target {
            background-color: #29e;
            border-color: #fff;
            border-style: solid;
        }

        .palette {
            display: table;
        }

        .palette-row {
            display: table-row;
        }

        /* 갖다 놓을 아이템 */
        .drag-drop {
            display: table-cell;
            width: 8em;
            height: 3em;
            color: #fff;
            background-color: #29e;
            border: solid 2px #fff;
            touch-action: none;
            -webkit-transform: translate(0px, 0px);
            transform: translate(0px, 0px);
            transition: background-color 0.3s;
            text-align: center;
            vertical-align: middle;
            margin-right: 2em;
        }

        .drag-drop.can-drop {
            color: #000;
            background-color: #fff;
        }
        .file-field.medium .file-path-wrapper {
            height: 3rem; }
        .file-field.medium .file-path-wrapper .file-path {
            height: 2.8rem; }

        /* BY START 2020-11-11 */
        input[type='radio'] {
            position:relative !important;
            opacity: 1 !important;
        }
        .img-label {
            position: relative !important;
        }
        /* BY END */

    </style>
    
</head>

<body>

    <div id="container" class="fixed-sn" style="height:100%;">

        <!--Double navigation-->
        <header class="indigo-skin">
            <!-- Sidebar navigation -->
            <div id="slide-out" class="side-nav fixed wide">
                <ul class="custom-scrollbar">
                    <!-- Logo -->
                    <li>
                        <div class="logo-wrapper sn-ad-avatar-wrapper"  style="height: 150px;">
                            <div class="row" >
                                <!-- <a ><img src="/images/logo.png" class="rounded-circle" style="height:80px; width:150px; margin-right: 80px;"><span>Logo</span></a> -->
                                <!-- BY START 2019-11-14 --> 
                                <h3 style="padding:0.5em;">Baro ESL 서비스 </h3>
                                
                                <div id="output"></div>
                                <!-- BY END 2019-11-14 -->
                            </div>
                            
                            
                            
                        </div>
                    </li>
                    <!--/. Logo -->
                    <!-- Side navigation links -->
                    <li >
                        <!-- BY START 2019-11-11 click event showpage 막음 (hashchange event로 대체) -->
                        <!-- 현장 운영자를 위한 메뉴 -->
                        <ul class="collapsible collapsible-accordion" id="menuLevel1">

                            <li><a class="collapsible-header waves-effect arrow-r"><i
                                        class="sv-slim-icon fas fa-eye"></i> 현장 운영자 <i
                                        class="fas fa-angle-down rotate-icon"></i></a>
                                <div class="collapsible-body">
                                    <ul>
                                        <li><a href="#di" onclick="sideMenuSelected(this);"
                                                class="sideMenuItem waves-effect">
                                                <!-- <span class="sv-slim"> DI </span> -->
                                                <span class="sv-normal">데이터 입력</span></a>
                                        </li>
                                    </ul>
                                </div>
                            </li>
                            
                        </ul>

                        <!-- 관리자를 위한 메뉴 -->
                        <ul class="collapsible collapsible-accordion" id="menuLevel2">
                            <li><a class="collapsible-header waves-effect arrow-r active"><i
                                        class="sv-slim-icon far fa-images"></i> 레이아웃 <i
                                        class="fas fa-angle-down rotate-icon"></i></a>
                                <div class="collapsible-body">
                                    <ul>
                                        <li><a href="#ll" onclick="sideMenuSelected(this);"
                                                class="sideMenuItem waves-effect active">
                                                <!-- <span class="sv-slim"> LL </span> -->
                                                <span class="sv-normal">레이아웃 리스트</span></a>
                                        </li>
                                        <li><a href="#le" onclick="sideMenuSelected(this);"
                                                class="sideMenuItem waves-effect">
                                                <!-- <span class="sv-slim"> LE </span> -->
                                                <span class="sv-normal">레이아웃 빌더</span></a>
                                        </li>
                                    </ul>
                                </div>
                            </li>
                            <li><a class="collapsible-header waves-effect arrow-r"><i
                                        class="sv-slim-icon fas fa-tablet-alt"></i> ESL 단말 <i
                                        class="fas fa-angle-down rotate-icon"></i></a>
                                <div class="collapsible-body">
                                    <ul>
                                        <li><a href="#db" onclick="sideMenuSelected(this);"
                                                class="sideMenuItem waves-effect">
                                                <!-- <span class="sv-slim"> DB </span> -->
                                                <span class="sv-normal">단말 대시보드</span></a>
                                        </li>
                                        <li><a href="#dl" onclick="sideMenuSelected(this);"
                                                class="sideMenuItem waves-effect">
                                                <!-- <span class="sv-slim"> DL </span> -->
                                                <span class="sv-normal">단말 리스트</span></a>
                                        </li>
                                        <li><a href="#gl" onclick="sideMenuSelected(this);"
                                                class="sideMenuItem waves-effect">
                                                <!-- <span class="sv-slim"> GL </span> -->
                                                <span class="sv-normal">단말 그룹 리스트</span></a>
                                        </li>
                                        <li><a onclick="showBatteryModal();"
                                                class="sideMenuItem waves-effect">
                                                <span class="sv-normal">배터리 정보 업데이트</span></a>
                                        </li>
                                    </ul>
                                </div>
                            </li>
                            <!-- <li><a class="collapsible-header waves-effect arrow-r"><i
                                        class="sv-slim-icon fas fa-info"></i> 레거시 연동 <i
                                        class="fas fa-angle-down rotate-icon"></i></a>
                                <div class="collapsible-body">
                                    <ul>
                                        <li><a href="#esl" onclick="sideMenuSelected(this);"
                                                class="sideMenuItem waves-effect"> -->
                                                <!-- <span class="sv-slim"> ESI </span> -->
                                                <!-- <span class="sv-normal">ESL 서버 연동</span></a>
                                        </li>
                                    </ul>
                                </div>
                            </li> -->
                            <li><a class="collapsible-header waves-effect arrow-r"><i
                                        class="sv-slim-icon fas fa-user-cog"></i> 사용자 <i
                                        class="fas fa-angle-down rotate-icon"></i></a>
                                <div class="collapsible-body">
                                    <ul>
                                        <li><a href="#ul" onclick="sideMenuSelected(this);"
                                                class="sideMenuItem waves-effect">
                                                <!-- <span class="sv-slim"> UL </span> -->
                                                <span class="sv-normal">사용자 리스트</span></a>
                                        </li>
                                    </ul>
                                </div>
                            </li>
                            <li><a class="collapsible-header waves-effect arrow-r"><i
                                        class="sv-slim-icon fas fa-eye"></i> 현장 운영자 <i
                                        class="fas fa-angle-down rotate-icon"></i></a>
                                <div class="collapsible-body">
                                    <ul>
                                        <li><a href="#di" onclick="sideMenuSelected(this);"
                                                class="sideMenuItem waves-effect">
                                                <!-- <span class="sv-slim"> DI </span> -->
                                                <span class="sv-normal">데이터 입력</span></a>
                                        </li>
                                    </ul>
                                </div>
                            </li>
                            <li><a class="collapsible-header waves-effect arrow-r"><i
                                        class="sv-slim-icon fas fa-info"></i> 이미지 관리<i
                                        class="fas fa-angle-down rotate-icon"></i></a>
                                <div class="collapsible-body">
                                    <ul>
                                        <li><a href="#image" onclick="sideMenuSelected(this);"
                                                class="sideMenuItem waves-effect">
                                                
                                                <span class="sv-normal">이미지 관리/추가</span></a>
                                        </li>
                                    </ul>
                                </div>
                            </li>
                            <li style="float: right; margin-top:5vh;">
                                <button type="button" class="btn btn-outline-white  btn-lg px-2" onclick="darwinPost()"><i class="fas fa-sms mt-0" style="margin-right:0.5em;"></i>Darwin전송</button>
                            </li>
                        </ul>


                    </li>
                    <!--/. Side navigation links -->
                </ul>
                <div class="sidenav-bg rgba-blue-strong"></div>
            </div>
            <!--/. Sidebar navigation -->
            <!-- Navbar -->
            <nav
                class="navbar fixed-top navbar-toggleable-md navbar-expand-lg scrolling-navbar double-nav indigo darken-1">
                <!-- SideNav slide-out button -->
                <div class="float-left">
                    <a id="hamburgerIcon" data-activates="slide-out" class="button-collapse" style="display: block;"><i class="fas fa-bars"></i></a>
                </div>
                <!-- Breadcrumb-->
                <div class="breadcrumb-dn mr-auto">
                    <p>BaroESL 서비스</p>
                </div>
                <ul class="nav navbar-nav nav-flex-icons ml-auto">

                    <!-- BY START 2019-11-12 -->

                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle userNameText"  id="navbarDropdownMenuLink " data-toggle="dropdown"
                            aria-haspopup="true" aria-expanded="false">
                            
                        </a>
                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdownMenuLink" style="border:2px solid #29e;">
                            <h4>내정보</h4>
                            <hr style="height:2em; color:#757575;">
                            <p id="sessionUserName">이름</p>
                            <p id="sessionUserDept">소속</p>
                            <button type="button" class="btn btn-outline-indigo btn-rounded btn-sm px-2" onclick="requestModifyProfile()">
                                <i class="fas fa-user mt-0 indigo-text" style="margin-right:0.5em;"></i>
                                변경하기
                            </button>
                            <button type="button" class="btn btn-outline-red btn-rounded btn-sm px-2" onclick="requestLogout();">
                                <i class="fas fa-user mt-0 red-text" style="margin-right:0.5em;"></i>
                                로그아웃
                            </button>            
                        </div>
                    </li>
                    <!-- BY END 2019-11-12 -->
                </ul>
            </nav>
            <!-- /.Navbar -->
        </header>
        <!--/.Double navigation-->

        <!--Main Layout-->
        <!-- BY START 2019-11-14 메인 화면 클릭시 side-toggle 되게 변경 -->
        <div style="height:100%; width:100%" class="main side-toggle" data-activates="slide-out">
        <!-- BY END 2019-11-14 -->


            <!-- Page 0-1 로그인 -->
            <div id="page0-1" class="view intro-2"
                style="background:url(/mdb/img/back4.jpg)  center center no-repeat; background-size: 100% 100%; min-height: 103%; width:100%; margin-top:-1.6em;">

                <!-- 로그인 폼 -->
                <div class="row" style="margin-top: 5%;">
                    <div class="col-xl-5 col-lg-6 col-md-10 col-sm-12 mx-auto mt-5">
                        <div class="card wow fadeIn" data-wow-delay="0.3s">
                            <div class="card-body">

                                <div class="form-header purple-gradient">
                                    <h3 class="font-weight-500 my-2 py-1"><i class="fas fa-user"></i> 사용자 로그인</h3>
                                </div>
                
                                <div class="md-form">
                                    <i class="fas fa-user prefix white-text"></i>
                                    <input type="text" id="userIdInput" class="form-control">
                                    <label for="userIdInput">아이디</label>
                                </div>

                                <div class="md-form">
                                    <i class="fas fa-envelope prefix white-text"></i>
                                    <input type="password" id="userPasswordInput" class="form-control">
                                    <label for="userPasswordInput">비밀번호</label>
                                </div>

                                <div class="text-center">
                                    <button class="btn purple-gradient btn-lg" onclick="requestLogin()">로그인</button>
                                    <hr class="mt-4">

                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <!-- 로그인 폼 END -->

            </div>


            <!-- Page 1-1 레이아웃 리스트 -->
            <div id="page1-1" style="display:block;">
                <div class="container-fluid">

                    <div class="row mb-1" style="margin-top:-2em; margin-left:1em; margin-right:1em;">
                        <div class="col-md-12">
                            <h4 class="mt-5 mb-3 font-weight-bold dark-grey-text">레이아웃 리스트</h4>

                            <nav aria-label="breadcrumb">
                                <ol class="breadcrumb grey lighten-4">
                                    <li class="breadcrumb-item"><i class="fas fa-grip-vertical"
                                            style="margin-right:1em;"></i>레이아웃</li>
                                    <li class="breadcrumb-item active">레이아웃 리스트</li>
                                </ol>
                            </nav>
                        </div>
                    </div>

                    <!-- Grid row -->
                    <div class="row rgba-white-light z-depth-1"
                        style="margin-left:1.2em; margin-right:1em; margin-bottom:3rem;max-width:38rem;">

                        <!-- Grid column -->
                        <div class="col-md-4">

                            <select class="mdb-select md-form" id="searchLayoutSelect">
                                <option value="" disabled>검색 칼럼 선택</option>
                                <option value="id">아이디</option>
                                <option value="name" selected>이름</option>
                                <option value="resolution">해상도</option>
                            </select>

                        </div>
                        <div class="col-md-6" style="padding-top:1em;">

                            <form class="form-inline md-form mt-2 ml-2">
                                <input class="mt-2" type="text" placeholder="검색어 입력" style="max-width: 24em;"
                                    id="searchLayoutInput">
                                <button type="button" class="btn btn-outline-indigo btn-rounded btn-sm px-2"
                                    onclick="searchLayoutItem()"><i class="fas fa-search mt-0 indigo-text"
                                        style="margin-right:0.5em;"></i>검색</button>
                            </form>

                        </div>
                        <div class="col-md-2">

                            <!-- ProgressBar -->
                            <div style="display:none; padding-top:1.7em;" id="progressLayout1">
                                <div class="preloader-wrapper small active crazy">
                                    <div class="spinner-layer spinner-blue-only">
                                        <div class="circle-clipper left">
                                            <div class="circle"></div>
                                        </div>
                                        <div class="gap-patch">
                                            <div class="circle"></div>
                                        </div>
                                        <div class="circle-clipper right">
                                            <div class="circle"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>


                        <!-- Grid column -->

                    </div>
                    <!-- Grid row -->


                    <div class="card card-cascade narrower z-depth-1"
                        style="margin-left:1em; margin-right:1em; margin-bottom:2em;">

                        <!-- Card image -->
                        <div
                            class="view view-cascade gradient-card-header blue-gradient narrower py-2 mx-4 mb-3 d-flex justify-content-between align-items-center">

                            <a href="" class="white-text mx-3">레이아웃 리스트</a>

                            <div>
                                <span id="totalLayoutOutput" class="badge badge-pill badge-primary"
                                    style="padding:0.6em; margin-right:1em;">결과 0</span>
                                <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2"
                                    onclick="showLayoutAddPage()"><i class="fas fa-plus mt-0"
                                        style="margin-right:0.5em;"></i>추가</button>
                            </div>

                        </div>
                        <!-- /Card image -->

                        <div class="card-body">

                            <div class="table-responsive">
                                <!-- Table -->
                                <table class="table table-sm mb-0 table-striped" id="tableLayout1">

                                    <!-- Table head -->
                                    <thead>
                                        <tr>
                                            <th style="width:8%;"></th>
                                            <th class="th-lg" style="width:10%;"><a>Serial <i
                                                class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg" style="width:20%;"><a>이름 <i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg" style="width:10%;"><a >해상도<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg" style="width:20%;"><a >설명<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg" style="width:8%;"><a >레이아웃<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg" style="width:8%;"><a>매핑<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg text-center" style="width:16%;"><a >기능</a></th>
                                        </tr>
                                    </thead>
                                    <!-- Table head -->

                                </table>
                            </div>

                        </div>

                        <div class="card-footer">

                            <div id="paginationLayout"></div>

                        </div>

                    </div>

                </div>
            </div>

            <div id="page1-1-1" style="display:none;">

                <div class="container-fluid">

                    <div class="card" style="margin-left:4em; margin-right:4em; margin-top:2em; margin-bottom:2em;">

                        <div class="card-header info-color white-text text-center py-4">
                            <h4 id="page1-1-1Title">레이아웃 추가</h4>
                        </div>

                        <div class="card-body">

                            <form class="text-center" style="color:#757575; padding:4em;" action="#">

                                <div class="md-form mt-3">
                                    <input type="text" id="nameLayoutInput" class="form-control" required>
                                    <label for="nameLayoutInput">이름</label>
                                </div>
                                
                                <div class="md-form mt-3">
                                    <!-- BY START 2019-11-01 
                                            사유 : 규격에 맞는 해상도만 저장하게하기 위함.
                                        -->
                                    <select class="mdb-select md-form" id="resolutionLayoutInput" required>
                                        <option value="" disabled selected>해상도를 선택해주세요.</option>
                                        <option value="960X640">11.6' (960x640)</option>
                                        <option value="800X480">7.5' (800x480)</option>
                                        <option value="600X448">6.0' (600x448)</option>
                                    </select>
                                    <!-- BY END 2019-11-01 -->

                                </div>
                                <div class="md-form mt-3">
                                    <h5>이미지 모드 선택</h5>
                                    <input type="radio" id="imageMode1" name="imageMode" value="imageMode1" checked>
                                    <label for="imageMode1" class="img-label">    
                                        <img src="./images/v3_information.png" style="cursor: pointer; width:80px;height:80px; border: 1px solid black;">
                                    </label>
                                    <input type="radio" id="imageMode2" name="imageMode" value="imageMode2">
                                    <label for="imageMode2" class="img-label">    
                                        <img src="./images/v4_information.png" style="cursor: pointer; width:80px;height:80px; border: 1px solid black;">
                                    </label>

                                </div>
                                <div class="md-form mt-3">
                                    <input type="text" id="detailsLayoutInput" class="form-control" required>
                                    <label for="detailsLayoutInput">설명</label>
                                </div>

                                <div class="row" style="margin-top:3em;">
                                    <div class="col-sm-1"></div>
                                    <div class="col-sm-5">
                                        <button class="btn btn-outline-primary waves-effect"
                                            onclick="saveLayoutItem()">저장</button>
                                    </div>
                                    <div class="col-sm-5">
                                        <button class="btn btn-outline-secondary waves-effect"
                                            onclick="showLayoutPage()">닫기</button>
                                    </div>
                                    <div class="col-sm-1"></div>
                                </div>

                            </form>

                        </div>

                    </div>

                </div>

            </div>

            <!-- Page 1-2 레이아웃 빌더 -->
            <div id="page1-2" style="display:none;">
                <div class="container-fluid" style="padding:0;  margin-top:89px;">
                    <div class="row no-gutters">
                        <div style="width:74%; margin-right:1px;">
                            <div style="display:inline-block; padding:0; margin-top:63px;"class="no-gutters">
                                <div id="dropzone1" class="dropzone" ></div>
                            </div>
                        </div>
                        <div style="width:24%;">
                            <div class="builderBox" style="display:inline-block;">
                                <div style="width:100%; height:130px; padding:1em 1em 1em 0;">
                                    <div class="palette">
                                        <!-- BY START 2019-11-28 -->
                                        <div class="palette-row">
                                            
                                        </div>
                                        <!-- BY END 2019-11-28 -->
                                        <div class="palette-row">
                                            <div style="width:100%; height: 3em;" style="display: none;"></div>
                                        </div>
                                        <div class="palette-row">
                                            <div id="TextViewWidget" palette="true" widget-type="TextView"
                                                class="drag-drop">
                                                TextView
                                            </div>
                                            <div id="ImageViewWidget" palette="true" widget-type="ImageView"
                                                class="drag-drop">
                                                ImageView
                                            </div>
                                            <div id="QRViewWidget" palette="true" widget-type="QRView"
                                                class="drag-drop">
                                                QRView
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="easyui-tabs" style="width:275px; height:500px; margin-top:50px;">

                                    <div title="Property" style="padding:0.4em;">
                                        <table id="pg" class="easyui-propertygrid"
                                            style="width:260px; height:450px; margin-top:6px;" showGroup="true"
                                            scrollbarSize="0"></table>
                                    </div>

                                    <div title="Component" style="padding:1em;">
                                        <ul class="easyui-tree" id="componentTree1">

                                        </ul>
                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="row no-gutters" style="margin-top:1em; margin-bottom:1em;">
                        <div class="col-md-1"></div>
                        <div class="col-md-2 text-left sizeDiv">
                            <select class="easyui-combobox " id="device-size"  label="Device Size:"
                                labelPosition="top" style="width:140px;">
                                <option value="11.6">11.6' (960x640)</option>
                                <option value="7.5">7.5' (800x480)</option>
                                <option value="6.0">6.0' (600x448)</option>
                            </select>

                            <!-- <input type="button" value="Change" onclick="changeDeviceSize()"> -->
                            <a  class="easyui-linkbutton" id="changeButton" iconCls="icon-filter"
                                onclick="changeDeviceSize()">Change</a>

                        </div>
                        <div class="col-md-4 text-left">
                            <!-- <input type="button" value="Remove Selected" onclick="removeSelected()"> -->
                            <a  class="easyui-linkbutton" data-options="iconCls:'icon-cut'" style="margin:0.5em 1em 0 0;width:145px;"
                                onclick="removeSelected()">Remove Selected</a>

                            <!-- <input type="button" value="Unselect All" onclick="unselectAll()"> -->
                            <a  class="easyui-linkbutton" style="margin:0.5em 1em 0 0;width:145px;text-align: center; " onclick="unselectAll()">Unselect All</a>

                            <br>

                            <!-- <input type="button" value="z-index Up" onclick="zindexUp()"> -->
                            <a  class="easyui-linkbutton" style="margin:0.5em 1em 0.5em 0;width:145px;text-align: center; " onclick="zindexUp()">z-index Up</a>

                            <!-- <input type="button" value="z-index Down" onclick="zindexDown()"> -->
                            <a  class="easyui-linkbutton" style="margin:0.5em 1em 0.5em 0;width:145px;text-align: center; " onclick="zindexDown()">z-index Down</a>

                        </div>
                        <div class="col-md1"></div>
                        <div class="col-md-4 text-left">

                            <!-- 결과물 이미지의 파일 저장 및 로딩 테스트
                                <input type="button" value="Save to File" onclick="saveToFile()">
                                <input type="file" id="myFile">
                                <input type="button" value="Load from File" onclick="loadFromFile()">
                                -->
                            <input type="hidden" id="layoutId">

                            <!--<input type="text" id="layoutName" placeholder="Layout Name">-->
                            <input class="easyui-textbox" id="layoutName" label="이름: " labelPosition="left" style="width:350px" required>
                            <hr style="margin:3px; opacity: 0%;">
                            <!--<input type="text" id="layoutDetails" placeholder="Layout Details">-->
                            <input class="easyui-textbox" id="layoutDetails" label="설명:" labelPosition="left" style="width:350px" required>
                            <hr style="opacity:0%">
                            <div class="row">
                                
                                <!-- 프리뷰 버튼 -->
                                <button type="button" class="btn btn-default"
                                    onclick="convertToImage()">Preview</button>

                                <!-- 저장 버튼 -->
                                <button type="button" class="btn btn-default"
                                    onclick="saveToDB('page1-1')">Save</button>

                                <!-- 닫기 버튼 -->
                                <button type="button" class="btn btn-danger" onclick="showLayoutPage()">Close</button>
                            </div>

                        </div>
                    </div>
                </div>


                <!-- The Modal -->
                <div class="modal fade" id="previewModal">
                    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
                        <div class="modal-content" style="width:1080px">

                            <!-- Modal Header -->
                            <div class="modal-header">
                                <h4 class="modal-title">Preview</h4>
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                            </div>

                            <!-- Modal body -->
                            <div class="modal-body" style="text-align: center;">
                                
                                <!-- BY START 2019-12-11
                                <div id="img-container">
                                
                                </div> 
                                BY END 2019-12-11-->
                                <div style="display:none; padding-top:1.7em;" id="progresspreview1">
                                    <div class="preloader-wrapper small active crazy">
                                        <div class="spinner-layer spinner-blue-only">
                                            <div class="circle-clipper left">
                                                <div class="circle"></div>
                                            </div>
                                            <div class="gap-patch">
                                                <div class="circle"></div>
                                            </div>
                                            <div class="circle-clipper right">
                                                <div class="circle"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="text-align: center;">
                                    <img class="img_preview" id="img_preview" style="display:none">
                                </div>
                                
                            </div>

                            <!-- Modal footer -->
                            <div class="modal-footer">
                                <button type="button" class="btn btn-danger" data-dismiss="modal" onclick="requrestRemovePreviewDataApply()">Close</button>
                            </div>

                        </div>
                    </div>
                </div>

                
            </div>



            <div id="page2-1" style="display:none;">

                <div class="container-fluid">

                    <!-- Section: Cards color -->
                    <section class="mt-2" id="dashboardDevice1">

                        <div class="row mb-1">
                            <div class="col-md-3">
                                <nav aria-label="breadcrumb">
                                    <ol class="breadcrumb grey lighten-4">
                                        <li class="breadcrumb-item"><i class="fas fa-grip-vertical"
                                                style="margin-right:1em;"></i><a
                                                href="javascript:showPage('page2-1-1');">대시보드</a></li>
                                    </ol>
                                </nav>
                            </div>
                            <div class="col-md-4 align-items-center" style="margin-top:1em;">
                                <span id="totalCount1" class="text-default" style="font-weight:bold;"></span>
                                <span id="totalNormal1" class="text-info"
                                    style="margin-left:2em; font-weight:bold;"></span>
                                <span id="totalAlert1" class="text-danger"
                                    style="margin-left:2em; font-weight:bold;"></span>
                            </div>
                            <div class="col-md-5 align-items-center" style="margin-top:1em;">
                                <span id="refreshInterval1"></span>
                                <span id="refreshTime1" style="margin-left:2em;"></span>
                                <span id="refreshRemaining1" style="margin-left:2em;"></span>
                            </div>
                        </div>

                        <!--
                            <div class="row">
                            <div class="col-xl-3 col-md-3 col-sm-4 mb-4">
                                <div class="card">
                                <div class="card-header white-text red accent-2">
                                    C11E
                                </div>
                                <div class="card-body">

                                    <a class="text-info">
                                        <h6 class="py-1 mt-3 font-weight-500"><i class="fas fa-laptop mr-2"></i>Normal: <span>26</span></h6>
                                    </a>

                                    <a class="text-danger">
                                        <h6 class="py-1 mt-3 font-weight-500"><i class="fas fa-laptop mr-2"></i>Alert: <span>1</span></h6>
                                    </a>

                                    <div class="progress">
                                        <div class="progress-bar blue" role="progressbar" style="width: 95%" aria-valuenow="95"
                                            aria-valuemin="0" aria-valuemax="100">
                                        </div>
                                    </div>

                                    <p class="font-small grey-text">Device health (95%)</p>

                                    <button type="button" class="btn btn-outline-primary btn-rounded btn-sm px-2 float-right" onclick="showPage('page2-1')">상세보기</button>
                                </div>

                                </div>

                            </div>
                            </div>
                            -->

                    </section>

                </div>

            </div>


            <!-- Page 2-1-1 단말 대시보드 -->
            <div id="page2-1-1" style="display:none;">

                <div class="container-fluid">

                    <!-- Section: Classic admin cards -->
                    <section class="pb-3" id="dashboardDevice2">

                        <div class="row mb-1">
                            <div class="col-md-3">
                                <nav aria-label="breadcrumb">
                                    <ol class="breadcrumb grey lighten-4">
                                        <li class="breadcrumb-item"><i class="fas fa-grip-vertical"
                                                style="margin-right:1em;"></i><a
                                                href="javascript:showPage('page2-1');">대시보드</a></li>
                                        <li class="breadcrumb-item"><span id="dashboardDevice2Group"></span></li>
                                    </ol>
                                </nav>
                            </div>
                            <div class="col-md-4 align-items-center" style="margin-top:1em;">
                                <span id="totalCount2" class="text-default" style="font-weight:bold;"></span>
                                <span id="totalNormal2" class="text-info"
                                    style="margin-left:2em; font-weight:bold;"></span>
                                <span id="totalAlert2" class="text-danger"
                                    style="margin-left:2em; font-weight:bold;"></span>
                            </div>
                            <div class="col-md-5 align-items-center" style="margin-top:1em;">
                                <span id="refreshInterval2"></span>
                                <span id="refreshTime2" style="margin-left:2em;"></span>
                                <span id="refreshRemaining2" style="margin-left:2em;"></span>
                            </div>
                            <button type="button" class="btn btn-warning btn-floating" style="display:flex; position:fixed; bottom:1vh;right:2vw;" onclick="showPage('page2-1')" >
                                <i class="fas fa-arrow-left"></i>
                            </button>
                        </div>

                        <!--
                            <div class="row">
 
                                <div class="col-sm-2 mb-xl-0 mb-4">
                                    <div class="card classic-admin-card primary-color">
                                        <div class="card-body">
                                            <div class="pull-right">
                                                <h6 class="check"><i class="fas fa-cog fa-spin fa-md" style="margin-right:1rem;"></i>C11E-56-01</h6>
                                            </div>
                                            <p class="white-text"><span style="margin-right:1rem;">11'</span><span>800X600</span></p>
                                            <h6 class="check" style="margin-top:0.5rem;">34012280 김명자</h6>
                                            <p><span style="margin-right:1em;">금식</span><span>14시 CT검사</span></p>
                                        </div>
                                    </div>
                                </div>
                                 
                                <div class="col-sm-2 mb-xl-0 mb-4">
                                    <div class="card classic-admin-card red accent-2">
                                        <div class="card-body">
                                            <div class="pull-right">
                                                <h6 class="check"><i class="fas fa-cog animated heartBeat infinite" style="margin-right:1rem;"></i>C11E-56-04</h6>
                                            </div>
                                            <p class="white-text"><span style="margin-right:1rem;">11'</span><span>800X600</span></p>
                                            <h6 class="check" style="margin-top:0.5rem;">24108778 박한수</h6>
                                            <p><span>Battery low : 10%</span></p>
                                        </div>
                                    </div>
                                </div>
                                 
                            </div>
                            -->


                    </section>
                    <!-- Section: Classic admin cards -->

                </div>
            </div>


            <!-- Page 2-2 단말 리스트 -->
            <div id="page2-2" style="display:none;">
                <div class="container-fluid">

                    <div class="row mb-1" style="margin-top:-2em;margin-left:1em; margin-right:1em;">
                        <div class="col-md-12">
                            <h4 class="mt-5 mb-3 font-weight-bold dark-grey-text">단말 리스트</h4>

                            <nav aria-label="breadcrumb">
                                <ol class="breadcrumb grey lighten-4">
                                    <li class="breadcrumb-item"><i class="fas fa-grip-vertical"
                                            style="margin-right:1em;"></i>ESL 단말</li>
                                    <li class="breadcrumb-item active">단말 리스트</li>
                                </ol>
                            </nav>
                        </div>
                    </div>
                    <div class="row" style=" margin-left:1em; margin-right:1em;">
                    <!-- Grid row -->
                        <div class="row rgba-white-light z-depth-1 col-md-5"
                            style="margin-left:1.2em; margin-right:1em; margin-bottom:3rem;max-width:38rem;">

                            <!-- Grid column -->
                            <div class="col-md-4">

                                <select class="mdb-select md-form" id="searchDeviceSelect">
                                    <option value="" disabled>검색 칼럼 선택</option>
                                    <option value="id">아이디</option>
                                    <option value="name" selected>이름</option>
                                    <option value="group_name">그룹</option>
                                    <option value="size">크기</option>
                                    <option value="status_message">상태</option>
                                    <option value="layout_name">레이아웃</option>
                                    <option value="code">단말 코드</option>
                                </select>

                            </div>
                            <div class="col-md-8" style="padding-top:1em;">

                                <form class="form-inline md-form mt-2 ml-2">
                                    <input class="mt-2" type="text" placeholder="검색어 입력" style="max-width: 24em;"
                                        id="searchDeviceInput">
                                    <button type="button" class="btn btn-outline-indigo btn-rounded btn-sm px-2"
                                        onclick="searchDeviceItem()"><i class="fas fa-search mt-0 indigo-text"
                                            style="margin-right:0.5em;"></i>검색</button>
                                </form>

                            </div>
                            

                            
                            <!-- Grid column -->

                        </div>
                        <div class="col-md-6" style="text-align:right;vertical-align: bottom; ">
                            <p> Success : <span id="success"> ? </span> 
                                Processing : <span id="processing"> ? </span> 
                                TimeOut : <span id="timeout"> ? </span>
                                <button type="button" class="btn btn-outline-indigo btn-rounded btn-sm px-2"
                                onclick="requestDeviceListAll()"><i class="fas fa-sync mt-0 indigo-text"
                                style="margin-right:0.5em;"></i>조회</button> 
                            </p>
                        </div>
                    </div>
                    <!-- Grid row -->
                    

                    <div class="card card-cascade narrower z-depth-1"
                        style="margin-left:1em; margin-right:1em; margin-bottom:2em;">

                        <!-- Card image -->
                        <div
                            class="view view-cascade gradient-card-header blue-gradient narrower py-2 mx-4 mb-3 d-flex justify-content-between align-items-center">

                            <a href="" class="white-text mx-3">단말 리스트</a>
                            <div>
                                <span id="totalDeviceOutput" class="badge badge-pill badge-primary"
                                    style="padding:0.6em; margin-right:1em;">결과 0</span>
                                <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2"
                                    onclick="showDeviceAddPage()"><i class="fas fa-plus mt-0"
                                        style="margin-right:0.5em;"></i>추가</button>
                            </div>

                        </div>
                        <!-- /Card image -->

                        <div class="card-body">

                            <div class="table-responsive">
                                <!-- Table -->
                                <table class="table table-sm mb-0 table-striped" id="tableDevice1">

                                    <!-- Table head -->
                                    <thead>
                                        <tr>
                                            <th style="width:4%"></th>
                                            <th class="th-sm" style="width:8%;"><a>이름 <i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-sm" style="width:8%;"><a >그룹<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-sm" style="width:8%;"><a >유형<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-sm" style="width:8%;"><a >크기<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-sm" style="width:10%;"><a >단말코드<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-sm" style="width:8%;"><a >회전<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-sm" style="width:6%;"><a >상태<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-sm" style="width:10%;"><a >레이아웃<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-sm text-center" style="width:10%;"><a >데이터<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-sm text-center" style="width:20%;"><a >기능</a></th>
                                        </tr>
                                    </thead>
                                    <!-- Table head -->

                                </table>
                            </div>

                        </div>

                        <div class="card-footer">

                            <div id="paginationDevice"></div>

                        </div>

                    </div>

                </div>
            </div>

            <div id="page2-2-1" style="display:none;">

                <div class="container-fluid">

                    <div class="card" style="margin-left:4em; margin-right:4em; margin-top:2em; margin-bottom:2em;">

                        <div class="card-header info-color white-text text-center py-4">
                            <h4 id="page2-2-1Title">단말 추가</h4>
                        </div>

                        <div class="card-body">

                            <form class="text-center" style="color:#757575; padding:4em;" action="#">

                                <div class="md-form mt-3">
                                    <input type="text" id="deviceNameInput" class="form-control" required>
                                    <label for="deviceNameInput">이름</label>
                                </div>

                                <div class="md-form mt-3">
                                    <select class="mdb-select md-form" id="deviceGroupInput" required>

                                    </select>
                                </div>

                                <div class="md-form mt-3">
                                    <input type="text" id="deviceTypeInput" class="form-control" required>
                                    <label for="deviceTypeInput">유형</label>
                                </div>

                                <div class="md-form mt-3">
                                    <!-- BY START 2019-11-13 
                                            사유 : gotkdehdp
                                        -->
                                    <select class="mdb-select md-form" id="deviceSizeInput" required>
                                        <option value="" disabled selected>크기(inch)를 선택해주세요.</option>
                                        <option value="11"  data-sub='960X640'>11' (960X640) </option>
                                        <option value="7"   data-sub='800X480'>7' (800x480)</option>
                                        <option value="6"   data-sub='600X448'>6' (600X448)</option>
                                    </select>
                                    <!-- BY END 2019-11-13 -->
                                </div>

                                <!-- BY START 2019-11-13 
                                    사유 : 인치에 따라 해상도 자동등록
                                
                                <div class="md-form mt-3">
                                    
                                    <select class="mdb-select md-form" id="deviceResolutionInput" required>
                                        <option value="" disabled selected>해상도를 선택해주세요.</option>
                                        <option value="960X640">11.6' (960x640)</option>
                                        <option value="800x480">7.5' (800x480)</option>
                                        <option value="600X448">6.0' (600x448)</option>
                                    </select>
                                     
                                </div>
                                BY END 2019-11-01 -->

                                <div class="md-form mt-3">
                                    <input type="text" id="deviceCodeInput" class="form-control" required>
                                    <label for="deviceCodeInput">단말 코드</label>
                                </div>

                                <div class="md-form mt-3">
                                    <!-- BY START 2019-11-01 
                                            사유 : 회전각도를 90도 배수만 저장하게하기 위함.
                                        -->
                                    <select class="mdb-select md-form" id="deviceRotationInput" required>
                                        <option value="" disabled selected>단말 회전각도를 선택해주세요.</option>
                                        <option value="0">회전없음</option>
                                        <option value="90">90도</option>
                                        <option value="180">180도</option>
                                        <option value="270">270도</option>
                                    </select>
                                    <!-- BY END 2019-11-01 -->
                                </div>
                                <!-- BY START 2019-11-04 
                                        사유 :레이아웃 조건 처리 | 상태코드는 자동 업데이트 
                                    -->
                                <!-- <div class="md-form mt-3">
                                        <select class="mdb-select md-form" id="deviceStatusCodeInput" required>
                                            <option value="" disabled selected>상태 코드를 선택해주세요.</option>
                                            <option value="100">100(normal)</option>
                                            <option value="501">501(warning)</option>
                                        </select>
                                    </div> -->

                                <!-- <div class="md-form mt-3">
                                        <input type="text" id="deviceStatusMessageInput" class="form-control">
                                        <label for="deviceStatusMessageInput">상태 메시지</label>
                                    </div> -->

                                <!-- <div class="md-form mt-3">
                                        <input type="text" id="deviceLayoutIdInput" class="form-control">
                                        <label for="deviceLayoutIdInput">레이아웃 ID</label>
                                    </div> -->

                                <div class="md-form mt-3">
                                    <select class="mdb-select md-form" id="deviceLayoutNameInput" required>
                                    </select>
                                </div>
                                <!-- BY END 2019-11-04 -->
                                <div class="row" style="margin-top:3em;">
                                    <div class="col-sm-1"></div>
                                    <div class="col-sm-5">
                                        <button class="btn btn-outline-primary waves-effect"
                                            onclick="saveDeviceItem()">저장</button>
                                    </div>
                                    <div class="col-sm-5">
                                        <button class="btn btn-outline-secondary waves-effect"
                                            onclick="showPage('page2-2')">닫기</button>
                                    </div>
                                    <div class="col-sm-1"></div>
                                </div>

                            </form>

                        </div>

                    </div>

                </div>

            </div>



            <!-- Page 2-3 단말 그룹 리스트 -->
            <div id="page2-3" style="display:none;">
                <div class="container-fluid">

                    <div class="row mb-1" style="margin-top:-2em; margin-left:1em; margin-right:1em;">
                        <div class="col-md-12">
                            <h4 class="mt-5 mb-3 font-weight-bold dark-grey-text">단말 그룹 리스트</h4>

                            <nav aria-label="breadcrumb">
                                <ol class="breadcrumb grey lighten-4">
                                    <li class="breadcrumb-item"><i class="fas fa-grip-vertical"
                                            style="margin-right:1em;"></i>ESL 단말</li>
                                    <li class="breadcrumb-item active">단말 그룹 리스트</li>
                                </ol>
                            </nav>
                        </div>
                    </div>

                    <!-- Grid row -->
                    <div class="row rgba-white-light z-depth-1"
                        style="margin-left:1.2em; margin-right:1em; margin-bottom:3rem;max-width:38rem;">

                        <!-- Grid column -->
                        <div class="col-md-4">

                            <select class="mdb-select md-form" id="searchDeviceGroupSelect">
                                <option value="" disabled>검색 칼럼 선택</option>
                                <option value="id">아이디</option>
                                <option value="name" selected>이름</option>
                            </select>

                        </div>
                        <div class="col-md-6" style="padding-top:1em;">

                            <form class="form-inline md-form mt-2 ml-2">
                                <input class="mt-2" type="text" placeholder="검색어 입력" style="max-width: 24em;"
                                    id="searchDeviceGroupInput">
                                <button type="button" class="btn btn-outline-indigo btn-rounded btn-sm px-2"
                                    onclick="searchDeviceGroupItem()"><i class="fas fa-search mt-0 indigo-text"
                                        style="margin-right:0.5em;"></i>검색</button>
                            </form>

                        </div>
                        <div class="col-md-2">

                            <!-- ProgressBar -->
                            <div style="display:none; padding-top:1.7em;" id="progressDeviceGroup1">
                                <div class="preloader-wrapper small active crazy">
                                    <div class="spinner-layer spinner-blue-only">
                                        <div class="circle-clipper left">
                                            <div class="circle"></div>
                                        </div>
                                        <div class="gap-patch">
                                            <div class="circle"></div>
                                        </div>
                                        <div class="circle-clipper right">
                                            <div class="circle"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>


                        <!-- Grid column -->

                    </div>
                    <!-- Grid row -->


                    <div class="card card-cascade narrower z-depth-1"
                        style="margin-left:1em; margin-right:1em; margin-bottom:2em;">

                        <!-- Card image -->
                        <div
                            class="view view-cascade gradient-card-header blue-gradient narrower py-2 mx-4 mb-3 d-flex justify-content-between align-items-center">

                            <a href="" class="white-text mx-3">단말 그룹 리스트</a>

                            <div>
                                <span id="totalDeviceGroupOutput" class="badge badge-pill badge-primary"
                                    style="padding:0.6em; margin-right:1em;">결과 0</span>
                                <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2"
                                    onclick="showDeviceGroupAddPage()"><i class="fas fa-plus mt-0"
                                        style="margin-right:0.5em;"></i>추가</button>
                            </div>

                        </div>
                        <!-- /Card image -->

                        <div class="card-body">

                            <div class="table-responsive">
                                <!-- Table -->
                                <table class="table table-sm mb-0 table-striped" id="tableDeviceGroup1">

                                    <!-- Table head -->
                                    <thead>
                                        <tr>
                                            <th style="width:10%;"></th>
                                            <th class="th-lg" style="width:15%;"><a>병동코드 <i
                                                class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg" style="width:15%;"><a>이름 <i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg" style="width:15%;"><a >부모 이름<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg" style="width:25%;"><a >설명<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg text-center" style="width:20%;"><a >기능</a></th>
                                        </tr>
                                    </thead>
                                    <!-- Table head -->

                                </table>
                            </div>

                        </div>

                        <div class="card-footer">

                            <div id="paginationDeviceGroup"></div>

                        </div>

                    </div>

                </div>
            </div>

            <div id="page2-3-1" style="display:none;">

                <div class="container-fluid">

                    <div class="card" style="margin-left:4em; margin-right:4em; margin-top:2em; margin-bottom:2em;">

                        <div class="card-header info-color white-text text-center py-4">
                            <h4 id="page2-3-1Title">단말 그룹 추가</h4>
                        </div>

                        <div class="card-body">

                            <form class="text-center" style="color:#757575; padding:4em;" action="#">

                                <div class="md-form mt-3">
                                    <input type="text" id="idDeviceGroupInput" class="form-control" required>
                                    <label for="idDeviceGroupInput">병동코드</label>
                                </div>
                                <div class="md-form mt-3">
                                    <input type="text" id="nameDeviceGroupInput" class="form-control" required>
                                    <label for="nameDeviceGroupInput">이름</label>
                                </div>

                                <div class="md-form mt-3">
                                    <input type="text" id="parentDeviceGroupInput" class="form-control" required>
                                    <label for="parentDeviceGroupInput">부모 이름</label>
                                </div>

                                <div class="md-form mt-3">
                                    <input type="text" id="detailsDeviceGroupInput" class="form-control" required>
                                    <label for="detailsDeviceGroupInput">설명</label>
                                </div>

                                <div class="row" style="margin-top:3em;">
                                    <div class="col-sm-1"></div>
                                    <div class="col-sm-5">
                                        <button class="btn btn-outline-primary waves-effect"
                                            onclick="saveDeviceGroupItem()">저장</button>
                                    </div>
                                    <div class="col-sm-5">
                                        <button class="btn btn-outline-secondary waves-effect"
                                            onclick="showPage('page2-3')">닫기</button>
                                    </div>
                                    <div class="col-sm-1"></div>
                                </div>

                            </form>

                        </div>

                    </div>

                </div>

            </div>


            <!-- Page 3-1 ESL 서버 연동 -->
            <div id="page3-1" style="display:none;">
                <div class="container-fluid">

                    <div class="row mb-1" style="margin-top:-2em; margin-left:1em; margin-right:1em;">
                        <div class="col-md-12">
                            <h4 class="mt-5 mb-3 font-weight-bold dark-grey-text">ESL 서버 연동</h4>

                            <nav aria-label="breadcrumb">
                                <ol class="breadcrumb grey lighten-4">
                                    <li class="breadcrumb-item"><i class="fas fa-grip-vertical"
                                            style="margin-right:1em;"></i>ESL</li>
                                    <li class="breadcrumb-item active">서버</li>
                                    <!-- ProgressBar -->
                                    <div style="display:none; padding-top:1.7em;" id="progressLegacy1">
                                        <div class="preloader-wrapper small active crazy">
                                            <div class="spinner-layer spinner-blue-only">
                                                <div class="circle-clipper left">
                                                    <div class="circle"></div>
                                                </div>
                                                <div class="gap-patch">
                                                    <div class="circle"></div>
                                                </div>
                                                <div class="circle-clipper right">
                                                    <div class="circle"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </ol>
                            </nav>
                        </div>
                    </div>

                    <div class="card card-cascade narrower z-depth-1"
                        style="margin-left:1em; margin-right:1em; margin-bottom:2em;">

                        <div class="card-body">
                            <h4>ESL 서버 레거시</h4>
                            <div class="row" style="margin-top:50px;">
                                <div class="col-sm-6">
                                    <div>
                                        <label for="host">ESL SERVER IP</label>
                                        <input type="text" id="eslip" class="form-control eslIpValueInput" readonly >
                                    </div>
                                </div>
                                <div class="col-sm-6" style="display: none;">
                                    <div>
                                        <label for="host">ESL SERVER ID</label>
                                        <input type="text" id="eslid" class="form-control eslIdValueInput" readonly>
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="margin-top:50px;">
                                <div class="col-sm-6">
                                    <div>
                                        <label for="host">ESL SERVER 연결 이름</label>
                                        <input type="text" id="eslname" class="form-control eslNameValueInput">
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div>
                                        <label for="port">ESL SERVER 상세 설명</label>
                                        <input type="text" id="esldetail" class="form-control eslDetailValueInput">
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="margin-top:50px;">
                                <div class="col-sm-6">
                                    <div>
                                        <label for="host">ESL SERVER 호스트</label>
                                        <input type="text" id="eslhost" class="form-control eslHostValueInput">
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div>
                                        <label for="port">ESL SERVER 포트</label>
                                        <input type="text" id="eslport" class="form-control eslPortValueInput">
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                    <button class="btn btn-outline-primary waves-effect" style="float:right;"
                        onclick="applyLegacyData()"> 적용하기</button>
                </div>
            </div>

            <!-- Page 4-1 사용자 리스트 -->
            <div id="page4-1" style="display:none;">
                <div class="container-fluid">

                    <div class="row mb-1" style="margin-top:-2em; margin-left:1em; margin-right:1em;">
                        <div class="col-md-12">
                            <h4 class="mt-5 mb-3 font-weight-bold dark-grey-text">사용자 리스트</h4>

                            <nav aria-label="breadcrumb">
                                <ol class="breadcrumb grey lighten-4">
                                    <li class="breadcrumb-item"><i class="fas fa-grip-vertical"
                                            style="margin-right:1em;"></i>사용자</li>
                                    <li class="breadcrumb-item active">사용자 리스트</li>
                                </ol>
                            </nav>
                        </div>
                    </div>

                    <!-- Grid row -->
                    <div class="row rgba-white-light z-depth-1"
                        style="margin-left:1.2em; margin-right:1em; margin-bottom:3rem;max-width:38rem;">

                        <!-- Grid column -->
                        <div class="col-md-4">

                            <select class="mdb-select md-form" id="searchUsersSelect">
                                <option value="" disabled>검색 칼럼 선택</option>
                                <option value="id">아이디</option>
                                <option value="name" selected>이름</option>
                                <option value="level" selected>등급</option>
                            </select>

                        </div>
                        <div class="col-md-6" style="padding-top:1em;">

                            <form class="form-inline md-form mt-2 ml-2">
                                <input class="mt-2" type="text" placeholder="검색어 입력" style="max-width: 24em;"
                                    id="searchUsersInput">
                                <button type="button" class="btn btn-outline-indigo btn-rounded btn-sm px-2"
                                    onclick="searchUsersItem()"><i class="fas fa-search mt-0 indigo-text"
                                        style="margin-right:0.5em;"></i>검색</button>
                            </form>

                        </div>
                        <div class="col-md-2">

                            <!-- ProgressBar -->
                            <div style="display:none; padding-top:1.7em;" id="progressUsers1">
                                <div class="preloader-wrapper small active crazy">
                                    <div class="spinner-layer spinner-blue-only">
                                        <div class="circle-clipper left">
                                            <div class="circle"></div>
                                        </div>
                                        <div class="gap-patch">
                                            <div class="circle"></div>
                                        </div>
                                        <div class="circle-clipper right">
                                            <div class="circle"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>


                        <!-- Grid column -->

                    </div>
                    <!-- Grid row -->


                    <div class="card card-cascade narrower z-depth-1"
                        style="margin-left:1em; margin-right:1em; margin-bottom:2em;">

                        <!-- Card image -->
                        <div
                            class="view view-cascade gradient-card-header blue-gradient narrower py-2 mx-4 mb-3 d-flex justify-content-between align-items-center">

                            <a href="" class="white-text mx-3">사용자 리스트</a>

                            <div>
                                <span id="totalUsersOutput" class="badge badge-pill badge-primary"
                                    style="padding:0.6em; margin-right:1em;">결과 0</span>
                                <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2"
                                    onclick="showUsersAddPage()"><i class="fas fa-plus mt-0"
                                        style="margin-right:0.5em;"></i>추가</button>
                            </div>

                        </div>
                        <!-- /Card image -->

                        <div class="card-body">

                            <div class="table-responsive">
                                <!-- Table -->
                                <table class="table table-sm mb-0 table-striped" id="tableUsers1">

                                    <!-- Table head -->
                                    <thead>
                                        <tr>
                                            <th style="width:10%;"></th>
                                            <th class="th-lg" style="width:10%;"><a>아이디 <i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg" style="width:20%;"><a >이름<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg" style="width:10%;"><a>ESL수신권한<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg" style="width:10%;"><a >전광판수신권한<i
                                                        class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg" style="width:20%;"><a >수신번호<i
                                                class="fas fa-sort ml-1"></i></a></th>
                                            <th class="th-lg text-center" style="width:20%;"><a href="">기능</a></th>
                                        </tr>
                                    </thead>
                                    <!-- Table head -->

                                </table>
                            </div>

                        </div>

                        <div class="card-footer">

                            <div id="paginationUsers"></div>

                        </div>

                    </div>

                </div>
            </div>

            <!-- Page 4-1-1 : 사용자 수정 -->
            <div id="page4-1-1" style="display:none;">

                <div class="container-fluid">

                    <div class="card" style="margin-left:4em; margin-right:4em; margin-top:2em; margin-bottom:2em;">

                        <div class="card-header info-color white-text text-center py-4">
                            <h4 id="page4-1-1Title">사용자 추가</h4>
                        </div>

                        <div class="card-body">

                            <form class="text-center" style="color:#757575; padding:4em;" action="#">

                                <div class="md-form mt-3">
                                    <input type="text" id="idUsersInput" class="form-control" required>
                                    <label for="idUsersInput">아이디</label>
                                </div>
                                <!-- BY START 2019-11-01 -->
                                <div class="md-form mt-3">
                                    <input type="password" id="passwordUsersInput" class="form-control" required>
                                    <label for="passwordUsersInput">암호</label>
                                </div>
                                <div class="md-form mt-3"   >
                                    <input type="password" id="passwordUsersInput2" class="form-control" required>
                                    <label for="passwordUsersInput2">암호 확인</label>
                                </div>
                                <!-- BY END 2019-11-01 -->
                                <div class="md-form mt-3">
                                    <input type="text" id="nameUsersInput" class="form-control" required>
                                    <label for="nameUsersInput">이름</label>
                                </div>

                                <div class="md-form mt-3">
                                    <input type="text" id="phoneUsersInput" class="form-control" required>
                                    <label for="phoneUsersInput">SMS 수신 번호</label>
                                </div>

                                <div class="md-form mt-3">
                                    <input type="text" id="deptUsersInput" class="form-control" required>
                                    <label for="deptUsersInput">소속</label>
                                </div>
                                <div class="md-form mt-3">

                                    <select class="mdb-select md-form" id="levelUsersInput" required>
                                        <option value="" disabled selected>ESL SMS 수신권한</option>
                                        <option value="1">1등급(SMS 등록))</option>
                                        <option value="2">2등급 (ESL관리자)</option>
                                    </select>
                                    <select class="mdb-select md-form" id="boardUsersInput" required>
                                        <option value="" disabled selected>전광판  SMS 수신권한</option>
                                        <option value="1">받기(SMS 등록 (UNS인원만)))</option>
                                        <option value="0">받지 않기</option>
                                    </select>
                                </div>
                                <!-- BY END 2019-11-01 -->

                                <div class="row" style="margin-top:3em;">
                                    <div class="col-sm-1"></div>
                                    <div class="col-sm-5">
                                        <button class="btn btn-outline-primary waves-effect"
                                            onclick="saveUsersItem()">저장</button>
                                    </div>
                                    <div class="col-sm-5">
                                        <button class="btn btn-outline-secondary waves-effect"
                                            onclick="changePage()">닫기</button>
                                    </div>
                                    <div class="col-sm-1"></div>
                                </div>

                            </form>

                        </div>

                    </div>

                </div>

            </div>


            <!-- Page 5-1 현장 운영자 / 데이터 입력 -->
            <div id="page5-1" class="page5-1" style="display:none;">

                <div class="container-fluid">

                    <!-- 대시보드 섹션 -->
                    <div class="row mb-1">

                        <div class="col-md-6" style="margin-left:1.2em; margin-right:1em; margin-top:10vh;">
                            <form class="form-inline md-form mt-2 ml-2">
                                <input class="mt-2" type="text" placeholder="부서 입력" style="max-width: 24em;"
                                    id="searchDashboardFieldInput">

                                <button type="button" class="btn btn-outline-indigo btn-rounded btn-sm px-2"
                                    onclick="searchDashboardFieldItem()"><i class="fas fa-search mt-0 indigo-text"
                                        style="margin-right:0.5em;"></i>검색</button>
                            </form>
                        </div>

                    </div>


                    <section class="pb-3" id="dashboardDevice3">

                        <div class="row mb-1">
                            <div class="col-md-3">
                                <nav aria-label="breadcrumb">
                                    <ol class="breadcrumb grey lighten-4">
                                        <li class="breadcrumb-item"><i class="fas fa-grip-vertical"
                                                style="margin-right:1em;"></i>단말 정보</li>
                                        <li class="breadcrumb-item"><span id="dashboardDevice3Group"></span></li>
                                    </ol>
                                </nav>
                            </div>
                            <div class="col-md-4 align-items-center" style="margin-top:1em;">
                                <span id="totalCount3" class="text-default" style="font-weight:bold;"></span>
                                <span id="totalNormal3" class="text-info"
                                    style="margin-left:2em; font-weight:bold;"></span>
                                <span id="totalAlert3" class="text-danger"
                                    style="margin-left:2em; font-weight:bold;"></span>
                            </div>
                            <div class="col-md-5 align-items-center" style="margin-top:1em;">
                                <span id="refreshInterval3"></span>
                                <span id="refreshTime3" style="margin-left:2em;"></span>
                                <span id="refreshRemaining3" style="margin-left:2em;"></span>
                            </div>
                        </div>

                    </section>
                    <!-- 대시보드 섹션 END -->

                </div>
            </div>

            <!-- Page 6-1 이미지 관리 -->
            <div id="page6-1" class="page6-1" style="display:none;">
                <div class="container-fluid">

                    <div class="row mb-1" style="margin-top:-2em; margin-left:1em; margin-right:1em;">
                        <div class="col-md-12">
                            <h4 class="mt-5 mb-3 font-weight-bold dark-grey-text">이미지 관리</h4>

                            <nav aria-label="breadcrumb">
                                <ol class="breadcrumb grey lighten-4">
                                    <li class="breadcrumb-item"><i class="fas fa-grip-vertical"
                                            style="margin-right:1em;"></i>이미지</li>
                                    <li class="breadcrumb-item active">이미지관리</li>
                                    <!-- ProgressBar -->
                                    <div style="display:none; padding-top:1.7em;" id="progressLegacy1">
                                        <div class="preloader-wrapper small active crazy">
                                            <div class="spinner-layer spinner-blue-only">
                                                <div class="circle-clipper left">
                                                    <div class="circle"></div>
                                                </div>
                                                <div class="gap-patch">
                                                    <div class="circle"></div>
                                                </div>
                                                <div class="circle-clipper right">
                                                    <div class="circle"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </ol>
                            </nav>
                        </div>
                    </div>

                    <div class="card card-cascade narrower z-depth-1"
                        style="margin-left:1em; margin-right:1em; margin-bottom:2em;">
                        <div class="row">
                            <button type="submit" class="btn btn-primary" style="float: left; width:200px" onclick="showImageInput()" >이미지 올리기<i class="fas fa-magic ml-1"></i></button>
                            <button type="button" class="btn btn-flat btn-lg" style="float: left; width:200px" onclick="addCategoryInput()">카테고리 추가</button>
                        </div>
                        <div class="card-body">
                            <div id="accordion1">
                                <div class="card">
                                  <div class="card-header" id="headingOne">
                                    <h5 class="mb-0">
                                      <button class="btn btn-link" data-toggle="collapse"  data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                        <h4>이미지 전체 보기</h4> 
                                      </button>
                                    </h5>
                                  </div>
                                  <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion1">
                                    <div class="card-body">
                                        <a class="btn-floating  btn-danger" style="float: right;" onclick="deleteImageModal('이미지 전체 보기')"><i class="fas fa-trash"></i></a>
                                        <div class="imageDiv">                  
                                        </div>
                                    </div>
                                  </div>
                                </div>
                            </div>
                            <div class="category-body">
                            </div>
                        </div>
                    </div>  
                </div>
            </div>




        </main>
        <!--Main Layout-->




    </div>

    <!-- ================ 대화상자 ================ -->

    <!--Modal: modalLayoutDelete-->
    <div class="modal fade" id="modalLayoutDelete" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-notify modal-info" role="document">
            <!--Content-->
            <div class="modal-content text-center">
                <!--Header-->
                <div class="modal-header d-flex justify-content-center">
                    <p class="heading">레이아웃 삭제 확인</p>
                </div>

                <!--Body-->
                <div class="modal-body">

                    <div class="row">
                        <div class="col-3">
                            <p></p>
                            <p class="text-center"><i class="fas fa-times fa-4x animated rotateIn"></i></p>
                        </div>

                        <div class="col-9 align-self-center">
                            <p></p>
                            <p>선택한 항목을 삭제하시겠습니까?</p>
                        </div>
                    </div>

                </div>

                <!--Footer-->
                <div class="modal-footer flex-center">
                    <a href="" class="btn btn-info waves-effect" data-dismiss="modal" onclick="requestLayoutRemove()"> 예
                    </a>
                    <a type="button" class="btn  btn-outline-info waves-effect" data-dismiss="modal">아니오</a>
                </div>
            </div>
            <!--/.Content-->
        </div>
    </div>
    <!--Modal: modalLayoutDelete-->


    <!--Modal: modalDeviceDelete-->
    <div class="modal fade" id="modalDeviceDelete" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-notify modal-info" role="document">
            <!--Content-->
            <div class="modal-content text-center">
                <!--Header-->
                <div class="modal-header d-flex justify-content-center">
                    <p class="heading">단말 삭제 확인</p>
                </div>

                <!--Body-->
                <div class="modal-body">

                    <div class="row">
                        <div class="col-3">
                            <p></p>
                            <p class="text-center"><i class="fas fa-times fa-4x animated rotateIn"></i></p>
                        </div>

                        <div class="col-9 align-self-center">
                            <p></p>
                            <p>선택한 항목을 삭제하시겠습니까?</p>
                        </div>
                    </div>

                </div>

                <!--Footer-->
                <div class="modal-footer flex-center">
                    <a href="" class="btn btn-info waves-effect" data-dismiss="modal" onclick="requestDeviceRemove()"> 예
                    </a>
                    <a type="button" class="btn  btn-outline-info waves-effect" data-dismiss="modal">아니오</a>
                </div>
            </div>
            <!--/.Content-->
        </div>
    </div>
    <!--Modal: modalDeviceDelete-->


    <!--Modal: modalDeviceGroupDelete-->
    <div class="modal fade" id="modalDeviceGroupDelete" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-notify modal-info" role="document">
            <!--Content-->
            <div class="modal-content text-center">
                <!--Header-->
                <div class="modal-header d-flex justify-content-center">
                    <p class="heading">단말 그룹 삭제 확인</p>
                </div>

                <!--Body-->
                <div class="modal-body">

                    <div class="row">
                        <div class="col-3">
                            <p></p>
                            <p class="text-center"><i class="fas fa-times fa-4x animated rotateIn"></i></p>
                        </div>

                        <div class="col-9 align-self-center">
                            <p></p>
                            <p>선택한 항목을 삭제하시겠습니까?</p>
                        </div>
                    </div>

                </div>

                <!--Footer-->
                <div class="modal-footer flex-center">
                    <a href="" class="btn btn-info waves-effect" data-dismiss="modal"
                        onclick="requestDeviceGroupRemove()"> 예 </a>
                    <a type="button" class="btn  btn-outline-info waves-effect" data-dismiss="modal">아니오</a>
                </div>
            </div>
            <!--/.Content-->
        </div>
    </div>
    <!--Modal: modalDeviceGroupDelete-->



    <!--Modal: modalLegacyConfirmApply-->
    <div class="modal fade" id="modalLegacyConfirmApply" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-notify modal-info" role="document">
            <!--Content-->
            <div class="modal-content text-center">
                <!--Header-->
                <div class="modal-header d-flex justify-content-center">
                    <p class="heading">ESL 서버 적용 확인</p>
                </div>

                <!--Body-->
                <div class="modal-body">
                    <div class="row" style="margin-left:20%">
                        <p style="font-size:1em">HOST: <span id="hostDiv" style="font-size: 2em;"></span></p>
                    </div>
                    <div class="row" style="margin-left:20%">
                        <p style="font-size:1em">PORT: <span id="portDiv" style="font-size: 2em;"></span></p>
                    </div>

                    <div class="row">
                        <div class="col-3">
                            <p class="text-center"><i class="fas fa-times fa-4x animated rotateIn"></i></p>
                        </div>

                        <div class="col-9 align-self-center">
                            <p></p>
                            <p>선택한 host와 port를 <br> ESL SERVER로 적용하시겠습니까?</p>
                        </div>
                    </div>

                </div>

                <!--Footer-->
                <div class="modal-footer flex-center">
                    <a href="" class="btn btn-info waves-effect" data-dismiss="modal"
                        onclick="modifyLegacy()"> 예 </a>
                    <a type="button" class="btn  btn-outline-info waves-effect" data-dismiss="modal">아니오</a>
                </div>
            </div>
            <!--/.Content-->
        </div>
    </div>


    <!--Modal: modalUsersDelete-->
    <div class="modal fade" id="modalUsersDelete" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-notify modal-info" role="document">
            <!--Content-->
            <div class="modal-content text-center">
                <!--Header-->
                <div class="modal-header d-flex justify-content-center">
                    <p class="heading">사용자 삭제 확인</p>
                </div>

                <!--Body-->
                <div class="modal-body">

                    <div class="row">
                        <div class="col-3">
                            <p></p>
                            <p class="text-center"><i class="fas fa-times fa-4x animated rotateIn"></i></p>
                        </div>

                        <div class="col-9 align-self-center">
                            <p></p>
                            <p>선택한 항목을 삭제하시겠습니까?</p>
                        </div>
                    </div>

                </div>

                <!--Footer-->
                <div class="modal-footer flex-center">
                    <a href="" class="btn btn-info waves-effect" data-dismiss="modal" onclick="requestUsersRemove()"> 예
                    </a>
                    <a type="button" class="btn  btn-outline-info waves-effect" data-dismiss="modal">아니오</a>
                </div>
            </div>
            <!--/.Content-->
        </div>
    </div>
    <!--Modal: modalUsersDelete-->


    <!--Modal: modalDeviceConfirmApply-->
    <div class="modal fade" id="modalDeviceConfirmApply" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-notify modal-info" role="document">
            <!--Content-->
            <div class="modal-content text-center">
                <!--Header-->
                <div class="modal-header d-flex justify-content-center">
                    <p class="heading">단말 데이터 적용 확인</p>
                </div>

                <!--Body-->
                <div class="modal-body">

                    <div class="row">
                        <div class="col-3">
                            <p></p>
                            <p class="text-center"><i class="fas fa-times fa-4x animated rotateIn"></i></p>
                        </div>

                        <div class="col-9 align-self-center">
                            <p></p>
                            <p>선택한 단말에 데이터를 적용하시겠습니까?</p>
                        </div>
                    </div>

                </div>

                <!--Footer-->
                <div class="modal-footer flex-center">
                    <a href="" class="btn btn-info waves-effect" data-dismiss="modal"
                        onclick="requestDeviceDataApply()"> 예 </a>
                    <a type="button" class="btn  btn-outline-info waves-effect" data-dismiss="modal">아니오</a>
                </div>
            </div>
            <!--/.Content-->
        </div>
    </div>
    <!--Modal: modalConfirmDelete-->

    <!--Modal: modalConfirmApply-->
    <div class="modal fade" id="modalDeviceConfirmApply" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-notify modal-info" role="document">
            <!--Content-->
            <div class="modal-content text-center">
                <!--Header-->
                <div class="modal-header d-flex justify-content-center">
                    <p class="heading">단말 데이터 적용 확인</p>
                </div>

                <!--Body-->
                <div class="modal-body">

                    <div class="row">
                        <div class="col-3">
                            <p></p>
                            <p class="text-center"><i class="fas fa-times fa-4x animated rotateIn"></i></p>
                        </div>

                        <div class="col-9 align-self-center">
                            <p></p>
                            <p>선택한 단말에 데이터를 적용하시겠습니까?</p>
                        </div>
                    </div>

                </div>

                <!--Footer-->
                <div class="modal-footer flex-center">
                    <a href="" class="btn btn-info waves-effect" data-dismiss="modal"
                        onclick="requestDeviceDataApply()"> 예 </a>
                    <a type="button" class="btn  btn-outline-info waves-effect" data-dismiss="modal">아니오</a>
                </div>
            </div>
            <!--/.Content-->
        </div>
    </div>
    <!--Modal: modalConfirmDelete-->

    <!--Modal: modalBatteryUpdate-->
    <div class="modal fade" id="modalBatteryUpdate" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-notify modal-info" role="document">
            <!--Content-->
            <div class="modal-content text-center">
                <!--Header-->
                <div class="modal-header d-flex justify-content-center">
                    <p class="heading">베터리 정보 업데이트</p>
                </div>

                <!--Body-->
                <div class="modal-body">

                    <div class="row">
                        <div class="col-3">
                            <p></p>
                            <p class="text-center"><i class="fas fa-times fa-4x animated rotateIn"></i></p>
                        </div>

                        <div class="col-9 align-self-center">
                            <p></p>
                            <p>모든 기기 베터리 정보를 <br>업데이트를 하시겠습니까?</p>
                        </div>
                    </div>

                </div>

                <!--Footer-->
                <div class="modal-footer flex-center">
                    <a href="" class="btn btn-info waves-effect" data-dismiss="modal"
                        onclick="setESLSERVERIP()"> 예 </a>
                    <a type="button" class="btn  btn-outline-info waves-effect" data-dismiss="modal">아니오</a>
                </div>
            </div>
            <!--/.Content-->
        </div>
    </div>
    <!--Modal: modalBatteryUpdate-->



    <!-- The Modal -->
    <div class="modal fade" id="mappingModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content" style="width:1080px">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Mapping</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <div id="JsonContainer" style="width:100%; height:30em;">

                    </div>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal"
                        onclick="saveLayoutMapping()">Save</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>

            </div>
        </div>
    </div>


    <!-- The Modal -->
    <div class="modal fade" id="deviceDataModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content" style="width:1080px">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Device Data</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <div id="JsonContainer2" style="width:100%; height:30em;">

                    </div>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal"
                        onclick="saveDeviceData()">Save</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>

            </div>
        </div>
    </div>
    <!-- The Image Modal -->
    <div class="modal fade" id="imageModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content" style="width:1080px">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">적용 이미지 보기</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <img id="data_image" style="width: 50%; height: auto; margin-left:10vw;" />
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>

            </div>
        </div>
    </div>


    <!-- 단말 리스트에서 데이터 입력 폼 -->
    <div class="modal fade" id="modalDataInput" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content" style="width:1080px">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title" id="modalDataInputTitle">Data Input</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <div id="inputContainer" style="width:100%; height:30em; overflow:auto;">

                    </div>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal"
                        onclick="saveDeviceDataInput()">Save</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>

            </div>
        </div>
    </div>


    <!-- 현장운영자의 데이터 입력을 위한 데이터 입력 폼 -->
    <div class="modal fade" id="modalDataInput2" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content" style="width:1080px">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title" id="modalDataInputTitle2">데이터 입력</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <div id="inputContainer2" style="width:100%; height:30em; overflow:auto;">

                    </div>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal"
                        onclick="saveApplyDeviceDataInput()">즉시반영</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal"
                        onclick="saveDeviceDataInput2()">저장만</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">닫기</button>
                </div>

            </div>
        </div>
    </div>

    <!-- 이미지 업로드 폼 -->
    <div class="modal fade" id="modalImageInput" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content" style="width:1080px">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">이미지 업로드</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <form enctype="multipart/form-data">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroupFileAddon01">Upload</span>
                            </div>
                            <div class="custom-file">
                            <input type="file" class="custom-file-input" name="imageFile" id="imageFile" accept=".png, .jpg, .jpeg"
                                aria-describedby="inputGroupFileAddon01" action="/baroboard/upload">
                            <label class="custom-file-label" for="imageFile">이미지선택</label>
                            </div>
                        </div>
                        <!-- Modal footer -->
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" name="image" data-dismiss="modal"
                            onclick="saveImageDataInput()"  >Save</button>
                            <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <!--Modal: modalDeleteImage-->
    <div class="modal fade" id="modalDeleteImage" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-notify modal-info" role="document">
            <!--Content-->
            <div class="modal-content text-center">
                <!--Header-->
                <div class="modal-header d-flex justify-content-center">
                    <p class="modalDeleteImage_heading" style="font-size: 1.5em; color:white"></p>
                </div>

                <!--Body-->
                <div class="modal-body">

                    <div class="row">
                        <div class="col-3">
                            <p></p>
                            <p class="text-center"><i class="fas fa-times fa-4x animated rotateIn"></i></p>
                        </div>

                        <div class="col-9 align-self-center">
                            <p class="modalDeleteImage_items"></p>
                            <p class="modalDeleteImage_text"></p>
                        </div>
                    </div>

                </div>

                <!--Footer-->
                <div class="modal-footer flex-center">
                    <a href="" class="btn btn-info waves-effect" data-dismiss="modal"
                        onclick="requestDeleteImage()"> 예 </a>
                    <a type="button" class="btn  btn-outline-info waves-effect" data-dismiss="modal">아니오</a>
                </div>
            </div>
            <!--/.Content-->
        </div>
    </div>
    <!--Modal: modalDeleteImage-->

    <!--Modal: modalAddImageInCategory-->
    <div class="modal fade" id="modalAddImageInCategory" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-notify modal-info" role="document">
            <!--Content-->
            <div class="modal-content text-center">
                <!--Header-->
                <div class="modal-header d-flex justify-content-center">
                    <p class="modalAddImage_heading" style="font-size: 1.5em; color:white"></p>
                </div>

                <!--Body-->
                <div class="modal-body">

                    <div class="row" id = "addImagePanel">
                    </div>

                </div>

                <!--Footer-->
                <div class="modal-footer flex-center">
                    <a href="" class="btn btn-info waves-effect" data-dismiss="modal"
                        onclick="requestAddImageInCategory()"> 예 </a>
                    <a type="button" class="btn  btn-outline-info waves-effect" data-dismiss="modal">아니오</a>
                </div>
            </div>
            <!--/.Content-->
        </div>
    </div>
    <!--Modal: modalAddImageInCategory-->

    <!-- 카테고리 생성 폼 -->
    <div class="modal fade" id="modalCategoryInput" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content" style="width:1080px">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">카테고리 생성</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <label for="nameCategoryInput">카테고리명</label>
                    <input type="text" id="nameCategoryInput" class="form-control" required>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-default"  data-dismiss="modal" onclick="saveCategoryDataInput()">Save</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>

            </div>
        </div>
    </div>
    <!-- 카테고리 삭제 폼 -->
    <div class="modal fade" id="modalCategoryDelete" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content" style="width:1080px">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">카테고리 삭제</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <h5 class="categoryName2" style="display: none;"></h5>
                    <h5 class="categoryName"></h5>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger"  data-dismiss="modal" onclick="deleteCategory()">삭제</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>

            </div>
        </div>
    </div>

    <!-- ================ 대화상자 END ================ -->



    <!-- SCRIPTS -->
    <!-- JQuery -->
    <script type="text/javascript" src="/mdb/js/jquery-3.4.1.min.js"></script>
    <!-- Bootstrap tooltips -->
    <script type="text/javascript" src="/mdb/js/popper.min.js"></script>
    <!-- Bootstrap core JavaScript -->
    <script type="text/javascript" src="/mdb/js/bootstrap.js"></script>
    <!-- MDB core JavaScript -->
    <script type="text/javascript" src="/mdb/js/mdb.min.js"></script>

    <!-- Axios -->
    <script src="/mdb/js/axios.min.js"></script>

    <!-- Interact.js -->
    <script src="/mdb/js/interact.min.js"></script>

    <!-- EasyUI -->
    <link rel="stylesheet" type="text/css" href="/easyui/themes/default/easyui.css">
    <link rel="stylesheet" type="text/css" href="/easyui/themes/icon.css">
    <script src="/easyui/jquery.easyui.min.js"></script>
    <script src="/easyui/plugins/jquery.color.js"></script>

    <!-- DomToImage -->
    <script src="/js/dom-to-image.min.js"></script>

    <!-- Base64 -->
    <script src="/js/base64js.min.js"></script>

    


   <!-- JSON 편집기 -->
    <link href="/css/jsoneditor.min.css" rel="stylesheet" type="text/css">
    <script src="/js/jsoneditor.min.js"></script>

    <!-- QR Code -->
    <script src="/js/qrcode.js"></script>
    <script src="/js/qrcode_UTF8.js"></script>

    <!-- moment -->
    <script src="/js/moment.min.js"></script>

    <!-- CryptoJS -->
    <script src="/js/CryptoJS/rollups/aes.js"></script>
    <script src="/js/CryptoJS/rollups/sha256.js"></script>
    <script src="/js/CryptoJS/rollups/pbkdf2.js"></script>

    <script>

        /*  BY START 2019-11-06
         *  required 조건
         */
        const condition = [" ", null, 'undefined', ''];
        // BY END 2019-11-06

        // BY START 2020-01-28
        let selectedImage ='';
        let selectedImageInCategory = {};
        let imageInCategoryArray=[];
        let imageFile=[];
        let selectedCategory;
        let imageInSelectedCategory;
        let org_layoutName;
        // BY END 2020-01-28


        // 메뉴의 페이지 이름
        // 페이지를 새로 추가하는 경우 이 배열에 페이지 이름을 추가해야 함
        const pageNames = [
            'page0-1',
            'page0-2',
            'page1-1',
            'page1-1-1',
            'page1-2',
            'page2-1',
            'page2-1-1',
            'page2-2',
            'page2-2-1',
            'page2-3',
            'page2-3-1',
            'page3-1',
            'page4-1',
            'page4-1-1',
            'page5-1',
            'page6-1'
        ]

        var mode;
        var selected;
        var search;
        var searchValue;
        var currentPage= 1;

        //===== Layout Editor =====//            
        let selectedItem = [];

        var jsonEditor;
        var jsonEditor2;

    // BY START 2019-11-22 
        // 레이아웃 수정시 기존 Mapping 정보 불러오기위함. 
        let modifyLayoutMappingItem;
    // BY END 2019-11-22

    // BY START 2020-01-20
        // 이미지 카테고리명과 카테고리 안 사진 명.
        let imageCategoryItems
    // BY END 2020-01-20
        //===== Dashboard =====//

        // 화면 갱신 시간 간격 (1분)
        let dashboardRefreshInterval = 60000;

        // 화면 갱신을 위한 Interval 객체
        let intervalObjs = [];
        let intervalObjs2 = [];

        let curDashboardGroupId;
        let curDashboardGroupName;

        // 화면 갱신 남은 시간 표시를 위한 Interval 객체
        let curRemainingTime = 0;
        let remainingIntervalObj;

        // 사용자 인증
        let authenticated = false;
        let sessionUser = null;


        let eslServerIp;

        let _key;

        $(document).ready(function () {
            console.log('ready 호출됨');
            
            //  BY START 2021-04-01 서버에서 받아온 key,iv 값
            _key = '<%=parseKey %>';
            //replaceAll prototype 선언
            String.prototype.replaceAll = function (org, dest) {
                return this.split(org).join(dest);
            }



            //===== Layout List =====//

            // SideNav Initialization
            //$(".button-collapse").sideNav();

            /*  BY START 2019-11-11
             *  뒤로가기 누를 시 hash 변화를 이용해 page 변경해주는 함수.
             */
            //locationHash change event
            $(window).bind('hashchange', function () {
                changePage();
            });
            // BY END 2019-11-11

            new WOW().init();
            
            $('.mdb-select').materialSelect();
            

            $('#previewModal').on('hidden.bs.modal',function () {
                requrestRemovePreviewDataApply();
            })


            if (!authenticated) {
                // 로그인 페이지 열기
                showPage('page0-1');

                // BY START 2019-11-12
                $('#hamburgerIcon').hide();
                // BY END 2019-11-12
                location.hash = '';
            } else {
                // 처음 페이지 열기
                if (sessionUser && sessionUser.level == 1) {
                    showPage('page5-1');
                    $('.main').css('padding-left', '80px');
                    $('.main').css('border', '2px solid darkblue')

                    // 현장 운영자 대시보드 요청
                    requestDashboardFieldList();
                } else {
                    showPage('page1-1');

                    // 레이아웃 리스트 요청
                    requestLayoutList(1, 10);
                }

            }


            // Json editor
            initJsonEditor();

            // Json editor
            initJsonEditor2();

            //===== Layout List END =====//

            // BY START 2019-10-31
            /*
                mdb.min.css 에서 @media 반응형 css 1440 미만을 1800으로 수정함.
            */

            //사이드 메뉴 작게 버튼 Click Event
            $('.side-toggle').on('click', function (e) {
                $('#slide-out').css("transform", 'translateX(-100%)')
            })
            //사이드 메뉴 아이템 click Event
            $('.sideMenuItem').on('click', function (e) {
                $('#slide-out').css("transform", "translateX(-100%)")
            })

            //사이드 메뉴 보이기
            $('#hamburgerIcon').on('click', function (e) {
                $('#slide-out').css("transform", "translateX(0%)")
            })
            // BY END 2019-10-31

            


            //===== Layout Editor =====//

            // Color Editor
            $.extend($.fn.datagrid.defaults.editors, {
                color: {
                    init: function (container, options) {
                        var input = $('<input class="easyui-color">').appendTo(container);
                        input.color(options);
                        return input;
                    },
                    destroy: function (target) {
                        $(target).color('destroy');
                    },
                    getValue: function (target) {
                        return $(target).color('getValue');
                    },
                    setValue: function (target, value) {
                        $(target).color('setValue', value);
                    },
                    resize: function (target, width) {
                        $(target).color('resize', width);
                    }
                }
            })

            const data = [];
            $('#pg').propertygrid('loadData', data);

            $('#pg').propertygrid({
                onSelect: function (index, row) {
                    console.log('onSelect -> ' + index + ', ' + JSON.stringify(row));
                },
                onBeginEdit: function (index, row) {
                    var pg = $(this);
                    var ed = pg.propertygrid('getEditors', index)[0];
                    if (ed) {
                        var input;
                        if ($(ed.target).hasClass('textbox-f')) {
                            input = $(ed.target).textbox('textbox');
                        } else {
                            input = $(ed.target);
                        }
                        input.bind('keydown', function (e) {
                            console.log('keydown -> ' + e.keyCode);

                            if (e.keyCode == 9) {	// tab key
                                let cell = pg.propertygrid('options').finder.getTr(pg[0], index + 1).find('td[field="value"] div.datagrid-cell');
                                console.log(cell);
                                if (cell.length == 0) {
                                    cell = pg.propertygrid('options').finder.getTr(pg[0], index - 1).find('td[field="value"] div.datagrid-cell');
                                }

                                cell.trigger('click');
                                return false;
                            } else if (e.keyCode == 13) {	// enter key
                                let cell = pg.propertygrid('options').finder.getTr(pg[0], index + 1).find('td[field="value"] div.datagrid-cell');
                                console.log(cell);
                                if (cell.length == 0) {
                                    cell = pg.propertygrid('options').finder.getTr(pg[0], index - 1).find('td[field="value"] div.datagrid-cell');
                                }

                                cell.trigger('click');
                                return false;
                            }
                        })
                    }
                },
                onAfterEdit: function (index, row) {
                    console.log('onAfterEdit -> ' + index + ', ' + JSON.stringify(row));

                    applyPropertyChange(selectedItem[0], row);
                }

            });

            $('#componentTree1').tree({
                onBeforeSelect: function (node) {
                    console.log(node);

                    const curTarget = document.getElementById(node.id);
                    setSelected(curTarget);
                }
            });


            // make dialog draggable
            $('.modal-dialog').draggable({
                "handle": ".modal-header"
            });


            //===== Layout Editor END =====//

            // refresh interval 글자 표시
            let intervalSec = dashboardRefreshInterval / 1000;
            let intervalMin = 0;
            if (intervalSec > 59) {
                intervalMin = intervalSec / 60;
                intervalSec = intervalSec % 60;
            }

            let intervalTime = '';
            if (intervalMin > 0) {
                intervalTime += intervalMin + '분 ';
            }
            if (intervalSec > 0) {
                intervalTime += intervalSec + '초';
            }

            $('#refreshInterval1').text('갱신 간격 : ' + intervalTime);
            $('#refreshInterval2').text('갱신 간격 : ' + intervalTime);
            $('#refreshInterval3').text('갱신 간격 : ' + intervalTime);


            // toastr 옵션
            //toastr.options = {
            //    positionClass: "toast-bottom-right"
            //}

            // 로그인 페이지의 입력상자에 Enter 키 처리
            $('#userIdInput').on("keypress", function (e) {
                if (e.which == 13) {
                    requestLogin();
                }
            });

            $('#userPasswordInput').on("keypress", function (e) {
                if (e.which == 13) {
                    requestLogin();
                }
            });

            // 데이터입력 페이지의 부서입력
            $('#searchDashboardFieldInput').on("keypress", function (e) {
                if (e.which == 13) {
                    searchDashboardFieldItem();
                }
            });

        });

        // close sidenav
        function sideMenuSelected(elem) {
            currentPage = 1;
            console.log('sideMenuSelected called');
            // remove all active class attribute
            $('.sideMenuItem').removeClass('active');

            elem.classList.add('active');

            // 가로 크기 체크
            var curContainer = $('#container');
            var width = curContainer.width();

            //  BY START 2019-10-31  햄버거 아이콘 강제로 클릭되는거 막아둠 
            // if (width <= 1440) {

            //     $('#hamburgerIcon').trigger('click');


            //     $('#slide-out').attr('style','transform: translateX(-100%);transition:  all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)');
            // } else {
            //     $('#sidenav-overlay').remove();

            // }
            $('#sidenav-overlay').hide();
            // BY END 2019-10-31
        }


        function initJsonEditor() {
            // create the editor
            var JsonContainer = document.getElementById("JsonContainer");
            var options = {
                mode: 'code',
                modes: ['code', 'tree'], // allowed modes
                onError: function (err) {
                    alert(err.toString());
                },
                onModeChange: function (newMode, oldMode) {
                    console.log('Mode switched from', oldMode, 'to', newMode);
                }
            };
            jsonEditor = new JSONEditor(JsonContainer, options);
            jsonEditor.set({});
            //jsonEditor.expandAll();

        }


        function initJsonEditor2() {
            // create the editor
            var JsonContainer2 = document.getElementById("JsonContainer2");
            var options = {
                mode: 'code',
                modes: ['code', 'tree'], // allowed modes
                onError: function (err) {
                    alert(err.toString());
                },
                onModeChange: function (newMode, oldMode) {
                    console.log('Mode switched from', oldMode, 'to', newMode);
                }
            };
            jsonEditor2 = new JSONEditor(JsonContainer2, options);
            jsonEditor2.set({});
            //jsonEditor2.expandAll();

        }



        //===== Baroboard Layout =====//
        function requestLayoutList(page, perPage) {
            console.log('requestLayoutList 호출됨 : ' + page + ', ' + perPage);

            requestLayoutSearch(page, perPage);
        }

        function requestLayoutSearch(page, perPage) {
            console.log('requestLayoutSearch 호출됨');

            var params = '?page=' + page
                + '&perPage=' + perPage;

            if (searchValue) {
                params += '&search=' + search;
                params += '&searchValue=' + searchValue;
            }

            // show progressbar
            $('#progressLayout1').show();

            axios({
                method: 'get',
                url: '/baroboard/layout' + params,
                responseType: 'json'
            }).then(function (response) {
                // hide progressbar
                $('#progressLayout1').hide();

                //console.log('응답 -> ' + JSON.stringify(response));

                // 테이블에서 헤더 아이템만 빼고 모두 삭제
                var tableLayout1 = document.getElementById('tableLayout1');
                var firstElementChild = tableLayout1.firstElementChild;
                tableLayout1.innerHTML = '';
                tableLayout1.append(firstElementChild);

                // 테이블에 응답 결과 추가
                response.data.output.body.forEach(function (item, index) {
                    addLayoutItem(item, index);
                })

                // 페이지 번호 구성하기
                makePagination(response.data.output.header, 'paginationLayout', 'requestLayoutList');

                // 검색 정보 설정
                setSearchValue('searchLayoutSelect', 'searchLayoutInput', search, searchValue);

                // 총 갯수 표시
                $('#totalLayoutOutput').text('결과 ' + response.data.output.header.total);

            }).catch(function (err) {
                // hide progressbar
                $('#progressLayout1').hide();

                console.error('Error -> ' + err);

                toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
            });
        }


        function addLayoutItem(item, index) {
            console.log('addItem 호출됨');

            var html = '<tr id="itemLayout' + item.id + '">'
                + '    <td class="text-left align-middle" style="width:8%;">'
                + '      <img src="/index_img/layout_48.png" style="width:2em;">'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:10%;">'
                + '      <span id="item' + item.id + '_resolution">' + item.id + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:20%;">'
                + '      <span id="item' + item.id + '_name">' + item.name + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:10%;">'
                + '      <span id="item' + item.id + '_resolution">' + item.resolution + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:20%;">'
                + '      <span id="item' + item.id + '_details">' + item.details + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:8%;">'
                + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" data-toggle="tooltip" data-placement="top" title="레이아웃 빌더로 보기" onclick="showLayoutBuilder(\'' + item.id + '\', \'' + item.name + '\', \'' + item.resolution + '\', \'' + item.details + '\', \'' + item.data + '\', \'' + item.mapping + '\')"><i class="fas fa-edit fa-lg blue-text"></i></button>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:8%;">'
                + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" data-toggle="tooltip" data-placement="top" title="매핑 정보 입력하기" onclick="showLayoutMapping(\'' + item.id + '\', \'' + item.name + '\', \'' + item.resolution + '\', \'' + item.details + '\', \'' + item.data + '\', \'' + item.mapping + '\')"><i class="fas fa-edit fa-lg blue-text"></i></button>'
                + '    </td>'
                + '    <td class="text-center align-middle" style="width:16%;">'
                + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" data-toggle="tooltip" data-placement="top" title="레이아웃 수정하기" onclick="showLayoutModifyPage(\'' + item.id + '\', \'' + item.name + '\', \'' + item.resolution + '\', \'' + item.details + '\')"><i class="fas fa-edit fa-lg cyan-text"></i></button>'
                + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" data-toggle="tooltip" data-placement="top" title="레이아웃 삭제하기" onclick="deleteLayoutItem(\'' + item.id + '\')"><i class="fas fa-trash fa-lg red-text"></i></button>'
                + '    </td>'
                + '</tr>';

            $('#tableLayout1').append(html);

        }

        function requestLayoutAdd(name, resolution, details, layoutId, create_author, data,mapping) {
            console.log('requestLayoutAdd 호출됨');
            var params = {
                name: name,
                resolution: resolution,
                details: details,
                create_author: create_author,
                mapping:mapping
            }

            if (layoutId) {
                params.id = layoutId;
            }

            if (data) {
                params.data = data;
            }

            axios({
                method: 'post',
                url: '/baroboard/layout',
                data: params,
                responseType: 'json'
            }).then(function (response) {
                console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.body.affectedRows > 0) {
                    console.log('추가 성공');

                    toastr.info('정상적으로 추가되었습니다.');

                    requestLayoutList(currentPage, 10);
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }
        // BY START 2019-12-11
        function requestPreviewLayoutAdd(name, resolution, details, layoutId, create_author, data,mapping) {
            console.log('requestPreviewLayoutAdd 호출됨');
            var params = {
                name: name,
                resolution: resolution,
                details: details,
                create_author: create_author,
                mapping:mapping
            }

            if (layoutId) {
                params.id = layoutId;
            }

            if (data) {
                params.data = data;
            }
            console.log(params);

            axios({
                method: 'post',
                url: '/baroboard/layout',
                data: params,
                responseType: 'json'
            }).then(function (response) {
                requestpreviewDataApply();

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }
        // BY END 2019-12-11

        function requestLayoutModify(id, name, resolution, details, modify_author, data,mapping) {
            console.log('requestLayoutModify 호출됨 : ' + id + ', ' + name + ', ' + resolution + ', ' + details);

            var params = {
                name: name,
                resolution: resolution,
                details: details,
                modify_author: modify_author,
                mapping:mapping
            }

            if (data) {
                params.data = data;
            }

            axios({
                method: 'put',
                url: '/baroboard/layout/' + id,
                data: params,
                responseType: 'json'
            }).then(function (response) {
                //console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.body.affectedRows > 0) {
                    
                    requestLayoutModify2(id,name); 
                    
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }
        function requestLayoutModify2(id,name) {
            params= {
                name:org_layoutName,
                id:id,
                newname:name
            }

            axios({
                method:'post',
                url:'/baroboard/device/modify/layout',
                data: params,
                responseType: 'json'
            }).then(function (response) {
                //console.log('응답 -> ' + JSON.stringify(response));

                if (response.data) {

                    console.log(response.data);
                    console.log('수정 성공');

                    toastr.info('정상적으로 수정되었습니다.');
                    
                    requestLayoutList(currentPage, 10);
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }

        function requestLayoutRemove() {
            console.log('requestLayoutRemove 호출됨 : ' + selected);

            axios({
                method: 'post',
                url: '/baroboard/device/check/usinglayout',
                data: {id:selected},
                responseType: 'json'
            }).then(function (response) {
    
                const usingLayoutDeviceCount = response.data.output.body[0].count

                if (usingLayoutDeviceCount > 0) {
                    
                    toastr.error('이 레이아웃을 사용하고있는 Device가 있습니다. 총 :'+usingLayoutDeviceCount+'개. 해당 디바이스를 변경 후 다시 시도하세요');
                }
                else {
                    axios({
                        method: 'delete',
                        url: '/baroboard/layout/' + selected,
                        responseType: 'json'
                    }).then(function (response) {
                        console.log('응답 -> ' + JSON.stringify(response));

                        if (response.data.output.body.affectedRows > 0) {
                            console.log('삭제 성공');

                            $('#toast-container').attr('class', 'md-toast-bottom-right');
                            toastr.info('정상적으로 삭제되었습니다.');

                            requestLayoutList(currentPage, 10);
                        }

                    })
                }
            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }


        function requestLayoutMappingUpdate(id, mapping) {
            console.log('requestLayoutMappingUpdate 호출됨 : ' + id + ', ' + mapping);

            const params = {
                id: id,
                mapping: mapping
            }

            axios({
                method: 'post',
                url: '/baroboard/layout/mapping/update',
                data: params,
                responseType: 'json'
            }).then(function (response) {
                console.log('응답 -> ' + JSON.stringify(response));
                
                if (response.data.output.affectedRows > 0) {
                    console.log('수정 성공');

                    toastr.info('정상적으로 수정되었습니다.');

                    requestLayoutList(currentPage, 10);
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }


        function showLayoutAddPage() {
            mode = 'add';

            $('#page1-1-1Title').text('레이아웃 추가');

            $('#nameLayoutInput').val('');
            $('#resolutionLayoutInput').val('');
            $('#detailsLayoutInput').val('');

            showPage('page1-1-1');
        }

        function searchLayoutItem() {
            search = $('#searchLayoutSelect').val();
            searchValue = $('#searchLayoutInput').val();
            console.log(searchValue);
            console.log('search : ' + search + ', ' + searchValue);

            requestLayoutSearch(1, 10);
            $('#searchLayoutInput').val('\n');
            console.log($('#searchLayoutInput').val());
        }

        function saveLayoutItem() {
            // BY START 2019-11-06
            var name = $('#nameLayoutInput').val();
            var resolution = $('#resolutionLayoutInput').val();
            var details = $('#detailsLayoutInput').val();
            if (name.includes(condition) || resolution.includes(condition) || details.includes(condition)) {
                toastr.error('필수 항목들을 전부 입력해 주세요', { timeOut: 2000 });
            }
            else {
                if (mode == 'add') {
                    // BY START 2019-11-11
                    var create_author = sessionUser.name;
                    addLayoutInputItem(name, resolution, details, create_author);
                } else if (mode == 'modify') {
                    var modify_author = sessionUser.name;
                    modifyLayoutInputItem(name, resolution, details, modify_author);
                    // BY END 2019-11-11
                }

                showPage('page1-1');
            }
        }
        // BY END 2019-11-06
        function addLayoutInputItem(name, resolution, details, create_author) {
            // 새로운 레이아웃 ID 생성
            var newId = 'L' + generateRequestCode();

            requestLayoutAdd(name, resolution, details, newId, create_author);

        }

        function showLayoutPage() {
            console.log('showLayoutPage called.');
            location.hash = '#ll';
            showPage('page1-1');

            requestLayoutList(currentPage, 10);
        }

        function showLayoutModifyPage(id, name, resolution, details) {
            console.log('showLayoutModifyPage 호출됨 : ' + id + ', ' + name + ', ' + resolution + ', ' + details);
            org_layoutName = name;
            mode = 'modify';
            selected = id;

            $('#page1-1-1Title').text('레이아웃 수정');

            $('#nameLayoutInput').val(name);
            $('#resolutionLayoutInput').val(resolution);
            $('#detailsLayoutInput').val(details);

            showPage('page1-1-1');

            $('#nameLayoutInput').focus();
            $('#resolutionLayoutInput').focus();
            $('#detailsLayoutInput').focus();

        }


        function modifyLayoutInputItem(name, resolution, details, modify_author) {
            console.log('modifyLayoutInputItem 호출됨');

            requestLayoutModify(selected, name, resolution, details, modify_author);
        }

        function deleteLayoutItem(id) {
            console.log('deleteLayoutItem 호출됨'+id);

            selected = id;

            $('#modalLayoutDelete').modal('show');
        }




        //===== Baroboard Device =====//

        function requestDeviceList(page, perPage) {
            console.log('requestDeviceList 호출됨 : ' + page + ', ' + perPage);
            requestDeviceSearch(page, perPage);
        }
        function requestDeviceListAll() {
            axios({
                method:'post',
                url:'/baroboard/device/statussync',
                responseType:'json'
            }).then(async function (response) {
                const data = response.data.output;
                let success = 0;
                let processing = 0;
                let timeout = 0;
                for(let i = 0 ; i < data.length ; i ++ ) {
                    if (data[i].status == "SUCCESS") {
                        success++;
                    }
                    else if (data[i].status == "PROCESSING") {
                        processing++;
                    }
                    else if (data[i].status == "TIMEOUT") {
                        timeout++;
                    }
                }
                addDeviceStatus(success,processing,timeout);
                
            }).catch(function (err) {
                console.log(err);
            
            }) 

            
            
        }
        
        function requestDeviceSearch(page, perPage) {
            console.log('requestDeviceSearch 호출됨');

            var params = '?page=' + page
                + '&perPage=' + perPage;

            if (searchValue) {
                params += '&search=' + search;
                params += '&searchValue=' + searchValue;
            }

            // show progressbar
            $('#progressDevice1').show();

            axios({
                method: 'get',
                url: '/baroboard/device' + params,
                responseType: 'json'
            }).then(function (response) {
                // hide progressbar
                $('#progressDevice1').hide();

                //console.log('응답 -> ' + JSON.stringify(response));

                // 테이블에서 헤더 아이템만 빼고 모두 삭제
                var tableDevice1 = document.getElementById('tableDevice1');
                var firstElementChild = tableDevice1.firstElementChild;
                tableDevice1.innerHTML = '';
                tableDevice1.append(firstElementChild);
                
                
                
                // 테이블에 응답 결과 추가
                response.data.output.body.forEach(function (item, index) {
                    addDeviceItem(item, index);
                })

                // 페이지 번호 구성하기
                makePagination(response.data.output.header, 'paginationDevice', 'requestDeviceList');

                // 검색 정보 설정
                setSearchValue('searchDeviceSelect', 'searchDeviceInput', search, searchValue);

                // 총 갯수 표시
                $('#totalDeviceOutput').text('결과 ' + response.data.output.header.total);

            }).catch(function (err) {
                // hide progressbar
                $('#progressDevice1').hide();

                console.error('Error -> ' + err);

                toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
            });
        }

        /* BY START 2019-11-01
         * 
         */
        function requestDeviceAdd(newId, deviceCode, deviceName, deviceGroupId, deviceGroupName, deviceType, deviceSize, deviceResolution, location, deviceRotation, deviceStatusCode, deviceStatusMessage, battery, admin, deviceLayoutId, deviceLayoutName, deviceLayoutData ,deviceLayoutMapping , create_author) {
            console.log('requestDeviceAdd 호출됨');
            var params = {
                id: newId,
                name: deviceName,
                group_name: deviceGroupName,
                group_id: deviceGroupId,
                type: deviceType,
                size: deviceSize,
                resolution: deviceResolution,
                code: deviceCode,
                rotation: deviceRotation,
                location: location,
                status: deviceStatusCode,
                status_message: deviceStatusMessage,
                battery: battery,
                admin: admin,
                layout_id: deviceLayoutId,
                layout_name: deviceLayoutName,
                data: deviceLayoutData,
                mapping:deviceLayoutMapping,
                create_author: create_author
            }

            axios({
                method: 'post',
                url: '/baroboard/device',
                data: params,
                responseType: 'json'
            }).then(function (response) {
                console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.body.affectedRows > 0) {

                    console.log('추가 성공');
                    saveDeviceDataInput();
                    toastr.info('정상적으로 추가되었습니다.');
                    requestDeviceList(currentPage, 10);
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }
        
        // BY END 2019-11-04
        // BY START 2019-11-04
        function requestDeviceModify(id, deviceCode, deviceName, deviceGroupId, deviceGroupName, deviceType, deviceSize, deviceResolution, location, deviceRotation, battery, admin, deviceLayoutId, deviceLayoutName, deviceLayoutData ,deviceLayoutMapping, modify_author) {
            console.log('requestDeviceModify 호출됨 : ' + id + ', ' + name + ', ' + ', ' + deviceType + ', ' + deviceCode + ', ' + deviceRotation);

            var params = {
                name: deviceName,
                group_name: deviceGroupName,
                group_id: deviceGroupId,
                type: deviceType,
                size: deviceSize,
                resolution: deviceResolution,
                code: deviceCode,
                rotation: deviceRotation,
                location: location,
                battery: battery,
                admin: admin,
                layout_id: deviceLayoutId,
                layout_name: deviceLayoutName,
                data: deviceLayoutData,
                mapping: deviceLayoutMapping,
                modify_author: modify_author
            }
            // BY END 2019-11-04
            axios({
                method: 'put',
                url: '/baroboard/device/' + id,
                data: params,
                responseType: 'json'
            }).then(function (response) {
                console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.body.affectedRows > 0) {
                    console.log('수정 성공');

                    toastr.info('정상적으로 수정되었습니다.');

                    requestDeviceList(currentPage, 10);
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }


        /* BY START 2019-11-04
         *  사유: 디바이스 추가 및 수정시 디바이스 그룹 및 레이아웃 정보를 갖고오게 하기 위해서다.
         */

        // 옵션 정보 갖고오는 함수
        function requestDeviceOptionInfo(group_name,layout_name) {
            axios({
                method: 'get',
                url: '/baroboard/device_group',
                responseType: 'json'
            }).then((response) => {
                $('#deviceGroupInput').empty();
                if(mode =="add") {
                    $('#deviceGroupInput').append('<option value="" disabled selected >그룹을 선택해주세요.</option>');
                }
                response.data.output.body.forEach(function (item, index) {
                    addGroupOption(item, index,group_name);
                })
            }).catch(function (err) {
                console.error('Error -> ' + err);
                toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
            });

            axios({
                method: 'get',
                url: '/baroboard/layout',
                responseType: 'json'
            }).then((response) => {
                $('#deviceLayoutNameInput').empty();
                if(mode == "add") {
                    $('#deviceLayoutNameInput').append('<option value="" disabled selected>레이아웃을 선택해주세요.</option>');
                }
                
                response.data.output.body.forEach(function (item, index) {
                    addLayoutOption(item, index,layout_name);
                })
            }).catch(function (err) {
                console.error('Error -> ' + err);
                toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
            });
        }


        // axios 에서 받은 response를 그룹옵션에 넣어주는 함수
        function addGroupOption(item, intex,group_name) {
            // BY START 2019-12-10
            let option ;
            if (group_name == item.name) {
                option = '<option value=' + item.id + ' data-sub=' + item.name + ' selected>' + item.name + '</option>';
            }
            else {
                option = '<option value=' + item.id + ' data-sub=' + item.name + '>' + item.name + '</option>';
            }
            // BY END 2019-12-10
            $('#deviceGroupInput').append(option);
        }

        // axios 에서 받은 response를 Layout옵션에 넣어주는 함수
        function addLayoutOption(item, intex,layout_name) {
            // BY START 2019-12-10
            let option;
            if (layout_name == item.name) {
                option = '<option value=' + item.id + ' data-sub=' + item.name + ' data-sub2=' + item.mapping + ' selected>' + item.name + '</option>';
            }
            else {
                option = '<option value=' + item.id + ' data-sub=' + item.name + ' data-sub2=' + item.mapping + '>' + item.name + '</option>';
            }
            // BY END 2019-12-10
            $('#deviceLayoutNameInput').append(option);
        }
        // BY END 2019-11-04

        function requestDeviceRemove() {
            console.log('requestDeviceRemove 호출됨');

            axios({
                method: 'delete',
                url: '/baroboard/device/' + selected,
                responseType: 'json'
            }).then(function (response) {
                console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.body.affectedRows > 0) {
                    console.log('삭제 성공');

                    $('#toast-container').attr('class', 'md-toast-bottom-right');
                    toastr.info('정상적으로 삭제되었습니다.');

                    requestDeviceList(currentPage, 10);
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }


        function requestDeviceDataUpdate(id, data) {
            
            const params = {
                id: id,
                data: data
            }

            axios({
                method: 'post',
                url: '/baroboard/device/data/update',
                data: params,
                responseType: 'json'
            }).then(function (response) {
                console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.affectedRows > 0) {


                    toastr.info('정상적으로 수정되었습니다.');

                    requestDeviceList(currentPage, 10);
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
                toastr.info('수정 실패.');
            });
        }



        function requestDeviceDataApply() {
            console.log('requestDeviceDataApply 호출됨');

            const params = {
                id: selected
            }

            axios({
                method: 'post',
                url: '/baroboard/device/data/apply',
                data: params,
                responseType: 'json'
            }).then(async function (response) {
                // console.log('응답 -> ' + JSON.stringify(response));

                
                if(response.data.code == 200) {
                    toastr.info('정상적으로 요청되었습니다. (in data/apply')
                }
                else {
                    toastr.error('요청 실패 : '+ response.data.code);
                }
                    console.log(response.data);
                    let status_code = "0" ;
                    let status_message = "이미지 전송완료상태";
                                       

                // BY START 2019-12-16
                
                await UpdateStatus(status_code,status_message);
                  
                

            }).catch(async function (err) {
                console.error('Error -> ' + err);
                let status_code = 400
                let status_message = 'error'
                
                await UpdateStatus(status_code,status_message);
            });
        }

        function UpdateStatus(status_code,status_message ) {
            const statusParams= {

                    status:status_code,
                    id:selected,
                    status_message:status_message
                }
                axios({
                    method: 'post',
                    url: '/baroboard/device/status',
                    data: statusParams,
                    responseType: 'json'
                }).then(function (response) {
                    toastr.info('정상적으로 요청되었습니다. -상태확인을 위해 새로고침 필수');
                    console.log('단말 데이터 적용 요청 성공 ');

                    $('#toast-container').attr('class', 'md-toast-bottom-right');
                    requestDeviceList(currentPage, 10);
                })
        }

        function requestpreviewDataApply() {
            console.log('requestpreviewDataApply 호출됨');

            const params = {
                id: 'preview'
            }
            axios({
                method: 'post',
                url: '/baroboard/device/data/preview',
                data: params,
                responseType: 'json'
            }).then(function (response) {
                $("#previewModal").modal();
                $('#progresspreview1').show();
                $("#img_preview").attr("style","display:none");
                $("#img_preview").attr("src", '../index_img/preview.png');

                setTimeout(function () {
                    $('#progresspreview1').hide();
                    $("#img_preview").attr("style","display:block");
                },2500)
                
                
                

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }

        function requrestRemovePreviewDataApply() {
            
            axios({
                method: 'post',
                url: '/baroboard/device/data/preview2',
                responseType: 'json'
            }).then(function (response) {
                $("#img_preview").attr("src", null);
            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }


        function requestDeviceDataSelect(id) {
            console.log('requestDeviceDataSelect 호출됨 : ' + id);

            deviceId = id;

            const params = '?' + 'id=' + id;

            axios({
                method: 'get',
                url: '/baroboard/device/data/select' + params,
                responseType: 'json'
            }).then(async function (response) {
                
                console.log('응답 -> ' + JSON.stringify(response));
                console.log(response.data.output.length);
                // modalDataInput 대화상자에 데이터 입력상자 표시
                if (response.data.output.length > 0) {
                    
                    const curItem = response.data.output[0];
                    const layoutMappingText = Base64Decode(curItem.layout_mapping);
                    const layoutMapping = JSON.parse(layoutMappingText);
                    const layout_id = curItem.layout_id;
                    // BY START 2019-12-09
                    let deviceData = [];

                    if(curItem.device_data !=null ) {
                        const deviceDataText = Base64Decode(curItem.device_data);
                        deviceData = JSON.parse(deviceDataText);
                    }
                    // BY END 2019-12-09
                    
                    curLayoutMapping = layoutMapping;
                    

                    /*
                    MutationObserver = window.MutationObserver || window.WebKitMutationObserver;

                    var observer = new MutationObserver(function(mutations, observer) {
                        console.log('changed.');
                            
                        const nodes = $('#inputContainer').find('input');
                        console.log('child nodes : ' + nodes.length);
                        
                        nodes.each(() => {
                            $(this).trigger('click');
                        })

                    });
 
                    observer.observe(document, {
                        subtree: true,
                        childList: true
                    });
                    */

                    const curOutput = await makeDataInputLayout(layoutMapping, deviceData,layout_id);
                    $('#inputContainer').html(curOutput);
                    
                    nameWarningOptions4();


                }

            }).catch(function (err) {
                console.error('Error -> ' + err);

                toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
            });
        }


        // mapping example -> layout_mapping
        // {
        //    "item0": {
        //        "title": "환자명"
        //        "target": "text",
        //        "source": "data.patientName"
        //    }
        // }
        //

        // data example -> device_data
        // {
        //    "data": {
        //      "patientName": "홍길동"
        //    }
        // }
        async function imageArrayProcess() {
            console.log("imageArrayProcess 들어옴");
            let imageCategoryItems;
            await axios({
                method: 'post',
                url: '/baroboard/image/category/list',
                responseType: 'json'
            }).then(async function (response) {
                imageCategoryItems = response.data.output;
                for(let i = 0; i <imageCategoryItems.length; i ++) {
                    var array = imageCategoryItems[i].image.split(',');
                    imageCategoryItems[i].image=array;
                }
                console.log(imageCategoryItems);
            }).catch(async function (err) {
                console.error('Error -> ' + err);
                imageCategoryItems = null;
            });
            return imageCategoryItems;
        }

        // 데이터 입력상자를 위한 레이아웃 만들기
        async function makeDataInputLayout(layoutMapping, deviceData,layout_id) {
            console.log('makeDataInputLayout called.');
            var imageCategoryItems =  await imageArrayProcess();
            let output = '';
            output += '<form class="text-left" style="color:#757575; padding-left:4em; padding-right:4em;" action="#">';

            const mappingKeys = Object.keys(layoutMapping);
            console.log('count of mapping keys : ' + mappingKeys.length);
            var curValueArr = [];
            const sources = [];
            for (let i = 0; i < mappingKeys.length; i++) {
                const curKey = mappingKeys[i];
                const curObj = layoutMapping[curKey];  
                console.log('#' + i + ' ' + curKey + ' -> ' + JSON.stringify(curObj));

                // get value from deviceData
                let curValue = '';
                if (curObj['source']) {
                    console.log('source attribute found.');

                    // source가 중복된 경우에는 skip
                    // BY START 2019-11-19
                    // if (sources.indexOf(curObj['source']) > -1) {
                    //     if (curObj['operator']) {
                    //         console.log('source is duplicate -> skipping');
                    //         continue;
                    //     }
                    // } else {
                    //     sources.push(curObj['source']);
                    // }
                    sources.push(curObj['source']);
                    // BY END 2019-11-19

                    const dataAttr = curObj['source'];
                    const curAttrs = dataAttr.split('.');
                    curValue = deviceData;
                    for (let j = 0; j < curAttrs.length; j++) {
                        if (curValue[curAttrs[j]]) {
                            curValue = curValue[curAttrs[j]];
                        } else {
                            curValue = '';
                        }
                    }

                } else {
                    console.log('source attribute for data not found');
                }

                if (i % 2 == 0 || curObj.target =='src') {
                    output += '<div class="row" style="margin-top:2em;">';
                }
                // BY START 2019-11-19
                if (curObj.target =='src') {
                    //사진이 배열일 경우
                    if(curObj.operator.condition1=='array'){
                        
                        var order=curObj.operator.condition2;
                        try {
                            curValueArr = curValue.split(',');
                        } catch(err) {
                            
                        }   
            
                        let imageName;
                        console.log(curObj.title +" : "+ curValueArr[order])
                        for(let i = 0 ; i < imageCategoryItems.length; i ++) {
                            if(curObj.source.split('.')[1] == imageCategoryItems[i].name.toLowerCase()) {
                                 imageName = imageCategoryItems[i].image;
                            }
                           
                        }
                        // // 레이아웃별 이미지 선택 다르게
                        // if(curObj.source.split('.')[1] == 'CAUTIONS') {
                        //     if (layout_id == 'L20200108813485601') {
                                
                        //         if (imageCategoryItems[i].image.includes('v3_')) {
                        //             imageName = imageCategoryItems[i].image;
                        //         }
                        //     }
                        //     else if (layout_id == 'L202010261493377801'){
                        //         if (imageCategoryItems[i].image.includes('v4_')) {
                        //             imageName = imageCategoryItems[i].image;
                        //         }
                        //     }
                        // }
                        
                        
                        // BY START 2020-12-09 (사진없음 선택 가능케 하기)
                        if(!imageName.includes("undefined")) {
                            imageName.push("undefined");
                        }
                        // BY END 2020-12-09
                        output += '    <div class="col-sm-12" id="orgDiv_' + curKey + '">';
                        output += '      <label for="' + curKey + '">' + curObj.title + '</label>';
                        output += '      <div class="row" style="margin-left:2em;">';
                        
                        for(var j = 0 ; j < imageName.length; j ++) {
                            output += '    <div class="form-check form-check-inline" style="width:160px;">';
                            if(curValueArr[order] == imageName[j]) {
                                output+='    <input type="checkbox" name="'+curKey+'" id="'+ curKey +'_'+imageName[j]+ '" checked  onclick=imageOptions(this)  class="form-check-input" style="" >';
                            }else {
                                output+='    <input type="checkbox" name="'+curKey+'" id="'+ curKey +'_'+imageName[j]+ '"   onclick=imageOptions(this)  class="form-check-input" >';
                            }
                            if(imageName[j] == 'undefined') {
                                output += '  <label class="form-check-label" for="'+ curKey +'_'+imageName[j]+ '"> 사진 없음 </label>';
                            }
                            else {
                                output += '  <label class="form-check-label" for="'+ curKey +'_'+imageName[j]+ '">'+ imageName[j] +'</label>';
                            }
                                
                            output += '    </div>';
                        }
                        output += '        <input type="text" style="display:none" id="' + 'deviceInput_' + curKey + '" class="form-control" value="' + curValueArr[order] + '">';
                        output += '      </div>';      
                        output += '    </div>';
                    }
                    else {
                        
                    }
                }
                else if (curObj.source == 'data.nameWarning') {           
                    output += '    <br>';
                    output += '    <div class="col-sm-6">';
                    output += '        <label for="' + curKey + '">' + curObj.title + '</label>';
                    output += '      <div class="row" style="margin-left:2em;">';
                    output += '          <div class="form-check form-check-inline">';
                    output += '            <input type="checkbox" id="nameWarningOptions1"  onclick=nameWarningOptions()  class="form-check-input" value="Y">';
                    output += '            <label class="form-check-label" for="' + 'nameWarningOptions1">사용(Y)</label>';
                    output += '          </div>';
                    output += '          <div class="form-check form-check-inline">';
                    output += '            <input type="checkbox" id="nameWarningOptions2"  onclick=nameWarningOptions3() class="form-check-input" value="N">';
                    output += '            <label class="form-check-label" for="' + 'nameWarningOptions2">미사용(N)</label>';
                    output += '          </div>';
                    output += '      </div>';
                    output += '     <input  style="display:none;" type="text" id="' + 'deviceInput_' + curKey + '" class="form-control" value="' + curValue + '">';
                    output += '    </div>';
                    
                }
      
                else {
                    output += '    <div class="col-sm-6">';
                    output += '      <div>';
                    output += '        <label for="' + curKey + '">' + curObj.title + '</label>';                       
                    output += '        <input type="text" id="' + 'deviceInput_' + curKey + '" class="form-control" value="' + curValue + '">';
                    output += '      </div>';
                    output += '    </div>';
                }

                // BY END 2019-11-19
                // BY START 2019-12-09
                if (i % 2 == 1 || curObj.target =='src') {
                    output += '  </div>';
                }
                if( mappingKeys.length>1) {
                    if( i% 2 !=1 && curObj.target != 'src' && i !== mappingKeys.length-1 && layoutMapping[mappingKeys[i+1]].target =='src') {
                        output += '  </div>';
                    }
                }
                else if (mappingKeys.length ==1) {
                    output += '  </div>';
                }
                // BY END 2019-12-09
                console.log(i);
            }
            output += '</form>';

            return output;
        }
        
        

        function showDeviceAddPage() {
            mode = 'add';
            /* BY START 2019-11-04
             *  그룹 정보와 레이아웃 정보를 option으로 추가시키기 위해서다.
             */
            $('#deviceGroupInput').empty();
            $('#deviceLayoutNameInput').empty();
            $('#page2-2-1Title').text('단말 추가');
            $('#deviceNameInput').val('');
            // $('#deviceGroupInput').val('');
            $('#deviceTypeInput').val('');
            $('#deviceSizeInput').val('');
            // $('#deviceResolutionInput').val('');
            $('#deviceCodeInput').val('');
            $('#deviceRotationInput').val('');
            $('#deviceStatusCodeInput').val('');
            $('#deviceStatusMessageInput').val('');
            // $('#deviceLayoutIdInput').val('');
            // $('#deviceLayoutNameInput').val('');
            requestDeviceOptionInfo();
            showPage('page2-2-1');
        }
        // BY END 2019-11-04
        function searchDeviceItem() {
            search = $('#searchDeviceSelect').val();
            searchValue = $('#searchDeviceInput').val();
            console.log('search : ' + search + ', ' + searchValue);

            requestDeviceSearch(1, 10);
        }
        // BY START 2019-11-06
        function saveDeviceItem() {
            var deviceName = $('#deviceNameInput').val();
            var location = $('#deviceNameInput').val();
            var deviceGroupName = $('#deviceGroupInput').find("option:selected").data("sub");
            var deviceGroupId = $('#deviceGroupInput').val();
            var deviceType = $('#deviceTypeInput').val();
            var deviceSize = $('#deviceSizeInput').val();
            var deviceResolution= $('#deviceSizeInput').find("option:selected").data("sub"); 
            var deviceCode = $('#deviceCodeInput').val();
            var deviceRotation = $('#deviceRotationInput').val();
            var deviceLayoutId = $('#deviceLayoutNameInput').val();
            var deviceLayoutName = $('#deviceLayoutNameInput').find("option:selected").data("sub");
            var deviceLayoutData = null;
            var deviceLayoutMapping = $('#deviceLayoutNameInput').find("option:selected").data("sub2");
            if (deviceName.includes(condition) || location.includes(condition) || deviceGroupName.includes(condition) || deviceType.includes(condition) || deviceResolution.includes(condition) || deviceRotation.includes(condition) || deviceLayoutName.includes(condition)) {
                toastr.error('필수 항목들을 전부 입력해 주세요', { timeOut: 2000 });
            }
            else {
                if (mode == 'add') {
                    var create_author = sessionUser.name;
                    addDeviceInputItem(deviceName, location, deviceGroupName, deviceGroupId, deviceType, deviceSize, deviceResolution, deviceCode, deviceRotation, deviceLayoutId, deviceLayoutName, deviceLayoutData,deviceLayoutMapping, create_author);
                } else if (mode == 'modify') {
                    var modify_author = sessionUser.name;
                    modifyDeviceInputItem(deviceName, location, deviceGroupName, deviceGroupId, deviceType, deviceSize, deviceResolution, deviceCode, deviceRotation, deviceLayoutId, deviceLayoutName, deviceLayoutData ,deviceLayoutMapping ,  modify_author);
                }

                showPage('page2-2');
            }

        }
        // BY END 2019-11-06
        // BY START 2019-11-04
        function addDeviceInputItem(deviceName, location, deviceGroupName, deviceGroupId, deviceType, deviceSize, deviceResolution, deviceCode, deviceRotation, deviceLayoutId, deviceLayoutName, deviceLayoutData ,deviceLayoutMapping , create_author) {


            // device 상태코드 초기값 RESET
            // device 상태코드 가 100 일시 파랑색
            var deviceStatusCode = 'RESET';
            // device 상태메세지 초기값 update
            // device 상태메서지 상태코드가 100 일시 normal
            var deviceStatusMessage = 'RESET';
            var admin = sessionUser.id;
            // BY --> 베터리 정보 우선 100%로 해놓음.
            var battery = 'GOOD';

            /* BY START 2019-11-01
             *  사유: ID 를 sql params에 넣어줘야해서
             */
            var newId = 'M' + generateRequestCode2();
            //  BY END 2019-11-04
            requestDeviceAdd(newId, deviceCode, deviceName, deviceGroupId, deviceGroupName, deviceType, deviceSize, deviceResolution, location, deviceRotation, deviceStatusCode, deviceStatusMessage, battery, admin, deviceLayoutId, deviceLayoutName, deviceLayoutData ,deviceLayoutMapping , create_author);

        }
        // BY END 2019-11-04
        // 단말 리스트에 단말 아이템 추가
        function addDeviceItem(item, index) {
            

            var html = '<tr id="itemDevice' + item.id + '">'
                + '    <td class="text-left align-middle" style="width:4%;">'
                + '      <img src="/index_img/device_48.png" style="width:2em;">'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:10%;">'
                + '      <span id="itemDevice' + item.id + '_name">' + item.name + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:10%;">'
                + '      <span id="itemDevice' + item.id + '_group_name">' + item.group_name + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:3%;">'
                + '      <span id="itemDevice' + item.id + '_type">' + item.type + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:4%;">'
                + '      <span id="itemDevice' + item.id + '_size">' + item.size + '인치</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:9%;">'
                + '      <span id="itemDevice' + item.id + '_code">' + item.code + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:5%;">'
                + '      <span id="itemDevice' + item.id + '_rotation">' + item.rotation + '도 </span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:5%;">'
                + '      <span id="itemDevice' + item.id + '_status">' + item.status + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:10%;">'
                + '      <span id="itemDevice' + item.id + '_layout_name">' + item.layout_name + '</span>'
                + '    </td>'
                + '    <td class="text-center align-middle" style="width:15%;">'
                // BY START 2019-11-19 
                // + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" data-toggle="tooltip" data-placement="top" title="단말 데이터 JSON 입력" onclick="showDeviceData(\'' + item.id + '\', \'' + item.name + '\', \'' + item.group_name + '\', \'' + item.type + '\', \'' + item.size + '\', \'' + item.resolution + '\', \'' + item.status + '\', \'' + item.status_message + '\', \'' + item.data + '\')"><i class="fas fa-edit fa-lg blue-text"></i></button>'
                // BY END 2019-11-19
                + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" data-toggle="tooltip" data-placement="top" title="단말 데이터 입력" onclick="showDataInput(\'' + item.id + '\', \'' + item.name + '\')"><i class="fas fa-pen-alt fa-lg blue-text"></i></button>'
                + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" data-toggle="tooltip" data-placement="top" title="현재 이미지 보기" onclick="showDataImage(\'' + item.code + '\', \'' + item.rotation + '\')"><i class="fas fa-image fa-lg blue-text"></i></i></button>'
                + '    </td>'
                + '    <td class="text-center align-middle" style="width:25%;">'
                + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" data-toggle="tooltip" data-placement="top" title="아이템 수정하기" onclick="showDeviceModifyPage(\'' + item.id + '\', \'' + item.name + '\', \'' + item.group_name + '\', \'' + item.type + '\', \'' + item.size + '\', \'' + item.resolution + '\', \'' + item.code + '\', \'' + item.rotation + '\', \'' + item.status + '\', \'' + item.status_message + '\', \'' + item.layout_id + '\', \'' + item.layout_name + '\', \'' + item.data + '\')"><i class="fas fa-edit fa-lg cyan-text"></i></button>'
                + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" data-toggle="tooltip" data-placement="top" title="아이템 삭제하기" onclick="deleteDeviceItem(\'' + item.id + '\')"><i class="fas fa-trash fa-lg red-text"></i></button>'
                + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" data-toggle="tooltip" data-placement="top" title="단말에 배포하기" onclick="applyDeviceData(\'' + item.id + '\')"><i class="fas fa-external-link-alt fa-lg red-text"></i></button>'
                + '    </td>'
                + '</tr>';

            $('#tableDevice1').append(html);
        }
        function addDeviceStatus (s,p,t) {
            $('#success').text(s +' 개');
            $('#processing').text(p + ' 개');
            $('#timeout').text(t + ' 개');
            toastr.info('상태정보 조회 완료');
        }
        
        function showDeviceModifyPage(id, name, group_name, type, size, resolution, code, rotation, status, status_message,layoaut_id, layout_name) {
            console.log('showDeviceModifyPage 호출됨 : ' + id + ', ' + name + ', ' + group_name + ', ' + type + ', ' + size + ', ' + code + ', ' + rotation +',' + layout_name);

            mode = 'modify';
            selected = id;
            requestDeviceOptionInfo(group_name,layout_name);
            $('#page2-2-1Title').text('단말 수정');
            $('#deviceNameInput').val(name);
            $('#deviceGroupInput').val(group_name);
            $('#deviceTypeInput').val(type);
            $('#deviceSizeInput').val(size);
            $('#deviceResolutionInput').val(resolution);
            $('#deviceCodeInput').val(code);
            $('#deviceRotationInput').val(rotation);
            $('#deviceLayoutNameInput').val(layout_name);

            showPage('page2-2-1');

            $('#deviceNameInput').focus();
            $('#deviceGroupInput').focus();
            $('#deviceTypeInput').focus();
            $('#deviceSizeInput').focus();
            $('#deviceResolutionInput').focus();
            $('#deviceCodeInput').focus();
            $('#deviceRotationInput').focus();
            $('#deviceLayoutIdInput').focus();
            $('#deviceLayoutNameInput').focus();

        }


        let deviceId;
        let curLayoutMapping;

        function showDeviceData(id, name, group_name, type, size, resolution, status, status_message, data) {
            console.log('showDeviceData 호출됨');
            console.log('data -> ' + data);

            deviceId = id;

            if (data != 'undefined' && data.length > 4) {
                const decoded = Base64Decode(data);
                console.log('decoded -> ' + decoded);

                const contents = JSON.parse(decoded);

                jsonEditor2.set(contents);

                $("#deviceDataModal").modal();
            } else {
                console.log('device data is invalid.');

                const contents = {};
                jsonEditor2.set(contents);

                $("#deviceDataModal").modal();

            }
        }

        function saveDeviceData() {
            const json = jsonEditor2.get();
            const contents = JSON.stringify(json);
            const data = Base64Encode(contents);

            console.log('data -> ' + data);

            requestDeviceDataUpdate(deviceId, data);

        }


        // 단말에 대한 데이터 입력 폼 표시
        function showDataInput(id, name) {
            console.log('showDataInput 호출됨');

            $('#modalDataInputTitle').text('Data Input - ' + name);

            requestDeviceDataSelect(id);

            $('#modalDataInput').modal('show');

        }

        function saveDeviceDataInput() {
            console.log('saveDeviceDataInput called.');


            const mappingKeys = Object.keys(curLayoutMapping);
            console.log('count of mapping keys : ' + mappingKeys.length);
            let outObj = {};

            const sources = [];
            for (let i = 0; i < mappingKeys.length; i++) {
                const curKey = mappingKeys[i];
                const curObj = curLayoutMapping[curKey];
                console.log('#' + i + ' ' + curKey + ' -> ' + JSON.stringify(curObj));
                console.log($('#deviceInput_'+curKey).val());
            
            // BY START 2019 11-21
            

                //source가 중복된 경우에는 skip
                if (sources.indexOf(curObj['source']) > -1) {
                    if (curObj['operator']) {
                        console.log('source is duplicate -> skipping');
                        //continue;
                    }
                } else {
                    sources.push(curObj['source']);
                }
                
                // 데이터가 사진인지(array인지 1개만인지), text인지 구분
                let curInputValue;
                var imagName;
                // BY START 2019-11-21
                if(curObj.target=='src') {
                    
                    
                    
                    imageName = $('#deviceInput_' + curKey).val();
        
                    // 사진이 array일 때
                    
                    curInputValue = imageName;
                    
                }
                else if (curObj.target =='text') {
                    curInputValue = $('#deviceInput_' + curKey).val();
                }
                // BY START 2019-12-11
                else if ( curObj.target =='data-code') {
                    curInputValue = $('#deviceInput_' + curKey).val();
                    
                }
                else if (curObj.target == 'time') {
                    curInputValue = timeSet();
                    curInputValue = "["+curInputValue +"]"
                }
                // BY END 2019-12-11

                // BY END 2019-11-21
                // get source
                const curSource = curObj.source;
                const sourceArray = curSource.split('.');
                // BY START 2019-11-21
                let outObjRef = outObj;
                if( curInputValue =='undifined') {
                    curInputValue = '';
                }
                // BY END 2019-2019-11-21
                for (let j = 0; j < sourceArray.length; j++) {
                    
                    if (j == (sourceArray.length - 1)) { // last element
                        // BY START 2019-11-21
                        if(outObjRef[sourceArray[j]]) {
                            outObjRef[sourceArray[j]] += ','+curInputValue;
                        }
                        // BY END 2019-11-21
                        else {
                            outObjRef[sourceArray[j]] = curInputValue;
                        }
                                                
                    } else {
                        if (outObjRef[sourceArray[j]]) {

                        } else {
                            outObjRef[sourceArray[j]] = {};
                        }
                        outObjRef = outObjRef[sourceArray[j]];
                    }
                }  
            }

            console.log('output object -> ' + JSON.stringify(outObj));
            const contents = JSON.stringify(outObj);
            const data = Base64Encode(contents);

            console.log('data -> ' + data);

            requestDeviceDataUpdate(deviceId, data);
        }


        function deleteDeviceItem(id) {
            console.log('deleteDeviceItem 호출됨');

            selected = id;

            $('#modalDeviceConfirmDelete').modal('show');
        }

        function applyDeviceData(id) {
            console.log('applyDeviceData 호출됨');

            selected = id;

            $('#modalDeviceConfirmApply').modal('show');
        }


        function modifyDeviceInputItem(deviceName, location, deviceGroupName, deviceGroupId, deviceType, deviceSize, deviceResolution, deviceCode, deviceRotation, deviceLayoutId, deviceLayoutName, deviceLayoutData,deviceLayoutMapping, modify_author) {
            console.log('modifyDeviceInputItem 호출됨');
            var admin = sessionUser.id;
            // BY --> 베터리 정보 우선 100%로 해놓음.
            var battery = null;


            requestDeviceModify(selected, deviceCode, deviceName, deviceGroupId, deviceGroupName, deviceType, deviceSize, deviceResolution, location, deviceRotation, battery, admin, deviceLayoutId, deviceLayoutName, deviceLayoutData,deviceLayoutMapping, modify_author);

        }

        function deleteDeviceItem(id) {
            console.log('deleteDeviceItem 호출됨');

            selected = id;

            $('#modalDeviceDelete').modal('show');
        }

        // BY START 2019-12-16
        function showBatteryModal() {
            $('#modalBatteryUpdate').modal('show');
        }
        // BY END 2019-12-16


        // BY START 2019-12-17 legacy 사용 안함
        // function setESLSERVERIP (item) {
        //     axios({
        //         method:'get',
        //         url:'/baroboard/legacy',
        //         responseType: 'json'                
        //     }).then(function (response) {
        //         eslServerIp = response.data.output.body[0].ip;
        //         requestBatteryUpdate();

        //     }).catch(function (err) {
        //         console.error('Error -> ' + err);

                
        //     });
            
            
        // }
        // BY END 2019-12-17

        // BY START 2019-12-16
        function requestBatteryUpdate() {
            
            

            axios({
                method: 'get',
                url:  eslServerIp+'/labels/battery?stationCode=DEFAULT_STATION_CODE&status=GOOD',
                responseType: 'json'
            }).then(function (response) {
                
                let goodDevice = '';
                response.data.forEach(function (item, index) {
                    
                    if( index == 0 ) {
                        if( response.data.length == 1) {
                            goodDevice += item.labelCode;
                        }
                        else {
                            goodDevice += item.labelCode +"'";
                        }
                    }
                    else if (index == response.data.length) {
                        goodDevice += "'"+item.labelCode; 
                    }
                    else {
                        goodDevice += ",'" + item.labelCode +"'";
                    }
                })
                params={device:goodDevice};
                console.log(params);
                axios({
                    method: 'post',
                    url: '/baroboard/device/goodbattery', 
                    data:params,
                    responseType: 'json'
                }).then(function (response) {
                  console.log('goodBatteryUpdate Success');
                }).catch(function (err) {

                    console.error('goodBatterysError -> ' + err);
                    console.log(err.response.status);

                    toastr.error('배터리 정보 업데이트를 실패했습니다. 관리자에게 문의하세요' + err, { timeOut: 3000 });
                });
                
                
                axios({
                    method: 'get',
                    url:  eslServerIp+'/labels/battery?stationCode=DEFAULT_STATION_CODE&status=BAD',
                    responseType: 'json'
                }).then(function (response) {
                    console.log('응답 -> ' + JSON.stringify(response));
                    let badDevice = '';
                    if(response.data) {
                        response.data.forEach(function (item, index) {
                            if( index == 0 ) {
                                if( response.data.length == 1) {
                                    badDEvice += item.labelCode;
                                }
                                else {
                                    badDevice += item.labelCode +"'";
                                }
                            }
                            else if (index == response.data.length) {
                                badDevice += "'"+item.labelCode; 
                            }
                            else {
                                badDevice += ",'" + item.labelCode +"'";
                            }
                        })
                        params={device:badDevice};
                        axios({
                            method: 'post',
                            url: '/baroboard/device/badbattery/',
                            data:params,
                            responseType: 'json'
                        }).then(function (response) {
                        console.log('badBatteryUpdate Success');
                        toastr.info('배터리 정보 업데이트를 완료했습니다' , { timeOut: 2000 });
                        }).catch(function (err) {

                            console.error('badBatterysError -> ' + err);

                            toastr.error('배터리 정보 업데이트를 실패했습니다. 관리자에게 문의하세요' + err, { timeOut: 3000 });
                        });
                    }
                    else {
                        toastr.info('배터리 정보 업데이트를 완료했습니다' , { timeOut: 2000 });
                    }
            
                }).catch(function (err) {

                    console.error('Error -> ' + err);

                    toastr.error('배터리 정보 업데이트를 실패했습니다. 관리자에게 문의하세요' + err, { timeOut: 3000 });
                });
                $('#modalBatteryUpdate').hide();
            })
          
        }
        // BY END 2019-12-16



        //===== Dashboard =====//


        function requestDashboardList(page, perPage) {
            console.log('requestDashboardList 호출됨 : ' + page + ', ' + perPage);

            requestDashboardSearch(page, perPage);
        }

        function requestDashboardSearch(page, perPage) {
            console.log('requestDashboardSearch 호출됨');

            var params = '?page=' + page
                + '&perPage=' + perPage;

            if (searchValue) {
                params += '&search=' + search;
                params += '&searchValue=' + searchValue;
            }

            // show progressbar
            // $('#progressDevice1').show();

            axios({
                method: 'get',
                url: '/baroboard/device/dashboard/list' + params,
                responseType: 'json'
            }).then(function (response) {
                // hide progressbar
                // $('#progressDevice1').hide();

                // 대시��드에서 헤더 아이템만 빼고 모두 삭제
                var dashboardDevice1 = document.getElementById('dashboardDevice1');
                var firstElementChild = dashboardDevice1.firstElementChild;
                dashboardDevice1.innerHTML = '';
                dashboardDevice1.append(firstElementChild);

                // 대시보드에 응답 결과 추가
                let itemCount = 0;
                let outHtml = '';

                let totalCount = 0;
                let totalNormal = 0;
                let totalAlert = 0;

                for (let i = 0; i < response.data.output.body.length; i++) {
                    const item = response.data.output.body[i];
                    // 4개마다 한 줄 표시
                    if (i % 4 == 0) {
                        outHtml += '<div class="row" style="margin-top:1em;">';
                        console.log('a row start');

                        itemCount = 0;
                    } else {
                        itemCount += 1;
                    }

                    outHtml += addDashboardItem(item, i);

                    if (itemCount == 3) {
                        outHtml += '</div>';
                        console.log('a row end');
                    }

                    if (item.count_total) {
                        totalCount += item.count_total;
                    }
                    if (item.count_normal) {
                        totalNormal += item.count_normal;
                    }
                    if (item.count_alert) {
                        totalAlert += item.count_alert;
                    }

                }

                if (itemCount < 3) {
                    outHtml += '</div>';
                    console.log('a row end');
                }

                //console.log('OUT HTML -> ' + outHtml);
                $('#dashboardDevice1').append(outHtml);


                // 총 갯수 표시
                $('#totalCount1').text('Total : ' + totalCount);
                $('#totalNormal1').text('Normal : ' + totalNormal);
                $('#totalAlert1').text('Alert : ' + totalAlert);

            }).catch(function (err) {
                // hide progressbar
                // $('#progressDevice1').hide();

                console.error('Error -> ' + err);

                toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
            });
        }


        function addDashboardItem(item, index) {
            console.log('addDashboardItem 호출됨 : ' + item.group_id + ', ' + item.group_name
                + ', ' + item.count_total + ', ' + item.count_normal + ', ' + item.count_alert
                + ', ' + item.health_percentage);

            let html = '';

            let curColor = 'primary-color';
            if (item.count_alert > 0) {
                curColor = 'red';
            }
            

            html += '  <div class="col-xl-3 col-md-3 col-sm-4 mb-4" id="groupDashboard"' + index + '>'
                + '    <div class="card">'
                + '      <div class="card-header white-text ' + curColor + ' accent-2">'
                + '        ' + item.group_name
                + '      </div>'
                + '      <div class="card-body">'
                + '        <a class="text-info">'
                + '          <h6 class="py-1 mt-3 font-weight-500"><i class="fas fa-laptop mr-2"></i>Normal: <span>' + item.count_normal + '</span></h6>'
                + '        </a>'
                + '        <a class="text-danger">'
                + '          <h6 class="py-1 mt-3 font-weight-500"><i class="fas fa-laptop mr-2"></i>Alert: <span>' + item.count_alert + '</span></h6>'
                + '        </a>'
                + '        <div class="progress">'
                + '          <div class="progress-bar blue" role="progressbar" style="width: ' + item.health_percentage + '%" aria-valuenow="' + item.health_percentage + '" aria-valuemin="0" aria-valuemax="100"></div>'
                + '        </div>'
                + '        <p class="font-small grey-text">Device health (' + item.health_percentage + '%)</p>'
                + '        <button type="button" class="btn btn-outline-primary btn-rounded btn-sm px-2 float-right" onclick="showPage(\'page2-1-1\'); curDashboardGroupId=\'' + item.group_id + '\'; curDashboardGroupName=\'' + item.group_name + '\'; requestDashboardSubList(\'' + item.group_id + '\', \'' + item.group_name + '\')">상세보기</button>'
                + '      </div>'
                + '    </div>'
                + '  </div>';

            return html;
        }


        function requestDashboardSubList(groupId, groupName) {
            console.log('requestDashboardSubList 호출됨 : ' + groupId + ', ' + groupName);

            var params = '?groupId=' + groupId;

            // show progressbar
            // $('#progressDevice1').show();

            axios({
                method: 'get',
                url: '/baroboard/device/dashboard/sublist' + params,
                responseType: 'json'
            }).then(function (response) {
                // hide progressbar
                // $('#progressDevice1').hide();

                console.log('응답 -> ' + JSON.stringify(response));

                // 대시보드에서 헤더 아이템만 빼고 모두 삭제
                var dashboardDevice2 = document.getElementById('dashboardDevice2');
                var firstElementChild = dashboardDevice2.firstElementChild;
                dashboardDevice2.innerHTML = '';
                dashboardDevice2.append(firstElementChild);

                // 상단 제목 표시줄에 그룹명 대체
                $('#dashboardDevice2Group').text(groupName);

                // 대시보드에 응답 결과 추가
                let itemCount = 0;
                let outHtml = '';

                let totalCount = 0;
                let totalNormal = 0;
                let totalAlert = 0;

                for (let i = 0; i < response.data.output.body.length; i++) {
                    const item = response.data.output.body[i];

                    // 6개마다 한 줄 표시
                    if (i % 6 == 0) {
                        outHtml += '<div class="row" style="margin-top:1em;">';
                        console.log('a row start');

                        itemCount = 0;
                    } else {
                        itemCount += 1;
                    }

                    outHtml += addDashboardSubItem(item, i);

                    if (itemCount == 5) {
                        outHtml += '</div>';
                        console.log('a row end');
                    }
                    totalCount += 1;
                    if (item.status == 'SUCCESS') {
                        totalNormal += 1;
                    } else {
                        totalAlert += 1;
                    }

                }

                if (itemCount < 5) {
                    outHtml += '</div>';
                    console.log('a row end');
                }

                //console.log('OUT HTML -> ' + outHtml);
                $('#dashboardDevice2').append(outHtml);

                // 총 갯수 표시
                $('#totalCount2').text('Total : ' + totalCount);
                $('#totalNormal2').text('Normal : ' + totalNormal);
                $('#totalAlert2').text('Alert : ' + totalAlert);


            }).catch(function (err) {
                // hide progressbar
                // $('#progressDevice1').hide();

                console.error('Error -> ' + err);

                toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
            });
        }


        function addDashboardSubItem(item, index) {
            console.log('addDashboardSubItem 호출됨');
            

            let html = '';

            let curColor = 'primary-color';
            let curAnimStyle = 'fa-spin fa-md';
            if (item.status != 'SUCCESS') {
                curColor = 'red accent-2';
                curAnimStyle = 'animated heartBeat infinite';
            }
            let borderColor = 'white';
            let batteryIcon = 'full';
            if(item.battery !='GOOD') {
                borderColor = 'red';
                batteryIcon = 'quarter';
                curAnimStyle = 'animated heartBeat infinite';
            }

            // data 필드가 있으면 디코딩하여 환자정보 확인
            let patientName = '';
            if (item.data) {
                const dataText = Base64Decode(item.data);
                console.log('current data -> ' + dataText);

                const dataObj = JSON.parse(dataText);
                if (dataObj.data) {
                    if (dataObj.data.name) {
                        patientName = dataObj.data.name;
                    }
                }
            }

            // 데이터 업데이트 시간을 경과시간으로 변환
            const dataDateBefore = getTimeBefore(new Date(item.data_date));
            console.log('경과시간 : ' + dataDateBefore);

            html += '  <div class="col-sm-2 mb-xl-0 mb-4">'
                + '    <div class="card classic-admin-card ' + curColor + '" style="border:1px solid '+borderColor+'">'
                + '      <div class="card-body">'
                + '        <div class="pull-right">'
                + '          <h6 class="check"><i class="fas fa-cog ' + curAnimStyle + '" style="margin-right:1rem;"></i>' + item.location + '</h6>'
                + '        </div>'
                + '        <p class="white-text"><span style="margin-right:1rem;">' + item.size + '\'</span><span>' + item.resolution + '</span></p>'
                + '        <h6 class="check" style="margin-top:0.5rem; height:19.5px;">' + patientName + '</h6>'
                + '        <div class="row">'
                + '          <div class="col-8">'
                + '            <p><span style="float:left">' + dataDateBefore + '</span></p>'        
                + '          </div>'
                + '          <div class="row col-4 ">'
                + '              <i class="fas fa-battery-'+batteryIcon+'"  style="float:left; margin-right:10px "></i>'    
                + '              <p><span style="float:right">' + item.battery + '</span></p>'
                + '          </div>'
                + '        </div>'
                + '      </div>'
                + '    </div>'
                + '  </div>';

            return html;
        }


        //===== Layout Builder =====//

        let layoutId;
        let layoutMode;

        function showLayoutBuilderPage() {
            showPage('page1-2');
            // set layout mode
            layoutMode = 'add';
            

            $('#layoutId').val('');
            $('#layoutName').val('');
            $('#layoutDetails').val('');

            $('#layoutName').textbox('setValue', '');
            $('#layoutDetails').textbox('setValue', '');

            $('#device-size').combobox('setValue', '11.6');
            changeDeviceSize();

            
            // remove all children
            const dropzone1 = document.getElementById('dropzone1');
            console.log('count of existing child nodes : ' + dropzone1.childElementCount);
            while (dropzone1.childElementCount > 0) {
                console.log('removing child.');
                dropzone1.firstElementChild.remove();
                
            }

            // remove all ComponentTree children
            // BY START 2019-12-02

            var roots = $('#componentTree1').tree('getRoots');
            var roots_length = $('#componentTree1').tree('getRoots').length;
           
            for(var i = 0; i <roots_length ; i++ ) {
                $('#componentTree1').tree('remove',roots[0].target);
            } 
            // BY END 2019-12-02

            
        }



        function showLayoutBuilder(id, name, resolution, details, data,mapping) {
            console.log('showLayoutBuilder 호출됨');
            showPage('page1-2');
            // set layout mode
            layoutMode = 'modify';

            // remove all ComponentTree children
            // BY 2019-12-02

            var roots = $('#componentTree1').tree('getRoots');
            var roots_length = $('#componentTree1').tree('getRoots').length;
           
            for(var i = 0; i <roots_length ; i++ ) {
                $('#componentTree1').tree('remove',roots[0].target);
            } 
            // BY END 2019-12-02



            // set layoutName and layoutDetails
            $('#layoutId').val(id);
            $('#layoutName').val(name);
            $('#layoutDetails').val(details);

            $('#layoutName').textbox('setValue', name);
            $('#layoutDetails').textbox('setValue', details);

            if (resolution == '960X640') {

                $('#device-size').combobox('setValue', '11.6');
                $('#dropzone1').attr('style','width:960px;height:800px')

            } else if (resolution == '800x480') {

                $('#device-size').combobox('setValue', '7.5');
                $('#dropzone1').attr('style','width:800px;height:480px')

            } else if (resolution == '600X448') {

                $('#device-size').combobox('setValue', '6.0');
                $('#dropzone1').attr('style','width:600px;height:448px')

            }
            // BY START 2019-11-25
            if(data.length>5) {
               
                
                const contents = Base64Decode(data);
                if(mapping){
                    modifyLayoutMappingItem = Base64Decode(mapping);
                    modifyLayoutMappingItem = JSON.parse(modifyLayoutMappingItem);
                }

                parseContents(contents);
            }
            else{
                
                while (dropzone1.childElementCount > 0) {
                   
                    dropzone1.firstElementChild.remove();
                }
            }
            // BY EMD 2019-11-25
        }

        function buildLayoutMapping(data) {
            const decoded = Base64Decode(data);
            const contents = JSON.parse(decoded)
            return contents;
        }

        function showLayoutMapping(id, name, resolution, details, data, mapping) {
            console.log('showLayoutMapping 호출됨');
            console.log('mapping -> ' + mapping);

            layoutId = id;

            if (mapping != 'undefined' && mapping.length > 4) {
                const decoded = Base64Decode(mapping);
                console.log('decoded -> ' + decoded);

                //let replaced = decoded.replaceAll('\\"', '\"');
                //replaced = replaced.substr(1, replaced.length-2);
                //console.log('replaced -> ' + replaced);

                const contents = JSON.parse(decoded);

                jsonEditor.set(contents);

                $("#mappingModal").modal();
            } else {
                console.log('mapping data is invalid.');

                const contents = {};
                jsonEditor.set(contents);

                $("#mappingModal").modal();

            }
        }

        function saveLayoutMapping() {
            const json = jsonEditor.get();
            const contents = JSON.stringify(json);
            const mapping = Base64Encode(contents);

            console.log('mapping -> ' + mapping);

            requestLayoutMappingUpdate(layoutId, mapping);

        }

        //===== Layout Editor =====//

        function changeDeviceSize() {
            var deviceSizeSelect = document.getElementById("device-size");
            var selectValue = deviceSizeSelect.options[deviceSizeSelect.selectedIndex].value;
            console.log('selected value : ' + selectValue);

            if (selectValue == '11.6') {
                $('#dropzone1').width('960px');
                $('#dropzone1').height('640px');

                $('#dropzone1').css({ 'width': '960px' });
                $('#dropzone1').css({ 'height': '640px' });
            } else if (selectValue == '7.5') {
                $('#dropzone1').width('800px');
                $('#dropzone1').height('480px');

                $('#dropzone1').css({ 'width': '800px' });
                $('#dropzone1').css({ 'height': '480px' });
            } else if (selectValue == '6.0') {
                $('#dropzone1').width('600px');
                $('#dropzone1').height('448px');

                $('#dropzone1').css({ 'width': '600px' });
                $('#dropzone1').css({ 'height': '448px' });
            }

        }

        // ViewItem 삭제시 component Tree target도 같이 삭제되게 수정
        // BY START 2019-12-02
        function removeSelected() {
            console.log('removeSelected called.');
            var roots = $('#componentTree1').tree('getRoots');
            
            for (let i = 0; i < selectedItem.length; i++) {
                
                let removeItems = selectedItem[i].id;
                selectedItem[i].remove();
                for(let j =0 ;  j< roots.length; j ++) {
                    if (selectedItem[i].id == roots[j].id) {
                        $('#componentTree1').tree('remove',roots[j].target);
                    }
                }
                    
            }
        }
        // BY END 2019-12-02

        function unselectAll() {
            setSelected(null);
        }

        function zindexUp() {
            console.log('zindexUp called');

            if (selectedItem.length > 0) {
                for (let i = 0; i < selectedItem.length; i++) {
                    if (selectedItem[i].style.zIndex) {
                        selectedItem[i].style.zIndex = Number(selectedItem[i].style.zIndex) + 1;
                    } else {
                        selectedItem[i].style.zIndex = 3;
                    }
                    console.log('#' + i + ' -> ' + selectedItem[i].style.zIndex);
                }
            }
        }

        function zindexDown() {
            console.log('zindexDown called');

            if (selectedItem.length > 0) {
                for (let i = 0; i < selectedItem.length; i++) {
                    if (selectedItem[i].style.zIndex) {
                        selectedItem[i].style.zIndex = Number(selectedItem[i].style.zIndex) - 1;
                    } else {
                        selectedItem[i].style.zIndex = 2;
                    }
                    console.log('#' + i + ' -> ' + selectedItem[i].style.zIndex);
                }
            }
        }
    
    /* BY START 2019-12-11
     *  원인을 알 수 없는 오류가 빈번히 발생해 새로운 로직으로 대체
     */
        // function convertToImage() {
        //     console.log('convertToImage called.');

        //     setSelected(null);

        //     var dropzone1 = document.getElementById('dropzone1');
        //     console.log('dropzone1이 선언됨');

        //     // move to 0,0
        //     const oldTop = $('#dropzone1').offset().top;
        //     const oldLeft = $('#dropzone1').offset().left;
        //     console.log('dropzone1 : ' + oldLeft + ', ' + oldTop);
        //     for (let i = 0; i < dropzone1.childElementCount; i++) {
        //         const elemY = parseInt(dropzone1.childNodes[i].getAttribute('data-y')) - oldTop;
        //         const elemX = parseInt(dropzone1.childNodes[i].getAttribute('data-x')) - oldLeft;
        //         // console.log('elem x, y : ' + elemX + ', ' + elemY);

        //         dropzone1.childNodes[i].style.webkitTransform = dropzone1.childNodes[i].style.transform =
        //             'translate(' + elemX + 'px,' + elemY + 'px)'

        //         dropzone1.childNodes[i].setAttribute('data-y', elemY);
        //         console.log('data-y입니다 : '+ elemY);
        //         dropzone1.childNodes[i].setAttribute('data-x', elemX);

        //     }

        //     domtoimage.toPng(dropzone1)
        //         .then(function (dataUrl) {
        //             var img = new Image();
        //             img.src = dataUrl;
        //             console.log(dataUrl);
        //             console.log("dontoImage.toPng 실행됨");
        //             const imgContainer = document.getElementById('img-container');
        //             while (imgContainer.hasChildNodes()) {
        //                 imgContainer.removeChild(imgContainer.firstChild);
        //             }
        //             imgContainer.appendChild(img);
        //             // move to old coord
        //             for (let i = 0; i < dropzone1.childElementCount; i++) {
        //                 const elemY = parseInt(dropzone1.childNodes[i].getAttribute('data-y')) + oldTop;
        //                 const elemX = parseInt(dropzone1.childNodes[i].getAttribute('data-x')) + oldLeft;
        //                 // console.log('elem x, y : ' + elemX + ', ' + elemY);

        //                 dropzone1.childNodes[i].style.webkitTransform = dropzone1.childNodes[i].style.transform =
        //                     'translate(' + elemX + 'px,' + elemY + 'px)'

        //                 dropzone1.childNodes[i].setAttribute('data-y', elemY);
        //                 console.log('data-y입니다 : '+ elemY);
        //                 dropzone1.childNodes[i].setAttribute('data-x', elemX);
        //             }

        //             $("#previewModal").modal();
        //         })
        //         .catch(function (error) {
        //             // move to old coord
        //             for (let i = 0; i < dropzone1.childElementCount; i++) {
        //                 const elemY = parseInt(dropzone1.childNodes[i].getAttribute('data-y')) + oldTop;
        //                 const elemX = parseInt(dropzone1.childNodes[i].getAttribute('data-x')) + oldLeft;
        //                 // console.log('elem x, y : ' + elemX + ', ' + elemY);

        //                 dropzone1.childNodes[i].style.webkitTransform = dropzone1.childNodes[i].style.transform =
        //                     'translate(' + elemX + 'px,' + elemY + 'px)'

        //                 dropzone1.childNodes[i].setAttribute('data-y', elemY);
        //                 console.log('data-y입니다 : '+ elemY);
        //                 dropzone1.childNodes[i].setAttribute('data-x', elemX);
        //             }

        //             console.error('Error occurred in converting to image', error);
        //         });
        // }
    // BY END 2019-12-11

    // BY START 2019-12-11
        function convertToImage() {
            console.log('previewConverToImage called.');

            
            const layoutName = 'preview';
            let views = makeContents();
            let contents = JSON.stringify(views);
            let data = Base64Encode(contents);            
            let mapping;
                
            const deviceSize = $('#device-size').val();
            let layoutResolution;
            if (deviceSize == '11.6') {
                layoutResolution = '960X640';
            } else if (deviceSize == '7.5') {
                layoutResolution = '800X480';
            } else if (deviceSize == '6.0') {
                layoutResolution = '600X448';
            }
            const layoutId = 'preview';
            const layoutDetails = 'previewImage'
            var create_author = sessionUser.name;
            requestPreviewLayoutAdd(layoutName, layoutResolution, layoutDetails, layoutId, create_author, data,mapping);
            
        }
    // BY END 2019-12-11

        function Base64Encode(str, encoding = 'utf-8') {
            var bytes = new (TextEncoder || TextEncoderLite)(encoding).encode(str);
            return base64js.fromByteArray(bytes);
        }

        function Base64Decode(str, encoding = 'utf-8') {
            var bytes = base64js.toByteArray(str);
            return new (TextDecoder || TextDecoderLite)(encoding).decode(bytes);
        }
        
        function saveToDB(lastPage) {
            console.log('saveToDB called.');

            // BY START 2019-11-06
            const layoutName = $('#layoutName').val();
            const layoutDetails = $('#layoutDetails').val();
            if (layoutName.includes(condition) || layoutDetails.includes(condition)) {
                toastr.error('필수 항목들을 전부 입력해 주세요', { timeOut: 2000 });
            }
            else {
                let views = makeContents();
                let contents = JSON.stringify(views);
                let data = Base64Encode(contents);
                // BY START 2019-12-03
                let mappingItem;
                let mapping;
                let mapping2;

                var newJsonData = {};
                for (var i=0; i<views.length ; i++) {
                    var jsonItem = {};
                    

                    
                        if( views[i].properties[1].value === 'true'){
                            
                            if(views[i].widgetType =='ImageView') {
                                jsonItem.target = 'src'
                                jsonItem.title="이미지";
                                jsonItem.source = "data.images"
                            }
                            // BY START 2019-12-11
                            else if (views[i].widgetType == 'QRView') {
                                jsonItem.target = 'data-code'
                                jsonItem.title="QR코드";
                                jsonItem.source = "data.qr1"   
                            }
                            // BY END 2019-12-11
                            else {
                                jsonItem.target = 'text'
                                jsonItem.title="(환자명)형식";
                                jsonItem.source = "data.name"
                            }
                            
                            

                            // ImageView일 경우 operator 추가
                            if(jsonItem.target == 'src') {
                                jsonItem.operator= {"name":"switch","condition1":"array","condition2":"(0) 형식"}
                            }

                            // BY START 2019-12-10
                            // QRView 일 경우 data-code 추가

                            var jsonName = views[i].properties[0].value;
                            newJsonData[jsonName]= jsonItem;
                        }
                        
                    

                    
                   
                    
                    //수정모드에서 새로운 View 객체가 만들어졌을때

                    if(layoutMode =='modify') {
                        if(views[i].properties[1].value =='true') {
                            console.log(modifyLayoutMappingItem);
                            if (modifyLayoutMappingItem) {
                                var jsonKey = Object.keys(modifyLayoutMappingItem);
                                if(!jsonKey.includes(jsonName)) {
                                    modifyLayoutMappingItem[jsonName] = jsonItem;
                                    var mappingItem2 = JSON.stringify(modifyLayoutMappingItem);
                                    mapping2 = Base64Encode(mappingItem2);
                                }
                            }
                
                            
                        }
                        
                        
                    }
                }
                
                if(layoutMode =='add'){
                    mappingItem = JSON.stringify(newJsonData);
                    mapping = Base64Encode(mappingItem);
                }
                
            
                            
                // BY END 2019-12-03

                const deviceSize = $('#device-size').val();
                let layoutResolution;
                if (deviceSize == '11.6') {
                    layoutResolution = '960X640';
                } else if (deviceSize == '7.5') {
                    layoutResolution = '800X480';
                } else if (deviceSize == '6.0') {
                    layoutResolution = '600X448';
                }
                

                if (layoutMode == 'add') {
                    const layoutId = 'L' + generateRequestCode();
                    var create_author = sessionUser.name;
                    requestLayoutAdd(layoutName, layoutResolution, layoutDetails, layoutId, create_author, data,mapping);
                    location.hash = '#ll';
                    showPage(lastPage);
                } 
                else if (layoutMode == 'modify') {
                    
                    const layoutId = $('#layoutId').val();
                    var modify_author = sessionUser.name;
                    requestLayoutModify(layoutId, layoutName, layoutResolution, layoutDetails, modify_author, data,mapping2);
                    showPage(lastPage);
                } 
                else {
                    console.log('Unknown layoutMode : ' + layoutMode);
                }
                //BY END 2019-11-06
            }
        }

        //===== RequestCode =====//

        var seqCode = 0;

        /*
         * Generate request code (using time and sequence)
         */
        function generateRequestCode() {
            var date = new Date();

            var seqCodeStr = getSeqCode();

            var components = [
                date.getFullYear(),
                ("0" + (date.getMonth() + 1)).slice(-2),
                // BY START 2019-11-01
                ("0" + (date.getDate())).slice(-2),
                //  BY END 2019-11-01
                date.getHours(),
                date.getMinutes(),
                date.getSeconds(),
                date.getMilliseconds(),
                seqCodeStr
            ];

            var curCode = components.join("");
            return curCode;
        }
        /*
         * BY START 2019-11-01
         * Generate request code (usung time)
         * ID 만드는 규칙 몰라 일단은 M+12자리숫자만 등록
         */

        function generateRequestCode2() {
            var date = new Date();

            var seqCodeStr = getSeqCode();

            var components = [
                date.getFullYear(),
                ("0" + (date.getMonth() + 1)).slice(-2),
                ("0" + (date.getDate())).slice(-2),
                date.getHours(),
                date.getMinutes(),
                date.getSeconds(),
                date.getMilliseconds(),
                seqCodeStr
            ];

            var curCode = components.join("");
            return curCode;
        }
        // BY END2019-11-01

        /*
         * Get sequence code (01 ~ 99)
         */
        function getSeqCode() {
            seqCode += 1;
            if (seqCode > 99) {
                seqCode = 0;
            }
            var seqCodeStr = String(seqCode);
            if (seqCodeStr.length == 1) {
                seqCodeStr = '0' + seqCodeStr;
            }

            return seqCodeStr;
        }

        //=======================//


        function saveToFile() {
            let views = makeContents();
            let viewsStr = JSON.stringify(views);
            let contents = Base64Encode(viewsStr);
            let filename = 'output1.json';

            const a = document.createElement("a");
            const file = new Blob([contents], { type: 'text/plain' });
            a.href = URL.createObjectURL(file);
            a.download = filename;
            a.click();

        }

        function makeContents() {
            const viewInfo = [];
            const dropzone1 = document.getElementById('dropzone1');
            for (let i = 0; i < dropzone1.childNodes.length; i++) {
                const target = dropzone1.childNodes[i];

                const widgetType = target.getAttribute('widget-type');
                const targetPropertyData = makePropertyData(target, true);

                viewInfo.push({
                    widgetType: widgetType,
                    properties: targetPropertyData
                });
            }

            return viewInfo;
        }

        function loadFromFile() {
            var input = document.getElementById('myFile');

            if (input.files && input.files[0]) {
                var myFile = input.files[0];
                var reader = new FileReader();

                reader.addEventListener('load', function (e) {
                    const contents = e.target.result;

                    parseContents(contents);
                })
                reader.readAsText(myFile, 'utf8');
            }

        }

        function parseContents(contents) {
            const dropzone1 = document.getElementById('dropzone1');

            

            // remove all children
            console.log('count of existing child nodes : ' + dropzone1.childElementCount);
            while (dropzone1.childElementCount > 0) {
                console.log('removing child.');
                dropzone1.firstElementChild.remove();
            }

            
            const viewInfo = JSON.parse(contents);
            console.log('view count : ' + viewInfo.length);


            
            // make a clone object
            for (let i = 0; i < viewInfo.length; i++) {
                const curViewInfo = viewInfo[i];
                let view = makeView(i, curViewInfo);

                // apply property
                for (let j = 0; j < curViewInfo.properties.length; j++) {
                    if (curViewInfo.properties[j].value) {
                        view = applyPropertyChange(view, curViewInfo.properties[j], true);
                    }
                }

                // set translate attribute
                
                // BY START 2019-12-10
                let curY =0;
                if (view.getAttribute('widget-type') !== 'TextView') {
                    if( view.getAttribute('widget-type') == 'QRView') {
                        curY = parseFloat(view.getAttribute('data-y')) +63;
                    }
                    else {
                        curY = parseFloat(view.getAttribute('data-y')) +65;
                    }
                    view.setAttribute('data-y',curY);
                    
                }else {
                    curY= view.getAttribute('data-y');
                }
                // BY END 2019-12-10
                 
                const curX = view.getAttribute('data-x');
                console.log('translate x, y -> ' + curX + ', ' + curY);
                view.style.webkitTransform = view.style.transform =
                    'translate(' + curX + 'px,' + curY + 'px)'


                // append child to dropzone1
                dropzone1.appendChild(view);

                // append child to componentTree

                var nodes = [
                    {
                        "id": view.getAttribute('id'),
                        "text": view.getAttribute('id') + ' (' + view.getAttribute('widget-type') + ')'
                    }
                ];

                $('#componentTree1').tree('append', {
                    parent: componentTree1.target,
                    data: nodes
                });


                //componentTree1.append('<li><span><em>' + view.getAttribute('id') + '</em> (' + view.getAttribute('widget-type') + ')' + '</span></li>');
            }

        }

        function makeView(index, viewInfo) {
            let clone;
            if (viewInfo.widgetType == 'TextView') {
                const widget = document.getElementById('TextViewWidget');              
                clone = widget.cloneNode(true);

            
            } else if (viewInfo.widgetType == 'ImageView') {
                const widget = document.getElementById('ImageViewWidget');               
                clone = widget.cloneNode(true);

            }else if (viewInfo.widgetType == 'QRView') {
                const widget = document.getElementById('QRViewWidget');
                clone = widget.cloneNode(true);
                clone.setAttribute('changeable', 'true');
            }

            clone.setAttribute('id', 'item' + index);
            
            clone.removeAttribute('palette');

            clone.classList.add("drag-drop");
            //clone.classList.add("text-center");
            clone.classList.add("align-middle");
            clone.classList.add("can-drop");

            clone.setAttribute("state", 'initial');

            clone.style.position = 'absolute';
            clone.style.top = '0'
            clone.style.left = '0'

            clone.style.textAlign = 'center';
            clone.style.fontFamily = 'SGLB';

            clone.style.transform = "translate(0px, 0px)";

            // update the posiion attributes
            clone.setAttribute("data-x", 0);
            clone.setAttribute("data-y", 0);

            if (viewInfo.widgetType == 'TextView') {
                clone.style.width = '200px'
                clone.style.height = '100px'
                clone.style.lineHeight = '100px'

                clone.textContent = 'TextView';
            
            }else if (viewInfo.widgetType == 'ImageView') {
                clone.style.width = '200px'
                clone.style.height = '200px'

                const elem = document.createElement('img');
                elem.setAttribute('src', 'images/person.png');
                elem.setAttribute('width', '100%');
                elem.setAttribute('height', '100%');
                elem.style.pointerEvents = 'none';

                clone.innerHTML = '';
                clone.appendChild(elem);

            } else if (viewInfo.widgetType == 'QRView') {
                clone.style.width = '200px'
                clone.style.height = '200px'

                clone.setAttribute('data-code', 'http://www.samsunghospital.com/');

                clone.innerHTML = '';
            } else {
                console.log('Unknown widget type : ' + viewInfo.widgetType);
            }

            // default background-color and color
            //clone.style.backgroundColor = '#ffffff';
            //clone.style.color = '#000000';


            return clone;
        }

        function applyPropertyChange(view, row, isTransform) {
            console.log('applying property : ' + row.name + ', ' + row.value);

            if (row.name == 'id') {
                view.setAttribute('id', row.value);
            // BY START 2019-12-03
            } else if (row.name == 'changeable') {
                view.setAttribute('changeable',row.value);
                
            // BY END 2019-12-03
            } else if (row.name == 'top') {
                if (!isTransform) {
                    const orgY = view.style.top;
                    const parentY = $('#dropzone1').offset().top;
                    console.log(parentY);
                    //const curY = orgY;
                    // const curY = parseFloat(row.value) - parseFloat(orgY) + 88;
                    // console.log('data-y -> ' + curY);

                    view.setAttribute('data-y', parseFloat(row.value));
                } else {
                    view.style.top = row.value;
                }


                /** 참고 (top 설정부분)
                const parentY = $('#dropzone1').offset().top;
                const orgY = parseFloat(target.style.top);
                const curY = parseFloat(target.getAttribute('data-y'));
                let styleTop = Math.round(orgY + curY - parentY);
                */

            } else if (row.name == 'left') {
                if (!isTransform) {
                    const orgX = view.style.left;
                    const curX = parseFloat(row.value) - parseFloat(orgX);
                    console.log('data-x -> ' + curX);

                    view.setAttribute('data-x', curX);
                } else {
                    view.style.left = row.value;
                }
            } else if (row.name == 'data-y') {
                
                view.setAttribute('data-y', row.value);
            } else if (row.name == 'data-x') {
                view.setAttribute('data-x', row.value);
            } else if (row.name == 'width') {
                view.style.width = row.value;
            } else if (row.name == 'height') {
                view.style.height = row.value;
            } else if (row.name == 'text') {
                view.textContent = row.value;

                // font    
            } else if (row.name == 'font-size') {
                view.style.fontSize = row.value;
            } else if (row.name == 'font-style') {
                view.style.fontStyle = row.value;
            } else if (row.name == 'font-weight') {
                view.style.fontWeight = row.value;
            } else if (row.name == 'font-family') {
                view.style.fontFamily = row.value;

            } else if (row.name == 'color') {
                view.style.color = row.value;
            } else if (row.name == 'background-color') {
                view.style.backgroundColor = row.value;
            } else if (row.name == 'border-width') {
                view.style.borderWidth = row.value;
            } else if (row.name == 'border-style') {
                view.style.borderStyle = row.value;
            } else if (row.name == 'border-color') {
                view.style.borderColor = row.value;

                // margin    
            } else if (row.name == 'margin-top') {
                view.style.marginTop = row.value;
            } else if (row.name == 'margin-bottom') {
                view.style.marginBottom = row.value;
            } else if (row.name == 'margin-left') {
                view.style.marginLeft = row.value;
            } else if (row.name == 'margin-right') {
                view.style.marginRight = row.value;

                // padding    
            } else if (row.name == 'padding-top') {
                view.style.paddingTop = row.value;
            } else if (row.name == 'padding-bottom') {
                view.style.paddingBottom = row.value;
            } else if (row.name == 'padding-left') {
                view.style.paddingLeft = row.value;
            } else if (row.name == 'padding-right') {
                view.style.paddingRight = row.value;

            } else if (row.name == 'line-height') {
                view.style.lineHeight = row.value;

                // border-radius
            } else if (row.name == 'border-top-left-radius') {
                view.style.borderTopLeftRadius = row.value;
            } else if (row.name == 'border-top-right-radius') {
                view.style.borderTopRightRadius = row.value;
            } else if (row.name == 'border-bottom-left-radius') {
                view.style.borderBottomLeftRadius = row.value;
            } else if (row.name == 'border-bottom-right-radius') {
                view.style.borderBottomRightRadius = row.value;

                // align
            } else if (row.name == 'text-align') {
                view.style.textAlign = row.value;

                // z-index  
            } else if (row.name == 'z-index') {
                view.style.zIndex = row.value;
                console.log(view);

                // image src    
            } else if (row.name == 'src') {
                if (view.firstElementChild && view.firstElementChild.hasAttribute('src')) {
                    view.firstElementChild.setAttribute('src', row.value);
                } else if (view.hasAttribute('src')) {
                    view.setAttribute('src', row.value);
                }

                // QR code data  
            } else if (row.name == 'data-code') {
                view.setAttribute('data-code', row.value);
                
                // create QR code
                const dataCode = row.value;
                const htmlStr = createQRCode(dataCode);
                view.innerHTML = htmlStr;

            } else {
                console.log('unknown name.');
            }

            if (!isTransform) {
                // apply transform for x and y position
                if (row.name == 'top') {
                    //const orgY = view.style.top;
                    //const curY = parseFloat(row.value) - parseFloat(orgY);
                    //console.log('top -> ' + curY);

                    const curY = view.getAttribute('data-y');

                    //const parentY = $('#dropzone1').offset().top;
                    //const curY = parseFloat(row.value) + parseFloat(parentY);
                    //console.log('top -> ' + curY);

                    //const parentX = $('#dropzone1').offset().left;
                    //const curX = view.style.left + parseFloat(parentX);
                    const curX = view.getAttribute('data-x');
                    //console.log('left -> ' + curX);

                    console.log('translate x, y -> ' + curX + ', ' + curY);
                    if (curX && curY) {33
                        view.style.webkitTransform = view.style.transform =
                            'translate(' + curX + 'px,' + curY + 'px)'
                    }

                } else if (row.name == 'left') {
                    //const parentY = $('#dropzone1').offset().top;
                    //const curY = view.style.top + parseFloat(parentY);
                    const curY = view.getAttribute('data-y');
                    //console.log('top -> ' + curY);

                    //const parentX = $('#dropzone1').offset().left;
                    //const curX = parseFloat(row.value) + parseFloat(parentX);

                    //console.log('left -> ' + curX);

                    //const orgX = view.style.left;
                    //const curX = parseFloat(row.value) - parseFloat(orgX);
                    //console.log('left -> ' + curX);

                    const curX = view.getAttribute('data-x');

                    console.log('translate x, y -> ' + curX + ', ' + curY);
                    if (curX && curY) {
                        view.style.webkitTransform = view.style.transform =
                            'translate(' + curX + 'px,' + curY + 'px)'
                    }
                }
            }

            return view;
        }


        interact('.dropzone').dropzone({
            // 지정된 아이템만 드래그 가능하도록 함
            accept: '.drag-drop',

            // 드롭하기 위해 75% 이상 겹쳐야 함
            overlap: 0.75,

            // 이벤트 등록
            ondropactivate: function (event) {
                // add active dropzone feedback
                event.target.classList.add('drop-active')
            },
            ondragenter: function (event) {
                var draggableElement = event.relatedTarget
                var dropzoneElement = event.target

                // feedback the possibility of a drop
                dropzoneElement.classList.add('drop-target')
                draggableElement.classList.add('can-drop')
                //draggableElement.textContent = 'Dragged in'
            },
            ondragleave: function (event) {
                // remove the drop feedback style
                event.target.classList.remove('drop-target')
                event.relatedTarget.classList.remove('can-drop')
                //event.relatedTarget.textContent = 'Dragged out'
            },
            ondrop: function (event) {
                // 끌어다 놓았을 때 이벤트

                const widgetType = event.relatedTarget.getAttribute('widget-type');
                console.log('widget type : ' + widgetType);

                const state = event.relatedTarget.getAttribute('state');
                console.log('state : ' + state);

                // 가로/세로 크기 설정
                if (state == 'initial') {
                    if (widgetType == 'TextView') {
                        event.relatedTarget.style.width = '200px'
                        event.relatedTarget.style.height = '100px'
                        event.relatedTarget.style.lineHeight = '100px'

                        event.relatedTarget.textContent = 'TextView';
                    
                    }else if (widgetType == 'ImageView') {
                        event.relatedTarget.style.width = '200px'
                        event.relatedTarget.style.height = '200px'

                        const elem = document.createElement('img');
                        elem.setAttribute('src', 'images/person.png');
                        elem.setAttribute('width', '100%');
                        elem.setAttribute('height', '100%');
                        elem.style.pointerEvents = 'none';

                        event.relatedTarget.innerHTML = '';
                        event.relatedTarget.appendChild(elem);

                    } else if (widgetType == 'QRView') {
                        event.relatedTarget.style.width = '200px'
                        event.relatedTarget.style.height = '200px'

                        // create QR code
                        const dataCode = "www.naver.com";
                        const htmlStr = createQRCode(dataCode);
                        event.relatedTarget.innerHTML = htmlStr;

                        event.relatedTarget.setAttribute('data-code', dataCode);
                    }
                }


                //event.relatedTarget.textContent = 'Dropped'

                // top/left 위치 확인
                const targetLeft = event.relatedTarget.getAttribute('data-x');
                const targetTop = event.relatedTarget.getAttribute('data-y');
                console.log('dropitem top/left : ' + targetTop + ', ' + targetLeft);

                console.log('dropitem bound : ' + event.relatedTarget.getBoundingClientRect());
                const offsetX = event.relatedTarget.offsetLeft - targetLeft;
                console.log('offsetX : ' + offsetX);

                // 기본 z-index를 0으로 설정
                if (event.relatedTarget.style.zIndex) {
                    console.log('zIndex : ' + event.relatedTarget.style.zIndex);
                } else {
                    console.log('zIndex is not defined');
                    event.relatedTarget.style.zIndex = 0;
                }

                // Component Tree에 추가
                var nodes = [
                    {
                        "id": event.relatedTarget.getAttribute('id'),
                        "text": event.relatedTarget.getAttribute('id') + ' (' + event.relatedTarget.getAttribute('widget-type') + ')'
                    }
                ];

                // BY START 2019-12-03
                
                // 새롭게 만들어진 nodes 만 componentTree에 추가

                var roots = $('#componentTree1').tree('getRoots');
                var rootsId = [];
                for (var i = 0 ; i <roots.length; i++) {   
                   rootsId.push(roots[i].id);
                }
                if(!rootsId.includes(nodes[0].id)) {
                    console.log('들어옴');
                    $('#componentTree1').tree('append', {
                        parent: componentTree1.target,
                        data: nodes
                    });
                }
                // BY END 2019-12-03
                

                // 선택된 상태로 변경
                setSelected(event.relatedTarget);

            },
            ondropdeactivate: function (event) {
                // remove active dropzone feedback
                event.target.classList.remove('drop-active')
                event.target.classList.remove('drop-target')
            }
        })

        interact('.drag-drop').draggable({
            inertia: true,
            modifiers: [
                interact.modifiers.restrictRect({
                    endOnly: true
                })
            ],
            manualStart: true,
            autoScroll: true,
            // dragMoveListener from the dragging demo above
            onmove: dragMoveListener
        }).resizable({
            // resize from all edges and corners
            edges: { left: true, right: true, bottom: true, top: true },

            modifiers: [
                // keep the edges inside the parent
                interact.modifiers.restrictEdges({
                    endOnly: true
                }),

                // minimum size
                interact.modifiers.restrictSize({
                    min: { width: 10, height: 10 }
                })
            ],

            inertia: true
        })
            .on('move', function (event) {
                var interaction = event.interaction;

                // if the pointer was moved while being held down
                // and an interaction hasn't started yet
                if (interaction.pointerIsDown && !interaction.interacting()) {
                    var target = event.currentTarget;

                    if (target.getAttribute('palette')) {
                        // create a clone of the currentTarget element
                        var clone = event.currentTarget.cloneNode(true);
                        clone.removeAttribute('palette');

                        console.log(event.currentTarget);

                        var targetBounding = target.getBoundingClientRect();

                        // add dragging class
                        //clone.classList.add("drag-dragging");
                        //clone.classList.remove("drag-dropped");
                        clone.classList.add("drag-drop");
                        //clone.classList.add("text-center");
                        clone.classList.add("align-middle");

                        // translate the element
                        clone.style.transform = "translate(0px, 0px)";
                        clone.style.position = "absolute";
                        clone.style.top = (targetBounding.top + window.scrollY) + "px";
                        clone.style.left = (targetBounding.left + window.scrollX) + "px";
                        clone.style.textAlign = 'center';
                        clone.style.fontFamily = 'SGLB';

                        // default background-color and color
                        clone.style.backgroundColor = '#ffffff';
                        clone.style.color = '#000000';

                        // update the posiion attributes
                        clone.setAttribute("data-x", 0);
                        clone.setAttribute("data-y", 0);


                        // insert the clone to the page
                        //document.body.appendChild(clone);
                        const dropzone1 = document.getElementById('dropzone1');

                        const index = dropzone1.childElementCount;
                        clone.setAttribute('id', 'item' + index);

                        clone.setAttribute('changeable','true');

                        dropzone1.appendChild(clone);

                        // start a drag interaction targeting the clone
                        interaction.start({ name: 'drag' }, event.interactable, clone);

                        clone.setAttribute("state", 'initial');

                    } else {

                        // start a drag interaction targeting the clone
                        interaction.start({ name: 'drag' }, event.interactable, target);

                        target.setAttribute("state", 'move');

                    }

                }

            })
            .on('resizemove', function (event) {
                var target = event.target
                var x = (parseFloat(target.getAttribute('data-x')) || 0)
                var y = (parseFloat(target.getAttribute('data-y')) || 0)

                // update the element's style
                target.style.width = event.rect.width + 'px'
                target.style.height = event.rect.height + 'px'

                // translate when resizing from top or left edges
                x += event.deltaRect.left
                y += event.deltaRect.top

                target.style.webkitTransform = target.style.transform =
                    'translate(' + x + 'px,' + y + 'px)'

                target.setAttribute('data-x', x)
                target.setAttribute('data-y', y)
                console.log('data-y입니다 : '+ y);
                //target.textContent = Math.round(event.rect.width) + '\u00D7' + Math.round(event.rect.height)
                console.log('coord : ' + Math.round(event.rect.width) + '\u00D7' + Math.round(event.rect.height));
                console.log('data-x : '+x + ' // data-y'+y);
                

                target.setAttribute("state", 'resize');

            })
            .on('down', function (event) {
                const target = event.target;

                setSelected(target);
            })
            .on('up', function (event) {
                const target = event.target

            })


        // QR 코드 생성, 결과물은 img 태그가 됨
        function createQRCode(text) {
            const typeNumber = '0'; // auto detect
            const errorCorrectionLevel = 'H'; // High
            const mode = 'Byte'; // Byte mode
            const mb = 'UTF-8'; // Multi-Byte
            const cellsize = 4;

            qrcode.stringToBytes = qrcode.stringToBytesFuncs[mb];

            const qr = qrcode(typeNumber || 4, errorCorrectionLevel || 'M');
            qr.addData(text, mode);
            qr.make();

            return qr.createImgTag(cellsize, 4);
        }


        function setSelected(target) {

            // 선택된 아이템이므로 selected 설정
            if (selectedItem.length > 0) { // 기존에 선택된 아이템이 있으면 selected 해제
                for (let i = 0; i < selectedItem.length; i++) {
                    selectedItem[i].classList.remove('selected-item');
                }
                selectedItem = [];
            }

            if (target) {
                target.classList.add('selected-item');
                selectedItem.push(target);

                setPropertyData(target);
            } else {
                const data = [];
                $('#pg').propertygrid('loadData', data);


            }

        }

        function setPropertyData(target) {
            console.log('setPropertyData called.');

            const data = makePropertyData(target);
            $('#pg').propertygrid('loadData', data);

        }

        function makePropertyData(target, isRawCoord) {
            console.log('makePropertyData called.');

            let widgetType = target.getAttribute('widget-type');
            if (!widgetType) {
                widgetType = target.parentElement.getAttribute('widget-type');
            }
            console.log('widget type : ' + widgetType);

            const data = [];

            // id
            const viewId = target.getAttribute('id');
            data.push({ name: 'id', value: viewId, group: 'Basic', editor: 'text' });

            const viewCt = target.getAttribute('changeable');
            data.push({ name: 'changeable', value: viewCt , group: 'Basic', editor: 'text'});

            // top coord
            const parentY = $('#dropzone1').offset().top +1;
            const orgY = parseFloat(target.style.top);
            const curY = parseFloat(target.getAttribute('data-y'));
            let styleTop = Math.round(orgY + curY - parentY);
            if (isNaN(styleTop)) {
                styleTop = '';
            } else {
                styleTop += 'px';
            }

            if (isRawCoord) {
                data.push({ name: 'top', value: orgY + 'px', group: 'Position', editor: 'text' });
                data.push({ name: 'data-y', value: curY, group: 'Position', editor: 'text' });
                
            } else {
                data.push({ name: 'top', value: styleTop, group: 'Position', editor: 'text' });
            }

            // left coord
            const parentX = $('#dropzone1').offset().left;
            const orgX = parseFloat(target.style.left);
            const curX = parseFloat(target.getAttribute('data-x'));
            let styleLeft = Math.round(orgX + curX - parentX);
            if (isNaN(styleLeft)) {
                styleLeft = '';
            } else {
                styleLeft += 'px';
            }

            if (isRawCoord) {
                data.push({ name: 'left', value: orgX + 'px', group: 'Position', editor: 'text' });
                data.push({ name: 'data-x', value: curX, group: 'Position', editor: 'text' });
            } else {
                data.push({ name: 'left', value: styleLeft, group: 'Position', editor: 'text' });
            }

            const styleWidth = target.style.width;
            data.push({ name: 'width', value: styleWidth, group: 'Position', editor: 'text' });

            const styleHeight = target.style.height;
            data.push({ name: 'height', value: styleHeight, group: 'Position', editor: 'text' });

            const styleBackgroundColor = target.style.backgroundColor;
            data.push({ name: 'background-color', value: styleBackgroundColor, group: 'Style', editor: 'color' });

            const styleBorderWidth = target.style.borderWidth;
            data.push({ name: 'border-width', value: styleBorderWidth, group: 'Style', editor: 'text' });

            const styleBorderStyle = target.style.borderStyle;
            data.push({ name: 'border-style', value: styleBorderStyle, group: 'Style', editor: 'text' });

            const styleBorderColor = target.style.borderColor;
            data.push({ name: 'border-color', value: styleBorderColor, group: 'Style', editor: 'color' });

            // margin
            const styleMarginTop = target.style.marginTop;
            data.push({ name: 'margin-top', value: styleMarginTop, group: 'Style', editor: 'text' });

            const styleMarginBottom = target.style.marginBottom;
            data.push({ name: 'margin-bottom', value: styleMarginBottom, group: 'Style', editor: 'text' });

            const styleMarginLeft = target.style.marginLeft;
            data.push({ name: 'margin-left', value: styleMarginLeft, group: 'Style', editor: 'text' });

            const styleMarginRight = target.style.marginRight;
            data.push({ name: 'margin-right', value: styleMarginRight, group: 'Style', editor: 'text' });

            // padding
            const stylePaddingTop = target.style.paddingTop;
            data.push({ name: 'padding-top', value: stylePaddingTop, group: 'Style', editor: 'text' });

            const stylePaddingBottom = target.style.paddingBottom;
            data.push({ name: 'padding-bottom', value: stylePaddingBottom, group: 'Style', editor: 'text' });

            const stylePaddingLeft = target.style.paddingLeft;
            data.push({ name: 'padding-left', value: stylePaddingLeft, group: 'Style', editor: 'text' });

            const stylePaddingRight = target.style.paddingRight;
            data.push({ name: 'padding-right', value: stylePaddingRight, group: 'Style', editor: 'text' });

            const styleLineHeight = target.style.lineHeight;
            data.push({ name: 'line-height', value: styleLineHeight, group: 'Style', editor: 'text' });

            // border-radius
            const styleBorderTopLeftRadius = target.style.borderTopLeftRadius;
            data.push({ name: 'border-top-left-radius', value: styleBorderTopLeftRadius, group: 'Style', editor: 'text' });

            const styleBorderTopRightRadius = target.style.borderTopRightRadius;
            data.push({ name: 'border-top-right-radius', value: styleBorderTopRightRadius, group: 'Style', editor: 'text' });

            const styleBorderBottomLeftRadius = target.style.borderBottomLeftRadius;
            data.push({ name: 'border-bottom-left-radius', value: styleBorderBottomLeftRadius, group: 'Style', editor: 'text' });

            const styleBorderBottomRightRadius = target.style.borderBottomRightRadius;
            data.push({ name: 'border-bottom-right-radius', value: styleBorderBottomRightRadius, group: 'Style', editor: 'text' });

            // align
            const styleTextAlign = target.style.textAlign;
            data.push({ name: 'text-align', value: styleTextAlign, group: 'Style', editor: 'text' });

            // z-index
            const styleZIndex = target.style.zIndex;
            data.push({ name: 'z-index', value: styleZIndex, group: 'Style', editor: 'text' });


            if (widgetType == 'TextView') {
                
                const styleColor = target.style.color;
                data.push({ name: 'color', value: styleColor, group: 'Style', editor: 'color' });

                const styleText = target.textContent;
                data.push({ name: 'text', value: styleText, group: 'Style', editor: 'text' });

                // font
                const styleFontSize = target.style.fontSize;
                data.push({ name: 'font-size', value: styleFontSize, group: 'Style', editor: 'text' });

                const styleFontStyle = target.style.fontStyle;
                data.push({ name: 'font-style', value: styleFontStyle, group: 'Style', editor: 'text' });

                const styleFontWeight = target.style.fontWeight;
                data.push({ name: 'font-weight', value: styleFontWeight, group: 'Style', editor: 'text' });

                const styleFontFamily = target.style.fontFamily;
                data.push({ name: 'font-family', value: styleFontFamily, group: 'Style', editor: 'text' });
            
            }else if (widgetType == 'ImageView') {
                

                let imageSrc = '';
                if (target.firstElementChild && target.firstElementChild.hasAttribute('src')) {
                    imageSrc = target.firstElementChild.getAttribute('src');
                } else if (target.hasAttribute('src')) {
                    imageSrc = target.getAttribute('src');
                }

                // BY START 2019-12-10
                data.push({ name: 'src', value: imageSrc, group: 'Style', editor: 'text' });
                
                let transCoord_Y = curY-65;
                data.push({ name: 'data-y', value: transCoord_Y, group: 'Position', editor: 'text' });
                
            } else if (widgetType == 'QRView') {
                

                let dataCode = '';
                if (target.hasAttribute('data-code')) {
                    dataCode = target.getAttribute('data-code');
                }
                let transCoord_Y = curY-63;
                data.push({ name: 'data-y', value: transCoord_Y, group: 'Position', editor: 'text' });
                data.push({ name: 'data-code', value: dataCode, group: 'Data', editor: 'text' });

            }

            return data;
        }


        function dragMoveListener(event) {
            var target = event.target
            // keep the dragged position in the data-x/data-y attributes
            var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx
            var y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy

            // translate the element
            target.style.webkitTransform =
                target.style.transform =
                'translate(' + x + 'px, ' + y + 'px)'

            // update the posiion attributes
            target.setAttribute('data-x', x)
            target.setAttribute('data-y', y)
            console.log('data-y입니다 : '+ y);
        }

        // this is used later in the resizing and gesture demos
        window.dragMoveListener = dragMoveListener

        //===== Layout Editor END =====//




        //===== Device Group List =====//
        function requestDeviceGroupList(page, perPage) {
            console.log('requestDeviceGroupList 호출됨 : ' + page + ', ' + perPage);

            requestDeviceGroupSearch(page, perPage);
        }

        function requestDeviceGroupSearch(page, perPage) {
            console.log('requestDeviceGroupSearch 호출됨');

            var params = '?page=' + page
                + '&perPage=' + perPage;

            if (searchValue) {
                params += '&search=' + search;
                params += '&searchValue=' + searchValue;
            }

            // show progressbar
            $('#progressDeviceGroup1').show();

            axios({
                method: 'get',
                url: '/baroboard/device_group' + params,
                responseType: 'json'
            }).then(function (response) {
                // hide progressbar
                $('#progressDeviceGroup1').hide();

                //console.log('응답 -> ' + JSON.stringify(response));

                // 테이블에서 헤더 아이템만 빼고 모두 삭제
                var tableDeviceGroup1 = document.getElementById('tableDeviceGroup1');
                var firstElementChild = tableDeviceGroup1.firstElementChild;
                tableDeviceGroup1.innerHTML = '';
                tableDeviceGroup1.append(firstElementChild);

                // 테이블에 응답 결과 추가
                response.data.output.body.forEach(function (item, index) {
                    addDeviceGroupItem(item, index);
                })

                // 페이지 번호 구성하기
                makePagination(response.data.output.header, 'paginationDeviceGroup', 'requestDeviceGroupList');

                // 검색 정보 설정
                setSearchValue('searchDeviceGroupSelect', 'searchDeviceGroupInput', search, searchValue);

                // 총 갯수 표시
                $('#totalDeviceGroupOutput').text('결과 ' + response.data.output.header.total);

            }).catch(function (err) {
                // hide progressbar
                $('#progressDeviceGroup1').hide();

                console.error('Error -> ' + err);

                toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
            });
        }

        function addDeviceGroupItem(item, index) {
            console.log('addDeviceGroupItem 호출됨 : ' + index);

            if (item.parent_name == null || typeof (item.parent_name) == 'undefined') {
                item.parent_name = '';
            }

            var html = '<tr id="itemDeviceGroup' + item.id + '">'
                + '    <td class="text-left align-middle" style="width:10%;">'
                + '      <img src="/index_img/device_group_48.png" style="width:2em;">'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:15%;">'
                + '      <span id="itemDeviceGroup' + item.id + '_item_id">' + item.id + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:15%;">'
                + '      <span id="itemDeviceGroup' + item.id + '_name">' + item.name + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:15%;">'
                + '      <span id="itemDeviceGroup' + item.id + '_parent_name">' + item.parent_name + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:25%;">'
                + '      <span id="itemDeviceGroup' + item.id + '_details">' + item.details + '</span>'
                + '    </td>'
                + '    <td class="text-center align-middle" style="width:20%;">'
                + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" onclick="showDeviceGroupModifyPage(\'' + item.id + '\', \'' + item.name + '\', \'' + item.parent_id + '\', \'' + item.parent_name + '\', \'' + item.details + '\')"><i class="fas fa-edit fa-lg cyan-text"></i></button>'
                + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" onclick="deleteDeviceGroupItem(\'' + item.id + '\')"><i class="fas fa-trash fa-lg red-text"></i></button>'
                + '    </td>'
                + '</tr>';

            $('#tableDeviceGroup1').append(html);

        }


        function requestDeviceGroupAdd(id, name, parent_id, parent_name, details, create_author) {
            console.log('requestDeviceGroupAdd 호출됨');

            var params = {
                id: id,
                name: name,
                parent_id: parent_id,
                parent_name: parent_name,
                details: details,
                create_author: create_author
            }

            axios({
                method: 'post',
                url: '/baroboard/device_group',
                data: params,
                responseType: 'json'
            }).then(function (response) {
                console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.body.affectedRows > 0) {
                    console.log('추가 성공');

                    toastr.info('정상적으로 추가되었습니다.');

                    requestDeviceGroupList(currentPage, 10);
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }

        function requestDeviceGroupModify(id, name, parent_name, details, modify_author) {
            console.log('requestDeviceGroupModify 호출됨');

            var params = {
                name: name,
                parent_name: parent_name,
                details: details,
                modify_author: modify_author
            }

            axios({
                method: 'put',
                url: '/baroboard/device_group/' + id,
                data: params,
                responseType: 'json'
            }).then(function (response) {
                //console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.body.affectedRows > 0) {
                    console.log('수정 성공');

                    toastr.info('정상적으로 수정되었습니다.');

                    requestDeviceGroupList(currentPage, 10);
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }

        function requestDeviceGroupRemove(id) {
            console.log('requestDeviceGroupRemove 호출됨 : ' + id);

            axios({
                method: 'delete',
                url: '/baroboard/device_group/' + selected,
                responseType: 'json'
            }).then(function (response) {
                console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.body.affectedRows > 0) {
                    console.log('삭제 성공');

                    toastr.info('정상적으로 삭제되었습니다.');

                    requestDeviceGroupList(currentPage, 10);
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }


        function showDeviceGroupAddPage() {
            mode = 'add';

            $('#page2-3-1Title').text('단말 그룹 추가');

            $('#nameDeviceGroupInput').val('');
            $('#parentDeviceGroupInput').val('');
            $('#detailsDeviceGroupInput').val('');

            showPage('page2-3-1');
        }

        function searchDeviceGroupItem() {
            search = $('#searchDeviceGroupSelect').val();
            searchValue = $('#searchDeviceGroupInput').val();
            console.log('search : ' + search + ', ' + searchValue);

            requestDeviceGroupSearch(1, 10);
        }
        // BY START 2019-11-06
        function saveDeviceGroupItem() {
            var name = $('#nameDeviceGroupInput').val();
            var parentName = $('#parentDeviceGroupInput').val();
            var details = $('#detailsDeviceGroupInput').val();
            var id = $('#idDeviceGroupInput').val();
            if (name.includes(condition) || parentName.includes(condition) || details.includes(condition) || id.includes(condition)) {
                toastr.error('필수 항목들을 전부 입력해 주세요', { timeOut: 2000 });
            }
            else {
                // BY START 2019-11-11
                if (mode == 'add') {
                    var create_author = sessionUser.name;
                    addDeviceGroupInputItem(id,name, parentName, details, create_author);
                } else if (mode == 'modify') {
                    var modify_author = sessionUser.name;
                    modifyDeviceGroupInputItem(id,name, parentName, details, modify_author);
                }
                // BY END 2019-11-11

                showPage('page2-3');
            }

        }
        // BY END 2019-11-06
        function addDeviceGroupInputItem(id,name, parentName, details, create_author) {
            var parentId = '';
            requestDeviceGroupAdd(id, name, parentId, parentName, details, create_author);

        }

        function showDeviceGroupModifyPage(id, name, parentId, parentName, details) {
            console.log('showDeviceGroupModifyPage 호출됨');

            mode = 'modify';
            selected = id;

            $('#page2-3-1Title').text('단말 그룹 수정');

            $('#nameDeviceGroupInput').val(name);
            $('#parentDeviceGroupInput').val(parentName);
            $('#detailsDeviceGroupInput').val(details);

            showPage('page2-3-1');

            $('#nameDeviceGroupInput').focus();
            $('#parentDeviceGroupInput').focus();
            $('#detailsDeviceGroupInput').focus();

        }


        function modifyDeviceGroupInputItem(id,name, parentName, details, modify_author) {
            console.log('modifyDeviceGroupInputItem 호출됨');


            requestDeviceGroupModify(id, name, parentName, details, modify_author);

        }

        function deleteDeviceGroupItem(id) {
            console.log('deleteDeviceGroupItem 호출됨');

            selected = id;

            $('#modalDeviceGroupDelete').modal('show');
        }

    // BY START 2019-11-18
        // // ====== Legacy ===== //
        // function requestLegacy() {
        //     console.log('requestLegacy 호출됨');

        //     axios({
        //         method: 'get',
        //         url: '/baroboard/legacy',
        //         responseType: 'json',
        //         data:[],
        //     }).then(function (response) {

        //         var data = response.data.output.body[0];
        //         setLegacyData(data);      

            
        //     }).catch(function (err) {

        //         console.error('Error -> ' + err);

        //         toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
        //     });
        // }


        // function setLegacyData (data) {
        //     $('#eslid').val(data.id);
        //     $('#eslip').val(data.ip);
        //     $('#eslname').val(data.name);
        //     $('#esldetail').val(data.detail);
        //     $('#eslhost').val(data.host);
        //     $('#eslport').val(data.port);
        // }


        // function applyLegacyData() {
        //     console.log('applyLegacyData 호출됨');
            
        //     var host = $('#eslhost').val();
        //     var port = $('#eslport').val();
        //     console.log("host: "+ host);
        //     console.log("port:" + port);

        //     $('#hostDiv').html(host);
        //     $('#portDiv').html(port);

        //     $('#modalLegacyConfirmApply').modal('show');
        // }

        // legacy 사용안함
        // function modifyLegacy() {
        //     $('#progressLegacy1').show();
        //     var id =  $('#eslid').val();
        //     var name =  $('#eslname').val();
        //     var detail = $('#esldetail').val();
        //     var host = $('#eslhost').val();
        //     var port = $('#eslport').val();
        //     var ip = 'http://'+host+':'+port;

        //     console.log('requestUsersModify 호출됨');

        //     var params = {
        //         id:id,
        //         ip:ip,
        //         name: name,
        //         detail: detail,
        //         host: host,
        //         port:port,
        //         modify_author:sessionUser.name
        //     }

        //     axios({
        //         method: 'put',
        //         url: '/baroboard/legacy/' + id,
        //         data: params,
        //         responseType: 'json'
        //     }).then(function (response) {
        //         //console.log('응답 -> ' + JSON.stringify(response));

        //         if (response.data.output.body.affectedRows > 0) {

        //             requestLegacy();
        //             $('#progressLegacy1').hide();
        //             toastr.info('정상적으로 수정되었습니다.');

        //         }

        //     }).catch(function (err) {
        //         console.error('Error -> ' + err);
        //     });

        // }
    // BY END 2019-11-18

        //===== Users List =====//

        function requestUsersList(page, perPage) {
            console.log('requestUsersList 호출됨 : ' + page + ', ' + perPage);

            requestUsersSearch(page, perPage);
        }

        function requestUsersSearch(page, perPage) {
            console.log('requestUsersSearch 호출됨');

            var params = '?page=' + page
                + '&perPage=' + perPage;

            if (searchValue) {
                params += '&search=' + search;
                params += '&searchValue=' + searchValue;
            }

            // show progressbar
            $('#progressUsers1').show();

            axios({
                method: 'get',
                url: '/baroboard/users' + params,
                responseType: 'json'
            }).then(function (response) {
                // hide progressbar
                $('#progressUsers1').hide();
                //console.log('응답 -> ' + JSON.stringify(response));

                // 테이블에서 헤더 아이템만 빼고 모두 삭제
                var tableUsers1 = document.getElementById('tableUsers1');
                var firstElementChild = tableUsers1.firstElementChild;
                tableUsers1.innerHTML = '';
                tableUsers1.append(firstElementChild);

                // 테이블에 응답 결과 추가
                response.data.output.body.forEach(function (item, index) {
                    addUsersItem(item, index);
                    console.log(item)
                })

                // 페이지 번호 구성하기
                makePagination(response.data.output.header, 'paginationUsers', 'requestUsersList');

                // 검색 정보 설정
                setSearchValue('searchUsersSelect', 'searchUsersInput', search, searchValue);

                // 총 갯수 표시
                $('#totalUsersOutput').text('결과 ' + response.data.output.header.total);

            }).catch(function (err) {
                // hide progressbar
                $('#progressUsers1').hide();

                console.error('Error -> ' + err);

                toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
            });
        }

        function addUsersItem(item, index) {
            console.log('addUsersItem 호출됨');

            if (item.parent_name == null || typeof (item.parent_name) == 'undefined') {
                item.parent_name = '';
            }

            var html = '<tr id="itemUsers' + item.id + '">'
                + '    <td class="text-left align-middle" style="width:10%;">'
                + '      <img src="/index_img/users_48.png" style="width:2em;">'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:10%;">'
                + '      <span id="itemUsers' + item.id + '_id">' + item.id + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:15%;">'
                + '      <span id="itemUsers' + item.id + '_name">' + item.name + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:10%;">'
                + '      <span id="itemUsers' + item.id + '_dept">' + item.esl_authority + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:10%;">'
                + '      <span id="itemUsers' + item.id + '_dept">' + item.board_authority + '</span>'
                + '    </td>'
                + '    <td class="text-left align-middle" style="width:15%;">'
                + '      <span id="itemUsers' + item.id + '_dept">' + item.phone + '</span>'
                + '    </td>'
                + '    <td class="text-center align-middle" style="width:20%;">'
                + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" onclick="showUsersModifyPage(\'' + item.id + '\', \'' + item.password + '\', \'' + item.name + '\', \'' + item.dept + '\', \'' + item.details + '\', \'' + item.esl_authority + '\', \'' + item.phone + '\', \'' + item.board_authority + '\')"><i class="fas fa-edit fa-lg cyan-text"></i></button>'
                + '      <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" onclick="deleteUsersItem(\'' + item.id + '\')"><i class="fas fa-trash fa-lg red-text"></i></button>'
                + '    </td>'
                + '</tr>';

            $('#tableUsers1').append(html);

        }

        /* BY START 2019-11-04
         * 사유: USER 등록시 password 입력 추가 및 Level에 따른 detail 추가
         */
        function requestUsersAdd(id, name, password,dept,level,phone,board,create_author) {
            console.log('requestUsersAdd 호출됨');
            let details = null;
            if (level == '1') {
                details = '일반 사용자'
            }
            else if (level == '2') {
                details = '관리자'
            }
            

            var params = {
                id:id,
                name: name,
                password: password,
                details: details,
                esl_authority: level,
                board_authority:board,
                phone:phone,
                dept: dept,
                create_author: create_author
            }

            axios({
                method: 'post',
                url: '/baroboard/users',
                data: params,
                responseType: 'json'
            }).then(function (response) {
                console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.body.affectedRows > 0) {
                    console.log('추가 성공');

                    toastr.info('정상적으로 추가되었습니다.');

                    requestUsersList(currentPage, 10);
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }
        // BY END 2019-11-04
        function requestUsersModify(id, name, password, dept, details,phone,board, level, modify_author) {
            console.log('requestUsersModify 호출됨');

            var params = {
                name: name,
                password: password,
                details: details,
                esl_authority: level,
                board_authority:board,
                phone:phone,
                dept: dept,
                modify_author: modify_author
            }
            console.log(params);
            axios({
                method: 'put',
                url: '/baroboard/users/' + id,
                data: params,
                responseType: 'json'
            }).then(function (response) {
                //console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.body.affectedRows > 0) {
                    console.log('수정 성공');

                    toastr.info('정상적으로 수정되었습니다.');
                    if(sessionUser.level ==1) {
                        showPage('page5-1');
                        // 현장 운영자 대시보드 요청
                        requestDashboardFieldList();
                        
                    }else {
                        requestUsersList(currentPage, 10);
                    }
                    
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }

        function requestUsersRemove(id) {
            console.log('requestUsersRemove 호출됨 : ' + id);

            axios({
                method: 'delete',
                url: '/baroboard/users/' + selected,
                responseType: 'json'
            }).then(function (response) {
                console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.body.affectedRows > 0) {
                    console.log('삭제 성공');

                    toastr.info('정상적으로 삭제되었습니다.');

                    requestUsersList(currentPage, 10);
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }


        function showUsersAddPage() {
            mode = 'add';

            $('#page4-1-1Title').text('사용자 추가');

            $('#idUsersInput').val('');
            $('#nameUsersInput').val('');
            // BY START 2019-11-01
            // $('#detailsUsersInput').val('');
            $('#passwordUsersInput').val('');
            $('#passwordUsersInput2').val('');
            $('#deptUsersInput').val('');
            // BY END 2019-11-01
            $('#levelUsersInput').val('');

            showPage('page4-1-1');
        }

        function searchUsersItem() {
            search = $('#searchUsersSelect').val();
            searchValue = $('#searchUsersInput').val();
            console.log('search : ' + search + ', ' + searchValue);

            requestUsersSearch(1, 10);
        }
        // BY START 2019-11-06
        function saveUsersItem() {
            const userId = $('#idUsersInput').val();
            const name = $('#nameUsersInput').val();
            const password = $('#passwordUsersInput').val();
            const password2 = $('#passwordUsersInput2').val();
            const dept = $('#deptUsersInput').val();
            const level = $('#levelUsersInput').val();
            const phone = $('#phoneUsersInput').val();
            const board = $('#boardUsersInput').val();

            if (board.includes(condition) ||userId.includes(condition) || name.includes(condition) || password.includes(condition) || password2.includes(condition) || dept.includes(condition) || level.includes(condition)) {
                toastr.error('필수 항목들을 전부 입력해 주세요', { timeOut: 2000 });
            }
            else if (password !== password2) {
                toastr.error('암호가 일치하지 않습니다 다시 입력해 주세요', { timeOut: 2000 } );
               
            }
            else {
                if (mode == 'add') {
                   
                    var create_author = "admin";
                    addUsersInputItem(userId, name, password, dept, level,phone,board,create_author);
                } else if (mode == 'modify') {
                    var modify_author = "admin";
                    modifyUsersInputItem(userId, name, password, dept, level,phone,board,modify_author);
                }

                showPage('page4-1');
            }

        }

        function addUsersInputItem(userId, name, password, dept, level,phone,board,create_author) {


            if (level == '1') {
                const details = '일반 사용자'
            }
            else if (level == '2') {
                const details = '관리자'
            }
            requestUsersAdd(userId, name, password, dept, level,phone,board,create_author);
            // BY END 2019-11-06
        }

        function requestModifyProfile() {
            $('#sidenav-overlay').hide();
            showUsersModifyPage(sessionUser.id,sessionUser.password,sessionUser.name,sessionUser.dept,sessionUser.detail,sessionUser.level,sessionUser.phone,sessionUser.board);
        }
        

        function showUsersModifyPage(id, password, name, dept,detail, level,phone,board) {
            console.log('showUsersModifyPage 호출됨');

            mode = 'modify';
            selected = id;
            if(level > sessionUser.level) {

                toastr.error('권한이 없습니다.');
            }
            else {
                console.log(level);
                console.log(sessionUser.level);
                //  BY START 2019-11-07 
                if (sessionUser.level == 3) {
                    $('.superUserLevel').removeAttr('disabled');
                }
                //  BY END 2019-11-07
                $('#page4-1-1Title').text('사용자 수정');

                $('#idUsersInput').val(id);
                $('#nameUsersInput').val(name);
                // BY START 2019-11-01
                //$('#detailsUsersInput').val(details);
                $('#passwordUsersInput').val(password);
                $('#passwordUsersInput2').val(password);
                $('#deptUsersInput').val(dept);
                // BY END 2019-11-01

                $('#levelUsersInput').val(level);
                $('#phoneUsersInput').val(phone);
                $('#boardUsersInput').val(board);

                showPage('page4-1-1');

                $('#idUsersInput').focus();
                $('#nameUsersInput').focus();
                // BY START 2019-11-01
                //$('#detailsUsersInput').focus();
                $('#passwordUsersInput').focus();
                $('#passwordUsersInput2').focus();
                $('#deptUsersInput').focus();
                // BY END 2019-11-01
                $('#levelUsersInput').focus();
                $('#phoneUsersInput').focus();
                $('#boardUsersInput').focus();
                }
                                                                                                                                    

        }


        function modifyUsersInputItem(userId, name, password, dept, usersLevel,phone,board,modify_author) {
            console.log('modifyUsersInputItem 호출됨');
            // BY START 2019-11-01
            let usersDetails = '';
            if (usersLevel == '1') {
                usersDetails = '일반 사용자'
            }
            else if (usersLevel == '2') {
                usersDetails = '슈퍼 관리자'
            }
            // BY END 2019-11-01

            requestUsersModify(selected, name, password, dept, usersDetails,phone,board,usersLevel, modify_author);

        }

        function deleteUsersItem(id) {
            console.log('deleteUsersItem 호출됨');

            selected = id;

            $('#modalUsersDelete').modal('show');
        }


        //=============== 대시보드 현장 리스트 ===============//


        function requestDashboardFieldList(groupName) {
            console.log('requestDashboardFieldList 호출됨');

            // 테스트 그룹ID
            if (typeof (groupName) == 'undefined' || groupName == null) {
                groupName = $('#searchDashboardFieldInput').val();
            }

            if (!groupName || groupName.trim().length < 1) {
                // toastr.error('부서명을 먼저 입력하세요.');
                return;
            }

            const params = '?groupName=' + groupName;

            axios({
                method: 'get',
                url: '/baroboard/device/dashboard/fieldlist' + params,
                responseType: 'json'
            }).then(function (response) {
                // console.log('응답 -> ' + JSON.stringify(response));

                // 대시보드에서 헤더 아이템만 빼고 모두 삭제
                var dashboardDevice3 = document.getElementById('dashboardDevice3');
                var firstElementChild = dashboardDevice3.firstElementChild;
                dashboardDevice3.innerHTML = '';
                dashboardDevice3.append(firstElementChild);

                // 상단 제목 표시줄에 그룹명 대체
                $('#dashboardDevice3Group').text(groupName);

                // 대시보드에 응답 결과 추가
                let itemCount = 0;
                let outHtml = '';

                let totalCount = 0;
                let totalNormal = 0;
                let totalAlert = 0;
                if (response.data.output.body.length<1) {
                    toastr.error('일치하는 병동이 없습니다. 정확한 병동명을 입력해 주세요');
                }
                else {
                    for (let i = 0; i < response.data.output.body.length; i++) {
                        const item = response.data.output.body[i];

                        // 6개마다 한 줄 표시
                        if (i % 6 == 0) {
                            outHtml += '<div class="row" style="margin-top:1em;">';
                            console.log('a row start');

                            itemCount = 0;
                        } else {
                            itemCount += 1;
                        }

                        outHtml += addDashboardFieldItem(item, i);

                        if (itemCount == 5) {
                            outHtml += '</div>';
                            console.log('a row end');
                        }
                        totalCount += 1;
                        if (item.status == 'SUCCESS') {
                            totalNormal += 1;
                        } else {
                            totalAlert += 1;
                        }

                    }
                }
                

                if (itemCount < 5) {
                    outHtml += '</div>';
                    console.log('a row end');
                }

                //console.log('OUT HTML -> ' + outHtml);
                $('#dashboardDevice3').append(outHtml);

                // 총 갯수 표시
                $('#totalCount3').text('Total : ' + totalCount);
                $('#totalNormal3').text('Normal : ' + totalNormal);
                $('#totalAlert3').text('Alert : ' + totalAlert);


            }).catch(function (err) {
                console.error('Error -> ' + err);

                toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
            });
        }


        // 현장관리자>데이터입력에서 선택 부서의 아이템 추가
        function addDashboardFieldItem(item, index) {
            let html = '';

            let curColor = 'primary-color';
            let borderColor = 'white';
            let batteryIcon = 'full';
            let curAnimStyle = 'fa-spin fa-md';
            if (item.status != 'SUCCESS') {
                curColor = 'red accent-2';
                curAnimStyle = 'animated heartBeat infinite';
            }
            if(item.battery !='GOOD') {
                borderColor = 'red';
                curAnimStyle = 'animated heartBeat infinite';
                batteryIcon = 'quarter';
            }

            // data 필드가 있으면 디코딩하여 환자정보 확인
            let patientName = '';
            if (item.data) {
                const dataText = Base64Decode(item.data);
                const dataObj = JSON.parse(dataText);
                if (dataObj.data) {
                    if (dataObj.data.name) {
                        patientName = dataObj.data.name;
                    }
                }
            }


            // 데이터 업데이트 시간을 경과시간으로 변환
            const dataDateBefore = getTimeBefore(new Date(item.data_date));
            html += '  <div class="col-sm-2 mb-xl-0 mb-4" >'
                + '    <div class="card classic-admin-card ' + curColor + '" style="border:1px solid '+borderColor+'">'
                + '      <div class="card-body">'
                + '        <div class="pull-right">'
                + '          <h6 class="check"><i class="fas fa-cog ' + curAnimStyle + '" style="margin-right:1rem;"></i>' + item.location + '</h6>'
                + '        </div>'
                + '        <p class="white-text"><span style="margin-right:1rem;">' + item.size + '\'</span><span>' + item.resolution + '</span></p>'
                + '        <h5 class="check" style="margin-top:0.5rem;height:34.4px;">' + patientName + '   </h5>'
                + '        <div class="row">'
                + '          <div class="col-8">'
                + '            <p><span style="float:left">' + dataDateBefore + '</span></p>'        
                + '          </div>'
                + '          <div class="row col-4 ">'
                + '              <i class="fas fa-battery-'+batteryIcon+'"  style="float:left; margin-right:10px"></i>'    
                + '              <p><span style="float:right">' + item.battery + '</span></p>'
                + '          </div>'
                + '        </div>'
                + '        <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2 float-right" onclick="showDataInput2(\'' + item.id + '\', \'' + item.name + '\')">입력하기</button>'
                + '      </div>'
                + '    </div>'
                + '  </div>';



            return html;
        }


        // 현장운영자 대시보드에서 대한 데이터 입력 폼 표시
        function showDataInput2(id, name) {
            console.log('showDataInput2 호출됨');

            $('#modalDataInputTitle2').text('데이터 입력 - ' + name);

            requestDeviceDataSelect2(id);

            $('#modalDataInput2').modal('show');

        }


        // 현장운영자 데이터 입력 폼을 위한 조회 요청
        function requestDeviceDataSelect2(id) {
            console.log('requestDeviceDataSelect2 호출됨 : ' + id);

            deviceId = id;

            const params = '?' + 'id=' + id;

            axios({
                method: 'get',
                url: '/baroboard/device/data/select' + params,
                responseType: 'json'
            }).then(async function (response) {
                console.log('응답 -> ' + JSON.stringify(response));

                // modalDataInput 대화상자에 데이터 입력상자 표시
                if (response.data.output.length > 0) {
                    const curItem = response.data.output[0];
                    const layoutMappingText = Base64Decode(curItem.layout_mapping);
                    const layoutMapping = JSON.parse(layoutMappingText);
                    // BY START 2019-12-09
                    let deviceData = [];
                    if(curItem.device_data !=null) {
                        const deviceDataText = Base64Decode(curItem.device_data);
                        deviceData = JSON.parse(deviceDataText);
                    }
                    // BY END 2019-12-09
                    
                    curLayoutMapping = layoutMapping;

                    // 입력 폼을 위한 화면 레이아웃 만들기
                    const curOutput =await makeDataInputLayout(layoutMapping, deviceData);
                    console.log('haha');
                    $('#inputContainer2').html(curOutput);
                    
                    nameWarningOptions4();

                }

            }).catch(function (err) {
                console.error('Error -> ' + err);

                toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
            });
        }

        // 현장운영자 대시보드에서 저장 버튼 눌렀을 때 호출됨
        function saveDeviceDataInput2() {
            console.log('saveDeviceDataInput2 called.');

            const mappingKeys = Object.keys(curLayoutMapping);

            console.log('count of mapping keys : ' + mappingKeys.length);
            let outObj = {};

            const sources = [];
            for (let i = 0; i < mappingKeys.length; i++) {
                const curKey = mappingKeys[i];
                const curObj = curLayoutMapping[curKey];
                console.log('#' + i + ' ' + curKey + ' -> ' + JSON.stringify(curObj));
                console.log($('#deviceInput_'+curKey).val());
            
            // BY START 2019 11-21
            

                //source가 중복된 경우에는 skip
                if (sources.indexOf(curObj['source']) > -1) {
                    if (curObj['operator']) {
                        console.log('source is duplicate -> skipping');
                        //continue;
                    }
                } else {
                    sources.push(curObj['source']);
                }
                
                // 데이터가 사진인지(array인지 1개만인지), text인지 구분
                let curInputValue;
                var imagName;
                // BY START 2019-11-21
                if(curObj.target=='src') {
                    
                    
                    
                    imageName = $('#deviceInput_' + curKey).val();
        
                    // 사진이 array일 때
                    
                    curInputValue = imageName;
                    
                }
                else if (curObj.target =='text') {
                    curInputValue = $('#deviceInput_' + curKey).val();
                }
                // BY START 2019-12-11
                else if ( curObj.target =='data-code') {
                    curInputValue = $('#deviceInput_' + curKey).val();
                    
                }
                // BY END 2019-12-11

                // BY END 2019-11-21
                // get source
                const curSource = curObj.source;
                const sourceArray = curSource.split('.');
                // BY START 2019-11-21
                let outObjRef = outObj;
                if( curInputValue =='undifined') {
                    curInputValue = '';
                }
                // BY END 2019-2019-11-21
                for (let j = 0; j < sourceArray.length; j++) {
                    
                    if (j == (sourceArray.length - 1)) { // last element
                        // BY START 2019-11-21
                        if(outObjRef[sourceArray[j]]) {
                            outObjRef[sourceArray[j]] += ','+curInputValue;
                        }
                        // BY END 2019-11-21
                        else {
                            outObjRef[sourceArray[j]] = curInputValue;
                        }
                                                
                    } else {
                        if (outObjRef[sourceArray[j]]) {

                        } else {
                            outObjRef[sourceArray[j]] = {};
                        }
                        outObjRef = outObjRef[sourceArray[j]];
                    }
                }  
            }

            console.log('output object -> ' + JSON.stringify(outObj));
            const contents = JSON.stringify(outObj);
            const data = Base64Encode(contents);

            console.log('data -> ' + data);

            requestDeviceDataUpdate2(deviceId, data);
        }


        // 단말 데이터 업데이트하고 현장운영자 대시보드 업데이트
        function requestDeviceDataUpdate2(id, data) {

            console.log('requestDeviceDataUpdate2 호출됨 : ' + id + ', ' + data);

            const params = {
                id: id,
                data: data
            }

            axios({
                method: 'post',
                url: '/baroboard/device/data/update',
                data: params,
                responseType: 'json'
            }).then(function (response) {
                console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.affectedRows > 0) {
                    

                    toastr.info('정상적으로 수정되었습니다.');

                    requestDashboardFieldList();
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }



        // 단말 데이터를 저장 후 즉시반영
        // 즉시반영 버튼 눌렀을 때 호출
        function saveApplyDeviceDataInput() {
            console.log('saveApplyDeviceDataInput called.');

            const mappingKeys = Object.keys(curLayoutMapping);
            console.log('count of mapping keys : ' + mappingKeys.length);
            let outObj = {};

            const sources = [];
            
            for (let i = 0; i < mappingKeys.length; i++) {
                const curKey = mappingKeys[i];
                const curObj = curLayoutMapping[curKey];
                console.log('#' + i + ' ' + curKey + ' -> ' + JSON.stringify(curObj));
            
            // BY START 2019 11-21
            

                //source가 중복된 경우에는 skip
                if (sources.indexOf(curObj['source']) > -1) {
                    if (curObj['operator']) {
                        console.log('source is duplicate -> skipping');
                        //continue;
                    }
                } else {
                    sources.push(curObj['source']);
                }
                
                // 데이터가 사진인지(array인지 1개만인지), text인지 구분
                let curInputValue;
                var imagName;
                // BY START 2019-11-21
                if(curObj.target=='src') {
                    imageName = $('#deviceInput_' + curKey).val();
                
                    curInputValue = imageName;
                    
                }
                else if (curObj.target =='text') {
                    curInputValue = $('#deviceInput_' + curKey).val();
                }
                // BY END 2019-11-21
                // get source
                const curSource = curObj.source;
                const sourceArray = curSource.split('.');
                // BY START 2019-11-21
                let outObjRef = outObj;
                if( curInputValue =='undifined') {
                    curInputValue = '';
                }
                // BY END 2019-2019-11-21
                for (let j = 0; j < sourceArray.length; j++) {
                    
                    if (j == (sourceArray.length - 1)) { // last element
                        // BY START 2019-11-21
                        if(outObjRef[sourceArray[j]]) {
                            outObjRef[sourceArray[j]] += ','+curInputValue;
                        }
                        // BY END 2019-11-21
                        else {
                            outObjRef[sourceArray[j]] = curInputValue;
                        }
                                                
                    } else {
                        if (outObjRef[sourceArray[j]]) {

                        } else {
                            outObjRef[sourceArray[j]] = {};
                        }
                        outObjRef = outObjRef[sourceArray[j]];
                    }
                }  
            }

            console.log('output object -> ' + JSON.stringify(outObj));
            const contents = JSON.stringify(outObj);
            const data = Base64Encode(contents);

            console.log('data -> ' + data);

            requestDeviceDataUpdateAndApply(deviceId, data);
        }


        function requestDeviceDataUpdateAndApply(id, data) {
            console.log('requestDeviceDataUpdateAndApply 호출됨 : ' + id);

            const params = {
                id: id,
                data: data
            }

            axios({
                method: 'post',
                url: '/baroboard/device/data/update',
                data: params,
                responseType: 'json'
            }).then(function (response) {
                console.log('응답 -> ' + JSON.stringify(response));

                if (response.data.output.affectedRows > 0) {
                    console.log('수정 성공');

                    toastr.info('정상적으로 수정되었습니다.');

                    applyDeviceData(id);
                    requestDashboardFieldList();
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);
                
            });
        }


        // 상단 검색 버튼 눌렀을 때 호출됨
        function searchDashboardFieldItem() {
            search = 'name';
            searchValue = $('#searchDashboardFieldInput').val();
            console.log('search : ' + search + ', ' + searchValue);

            requestDashboardFieldList();
        }



        //=============== 대시보드 현장 리스트 END ===============//

        //=============== 이미지 리스트 START ==================//
        function requestImageFileList() {
            
            axios({
                method: 'post',
                url: '/baroboard/image/list',
                responseType: 'json'
            }).then(function (response) {
                imageFile = response.data.output;
                var imageItems = settotalImageDiv(imageFile);
                $('.imageDiv').html(null);
                $('.imageDiv').html(imageItems);

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        };

        function requestImageCategoryList() {
            
            axios({
                method: 'post',
                url: '/baroboard/image/category/list',
                responseType: 'json'
            }).then(function (response) {
                imageCategoryItems = response.data.output;
                $('.category-body').html(null);
                for(let i = 0 ; i <imageCategoryItems.length ; i ++) {
                    var count = i+2;
                    var imageItems = setCategoryImageDiv(imageCategoryItems[i], count);
                    $('.category-body').append(imageItems);
                }
                

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });
        }

        function settotalImageDiv(item) {
            let output = '';
            output += '<div class="row" style="border: 3px solid darkblue;"> ';
            for(let i = 0 ; i < item.length ; i ++) {
                output +='<div style="border: 1px solid black; margin:5px;" active="false" id = "'+item[i].name.split('.')[0]+'_total"> <img src="./images/'+`${item[i].name}`+'" name="totalImage" id="'+item[i].name.split('.')[0]+'"name2="'+item[i].name+'" onclick="imageClick(this.id)" active="false" style="width:150px;height:150px; cursor: pointer;"> </div>';
            }
            output += '</div>';
            return output;
        }

        function setCategoryImageDiv(item,count) {
            let output = '';
            if (item.image) {

                let array= item.image.split(',');
                
                output +=' <div id="accordion'+count+'">';
                output +='   <div class="card">';
                output +='     <div class="card-header" id="heading_'+count+'">';
                output +='       <h5 class="mb-0">';
                output +='       <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapse'+count+'" aria-expanded="false" aria-controls="collapse'+count+'">';
                output +='         <h5>'+item.name+'</h5>';
                output +='       </button>'
                output +='       <div style="float:right">'
                output +='         <button type="button" class="btn btn-outline-danger btn-rounded waves-effect" onclick=deleteCategoryModal("'+item.name+'")>카테고리 삭제</button>';
                output +='       </div>';
                output +='       </h5>';
                output +='     </div>';
                output +='     <div id="collapse'+count+'" class="collapse" aria-labelledby="heading_'+count+'" data-parent="#accordion'+count+'">';
                output +='       <div class="card-body">';
                output +='         <a class="btn-floating  btn-danger" style="float: right;" onclick = deleteImageModal("'+item.name+'");><i class="fas fa-trash"></i></a>';
                output +='         <div class="row" style="border: 3px solid darkblue;">';
                for (let j = 0 ; j < array.length; j ++) {
                    output +='         <div style="border: 1px solid black; margin:5px;" active="false" id = "'+array[j].split(".")[0]+'_div"> <img src="./images/'+`${array[j]}` +'" id="'+array[j].split(".")[0] +'_category'+count+'" name = "'+item.name+'" onclick="imageClickInCategory(this.id,this.name)" active="false" style="width:150px;height:150px; cursor: pointer;"> </div>';
                }
                output +='             <div style="border: 1px solid black; margin:5px;width:150px;height: 150px; background-color: lightblue;" name = "'+item.name+'" onclick=addImageItemInCategoryModal("'+item.name+'")><p style="font-size:6em; text-align: center; -ms-text-combine-horizontal: inherit; cursor: pointer;">+</p></div>';
                output +='         </div>';
                output +='       </div>';
                output +='     </div>';
                output +='   </div>';
                output +=' </div>';
            }
            else {
                output +=' <div id="accordion'+count+'">';
                output +='   <div class="card">';
                output +='     <div class="card-header" id="heading_'+count+'">';
                output +='       <h5 class="mb-0">';
                output +='       <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapse'+count+'" aria-expanded="false" aria-controls="collapse'+count+'">';
                output +='         <h5>'+item.name+'</h5>';
                output +='       </button>'
                output +='       <div style="float:right">'
                output +='         <button type="button" class="btn btn-outline-danger btn-rounded waves-effect" onclick=deleteCategoryModal("'+item.name+'")>카테고리 삭제</button>';
                output +='       </div>';
                output +='       </h5>';
                output +='     </div>';
                output +='     <div id="collapse'+count+'" class="collapse" aria-labelledby="heading_'+count+'" data-parent="#accordion'+count+'">';
                output +='       <div class="card-body">';
                output +='         <a class="btn-floating  btn-danger" style="float: right;" onclick = deleteImageModal("'+item.name+'");><i class="fas fa-trash"></i></a>';
                output +='         <div class="row" style="border: 3px solid darkblue;">';
                output +='             <div style="border: 1px solid black; margin:5px;width:150px;height: 150px; background-color: lightblue;" name = "'+item.name+'" onclick=addImageItemInCategoryModal("'+item.name+'")><p style="font-size:6em; text-align: center; -ms-text-combine-horizontal: inherit; cursor: pointer;">+</p></div>';
                output +='         </div>';
                output +='       </div>';
                output +='     </div>';
                output +='   </div>';
                output +=' </div>';
            }
            return output;
        }

        function deleteImageModal (name) {
            let deleteItems;
            $('.modalDeleteImage_items').html('');
            if (name == '이미지 전체 보기') {
                deleteItems = selectedImage;
                console.log(deleteItems);
                $('.modalDeleteImage_heading').html ('이미지 삭제 하기');
                $('.modalDeleteImage_heading').attr('name','total');
                if(deleteItems.length < 1 ) {
                    toastr.error('삭제할 이미지를 선택해 주세요');
                }
                else {
                    $('.modalDeleteImage_items').append(deleteItems+' 이미지<br>');
                    $('.modalDeleteImage_text').html('삭제하시겠습니까? ');
                    $('#modalDeleteImage').modal('show');
                }
                
            }
            else {
                var item =[];
                item.push(selectedImageInCategory[`${name}`]);
                $('.modalDeleteImage_heading').html(name + ' 내 이미지 지우기');
                $('.modalDeleteImage_heading').attr('name',name);
                deleteItems = item;
                if(deleteItems.length < 1 ) {
                    toastr.error('삭제할 이미지를 선택해 주세요');
                }
                else {
                    for(let i = 0 ; i < deleteItems.length ; i ++) {
                        
                        $('.modalDeleteImage_items').append(deleteItems[i]+' 이미지<br>');
                        $('.modalDeleteImage_text').html('지우시겠습니까? ');
                        $('#modalDeleteImage').modal('show');
                    }
                }
            }
            
            
        }
        
        function requestDeleteImage () {
            if ($('.modalDeleteImage_heading').html() == '이미지 삭제 하기') {
                console.log('전체 삭제하기 모드');
                let params = {
                    name:selectedImage
                }
                
                console.log(params);
                axios({
                    method: 'post',
                    url: '/baroboard/layout/image/del',
                    data:params,
                    responseType: 'json'
                }).then(function (response) {
                    console.log(response);
                    toastr.info('해당 사진을 삭제하였습니다.');
                    showPage('page6-1');
            
                }).catch(function (err) {
                    console.error('Error -> ' + err);
                    showPage('page6-1');
                });
            }                         //imageCategoryItems
            else {
                console.log('카테고리 내 이미지 배열 삭제')
                let category = $('.modalDeleteImage_heading').html().split(' ')[0];
                let item = $('.modalDeleteImage_items').html().split(' ')[0];
                let param;
                if(item){
                    for(let i = 0 ; i < imageCategoryItems.length ; i ++) {
                        if(imageCategoryItems[i].name == category) {
                            let imageArray = imageCategoryItems[i].image.split(',');
                            imageArray.splice(selectedImage,1);

                            var image= imageArray[0];
                            for(let j = 1 ; j < imageArray.length; j ++) {
                                image +=','+imageArray[j]
                            }
                            params = {
                                name:category,
                                image:image
                            }
                        }
                    }
                    console.log(params);
                    axios({
                        method: 'post',
                        url: '/baroboard/image/category/delete_item',
                        data:params,
                        responseType: 'json'
                    }).then(function (response) {
                        console.log(response);
                        if (response.data.code ==200) {
                            toastr.info('해당 사진을 삭제하였습니다.');
                            showPage('page6-1');
                        }
                        else {
                            toastr.error('사진 삭제 실패. 관리자 문의');
                        }
                        
                        
                        

                    }).catch(function (err) {
                        console.error('Error -> ' + err);
                    });
                }
            }
        }

        function addImageItemInCategoryModal (item) {
            selectedCategory = item;
            $('.modalAddImage_heading').html(selectedCategory + " 카테고리");
            let output;
            let items = selectedImageArray(item);
            output +='  <div class="row" style="border: 3px solid darkblue; width:95% !important; margin:5% !important;">';
            for(let i = 0 ; i <items.length ; i ++) {
                output +='<div style="border: 1px solid black; margin:5px;" > <img src="./images/'+`${items[i]}` +'" name="totalImage" id="'+items[i].split(".")[0] +'_1" active="false"   onclick="imageClick2(this.id)" active="false" style="width:120px;height:120px; cursor: pointer;" > </div>';
            }
            output +='  </div>'
            $('#addImagePanel').html(output);
            $('#modalAddImageInCategory').modal('show');
        }

        function addCategoryInput() {
            $('#modalCategoryInput').modal('show');
        }

        function saveCategoryDataInput () {
            let name = $("#nameCategoryInput").val().trim();
            name = name.replace(/(\s*)/g,"");


            const params = {
                name:name
            } 
            axios({
                    method: 'post',
                    url: '/baroboard/image/category/add',
                    data:params,
                    responseType: 'json'
                }).then(function (response) {
                    toastr.info('카테고리 업데이트.');
                    showPage('page6-1');
                                      
                    

                }).catch(function (err) {
                    console.error('Error -> ' + err);
                });

        }

        function deleteCategoryModal (name) {
            console.log(name);
            $('.categoryName2').val(name);
            $('.categoryName').html(name + "  카테고리 삭제 ");
            $('#modalCategoryDelete').modal('show');
        }

        function deleteCategory () {
            params = {
                name : $('.categoryName2').val()
            }

            axios({
                method: 'post',
                url: '/baroboard/image/category/title_delete',
                data:params,
                responseType: 'json'
            }).then(function (response) {
                toastr.info('카테고리 삭제 완료.');
                showPage('page6-1');

            }).catch(function (err) {
                console.error('Error -> ' + err);
            });

        }
        function requestAddImageInCategory() {
            if(selectedImage){
                console.log(selectedImage);
                var itemPng = selectedImage+'.png';
                var itemJpg = selectedImage+ '.jpg';
                let image;
                let imageArray
                for(let i = 0; i < imageFile.length ; i ++) {
                    if(imageFile[i].name == itemPng) {
                        image = itemPng;
                        i = imageFile.length;
                    }
                    else {
                        image = itemJpg;
                    }
                }
                for(let i = 0 ; i < imageCategoryItems.length; i ++) {
                    if (imageCategoryItems[i].name == selectedCategory) {
                        if(imageCategoryItems[i].image == null) {
                            imageArray = image;
                        }
                        else {
                            imageArray = imageCategoryItems[i].image;
                            imageArray += ','+ image ;
                        }
                         
                    }
                }
                const params = {
                    name:selectedCategory,
                    image:imageArray
                }

                axios({
                    method: 'post',
                    url: '/baroboard/image/category/image',
                    data:params,
                    responseType: 'json'
                }).then(function (response) {
                    toastr.info('이미지 추가 완료.');
                    showPage('page6-1');

                }).catch(function (err) {
                    console.error('Error -> ' + err);
                });
            }
            else{
                toastr('선택된 이미지가 없습니다.');
            }
            
            
        }

        //=============== 로그인 ===============//
        // 로그인 요청
        async function requestLogin() {
            console.log('requestLogin 호출됨');
            const userId = $('#userIdInput').val();
            const userPassword = $('#userPasswordInput').val();
            
        // BY START 2021-04-06
           // Generate random salt
            var salt16 = CryptoJS.lib.WordArray.random(16);                                     // Random 16 bytes salt

            // Derive key and IV via PBKDF2
            var keyIV = CryptoJS.PBKDF2(_key, salt16, {
                keySize: (32 + 16) / 4,                                                           // 12 words a 4 bytes = 48 bytes
                iterations: 1000,                                                                 // Choose a sufficiently high iteration count
                hasher: CryptoJS.algo.SHA256                                                      // Default digest is SHA-1       
            }); 
            var key32 = CryptoJS.lib.WordArray.create(keyIV.words.slice(0, 32 / 4));            // 8 words a 4 bytes = 32 bytes 
            var iv16 = CryptoJS.lib.WordArray.create(keyIV.words.slice(32 / 4, (32 + 16) / 4)); // 4 words a 4 bytes = 16 bytes 

            // Encrypt
            var cipherParams = CryptoJS.AES.encrypt(userPassword, key32, {iv:iv16});
            var ciphertext = cipherParams.ciphertext;

            // Concatenate salt and ciphertext
            var saltCiphertext = salt16.clone().concat(ciphertext);
            var saltCiphertextB64 = saltCiphertext.toString(CryptoJS.enc.Base64);               // This is passed to the recipient    

        // BY END 2021-04-06
            // console.log("Salt:\n", salt16.toString(CryptoJS.enc.Base64).replace(/(.{56})/g,'$1\n'));
            // console.log("Ciphertext:\n", ciphertext.toString(CryptoJS.enc.Base64).replace(/(.{56})/g,'$1\n'));
            // console.log("Salt | Ciphertext:\n", saltCiphertextB64.replace(/(.{56})/g,'$1\n'));
            const params = {
                userId: userId,
                userPassword: saltCiphertextB64 ,
            }
            // BY START 2021-04-06 가입 
            // axios({
            //     method: 'post',
            //     url: '/baroboard/users/signup',
            //     data: params,
            //     responseType: 'json'
            // }).then(function (response) {
            //     console.log(response);
            // })
            // BY END 2021-04-06 

            axios({
                method: 'post',
                url: '/baroboard/users/login',
                data: params,
                responseType: 'json'
            }).then(function (response) {
                // console.log('응답 -> ' + JSON.stringify(response));
                requrestRemovePreviewDataApply();

                // modalDataInput 대화상자에 데이터 입력상자 표시
                if (response.data.code != 200) {
                    toastr.info('로그인에 실패했습니다. 다시 시도해 주세요.');
                } else {
                    if (response.data.output.body.length > 0) {
                        toastr.info('정상적으로 로그인되었습니다.');

                        // BY START 2019-11-12
                        $('#hamburgerIcon').show();
                        // BY END 2019-11-12

                        sessionUser = response.data.output.body[0];
                        console.log(sessionUser);
                        // 상단 타이틀바에 이름 표시
                        $('.userNameText').text(sessionUser.name);
                        $('#sessionUserName').text("성함: "+sessionUser.name);
                        if(sessionUser.dept == null) {
                            sessionUser.dept = '미지정';
                        }
                        $('#sessionUserDept').text("소속: " + sessionUser.dept);
                        authenticated = true;


                        if (sessionUser.level == 1) {
                            $('#menuLevel1').show();
                            $('#menuLevel2').hide();

                            // BY START 2019-11-11
                            location.hash = '#di';
                            // BY END 2019-11-11
                            showPage('page5-1');

                            // 현장 운영자 대시보드 요청
                            requestDashboardFieldList();
                        } else {
                            $('#menuLevel1').hide();
                            $('#menuLevel2').show();
                            // BY START 2019-11-11
                            location.hash = '#ll';
                            // BY END 2019-11-11
                            showPage('page1-1');

                            // 레이아웃 리스트 요청
                            requestLayoutList(1, 10);
                        }

                    } else {
                        toastr.error('아이디나 비밀번호가 잘못되었습니다. 다시 시도해 주세요.');
                    }
                }

            }).catch(function (err) {
                console.error('Error -> ' + err);

                toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
            });
        }


        // 로그아웃 요청
        function requestLogout() {
            console.log('requestLogout 호출됨');

            if (typeof (sessionUser) == 'undefined' || sessionUser == null) {
                toastr.info('이미 로그아웃되어 있습니다.');
                return;
            }

            const params = {
                userId: sessionUser.id
            }

            axios({
                method: 'post',
                url: '/baroboard/users/logout',
                data: params,
                responseType: 'json'
            }).then(function (response) {
                console.log('응답 -> ' + JSON.stringify(response));

                // modalDataInput 대화상자에 데이터 입력상자 표시
                if (response.data.code != 200) {
                    toastr.info('로그아웃에 실패했습니다. 다시 시도해 주세요.');
                } else {
                    toastr.info('정상적으로 로그아웃되었습니다.');

                    sessionUser = null;

                    $('#userIdInput').val('');
                    $('#userPasswordInput').val('');

                    // 상단 타이틀바에 로그인 글자 표시
                    $('#userNameText').text('로그인');

                    authenticated = false;
                    showPage('page0-1');

                }

            }).catch(function (err) {
                console.error('Error -> ' + err);

                toastr.error('요청을 처리할 수 없습니다. 잠시 후 다시 시도해주세요. <br>Error -> ' + err, { timeOut: 3000 });
            });
        }




        //=============== 로그인 END ===============//


        //===== 공통 =====//


        // 갱신 시간 표시
        function setRefreshTime(divTime) {
            const curRefreshTime = moment().format();
            $('#' + divTime).text('갱신 일시 : ' + curRefreshTime);

            curRemainingTime = 60;
        }

        // 갱신 후 남은 시간 표시
        function startRemaining(divRemaining) {
            clearAllIntervals2();

            const curInterval = setInterval(() => {
                curRemainingTime -= 1;
                $('#' + divRemaining).text(curRemainingTime + '초');
            }, 1000);
            intervalObjs2.push(curInterval);

        }


        // 페이지 번호 만들기
        // header : 응답 중 헤더 정보
        // divId : 페이지 번호를 붙일 DOM 객체, ex) paginationList
        // func : 번호 클릭 시 요청할 함수, ex) requestList
        function makePagination(header, divId, func) {

            if (header.page) {

                var page = Number(header.page);
                var perPage = Number(header.perPage);
                var total = header.total;
                var pageCount = Math.ceil(total / perPage);

                console.log('page -> ' + page + ', ' + perPage + ', ' + total + ', ' + pageCount);
                // BY START 2020-01-14
                currentPage =page;
                // BY END 2020-01-14

                var pagination = '';

                // 페이지 시작 태그
                pagination += '<nav aria-label="Page navigation">';
                pagination += '  <ul class="pagination pagination-circle pg-blue justify-content-end">';

                // 처음으로, 이전 버튼 태그
                if (page > 1) {
                    pagination += '    <li class="page-item">';
                    pagination += '      <a class="page-link" href="javascript:' + func + '(1, ' + perPage + ')">First</a>';
                    pagination += '    </li>';
                    pagination += '    <li class="page-item">';
                    pagination += '      <a class="page-link" aria-label="Previous" href="javascript:' + func + '(' + (page - 1) + ', ' + perPage + ')">';
                    pagination += '        <span aria-hidden="true">&laquo;</span>';
                    pagination += '        <span class="sr-only">Previous</span>';
                    pagination += '      </a>';
                    pagination += '    </li>';
                } else {
                    pagination += '    <li class="page-item disabled">';
                    pagination += '      <a class="page-link">First</a>';
                    pagination += '    </li>';
                    pagination += '    <li class="page-item disabled">';
                    pagination += '      <a class="page-link" aria-label="Previous">';
                    pagination += '        <span aria-hidden="true">&laquo;</span>';
                    pagination += '        <span class="sr-only">Previous</span>';
                    pagination += '      </a>';
                    pagination += '    </li>';
                }

                // 페이지 번호 버튼
                var initial = Math.floor(page / 10) * 10;
                var max = pageCount - initial;
                if (max > 10) {
                    max = initial + 10;
                } else {
                    max = initial + max;
                }
                console.log('initial : ' + initial + ', max : ' + max);

                for (var i = initial; i < max; i++) {
                    if ((i + 1) != page) {
                        pagination += '    <li class="page-item"><a class="page-link" href="javascript:' + func + '(' + (i + 1) + ', ' + perPage + ')">' + (i + 1) + '</a></li>';
                    } else {
                        pagination += '    <li class="page-item active"><a class="page-link">' + (i + 1) + '</a></li>';
                    }
                }

                // 끝으로, 다음 버튼 태그
                if (page < pageCount) {
                    pagination += '    <li class="page-item">';
                    pagination += '      <a class="page-link" aria-label="Next" href="javascript:' + func + '(' + (page + 1) + ', ' + perPage + ')">';
                    pagination += '        <span aria-hidden="true">&raquo;</span>';
                    pagination += '        <span class="sr-only">Next</span>';
                    pagination += '      </a>';
                    pagination += '    </li>';
                    pagination += '    <li class="page-item"><a class="page-link" href="javascript:' + func + '(' + pageCount + ', ' + perPage + ')">Last</a></li>';
                } else {
                    pagination += '    <li class="page-item disabled">';
                    pagination += '      <a class="page-link" aria-label="Next">';
                    pagination += '        <span aria-hidden="true">&raquo;</span>';
                    pagination += '        <span class="sr-only">Next</span>';
                    pagination += '      </a>';
                    pagination += '    </li>';
                    pagination += '    <li class="page-item disabled"><a class="page-link">Last</a></li>';
                }

                // 페이지 끝 태그
                pagination += '  </ul>';
                pagination += '</nav>';

                $('#' + divId).html(pagination);

            }

        }


        // 검색어 선택했던 정보 설정
        function setSearchValue(divSelectId, divInputId, curSearch, curSearchValue) {
            if (curSearch) {
                $('#' + divSelectId + ' option').removeAttr('selected');
                $('#' + divSelectId + ' option[value="' + curSearch + '"]').prop({ defaultSelected: true });
                $('#' + divInputId).val(curSearchValue);
            }
        }

        // 페이지 보여주기
        function showPage(pageName) {
            // BY START 2019-11-07 페이지 옮길때 검색 단어 없애기
            $('#searchDashboardFieldInput').val('');
            $('#searchLayoutInput').val('');
            $('#searchDeviceInput').val('');
            $('#searchUsersInput').val('');
            $('#searchDeviceGroupInput').val('');

            // BY END 2019-11-07

            // BY START 2019-11-22
            modifyLayoutMappingItem=null;
            // BY END 2019-11-22

            for (let i = 0; i < pageNames.length; i++) {
                $('#' + pageNames[i]).hide();
            }
            

            // 인증 여부 체크
            if (!authenticated) {
                // 로그인 페이지 열기
                $('#page0-1').show();

                // 화면 갱신 취소
                clearAllIntervals();
                clearAllIntervals2();

                return;
            }

            $('#' + pageName).show();


            // 로그인 화면일 때
            if (pageName == 'page0-1') {

                // 화면 갱신 취소
                clearAllIntervals();
                clearAllIntervals2();

                // 레이아웃 리스트 화면일 때 : page1-1
            } else if (pageName == 'page1-1') {

                requestLayoutList(currentPage, 10);


                // 대시보드 화면일 때 : page2-1
            } else if (pageName == 'page2-1') {

                requestDashboardList(currentPage, 100);

                // 화면 갱신 취소
                clearAllIntervals();

                // 화면 갱신 설정
                const curInterval = setInterval(() => {
                    requestDashboardList(currentPage, 100);

                    setRefreshTime('refreshTime1');

                    startRemaining('refreshRemaining1');

                }, dashboardRefreshInterval);
                intervalObjs.push(curInterval);

                // 갱신 일시 시간 표시
                setRefreshTime('refreshTime1');
                startRemaining('refreshRemaining1');


                // 대시보드 하위 화면일때
            } else if (pageName == 'page2-1-1') {

                // 화면 갱신 취소
                clearAllIntervals();

                // 화면 갱신 설정
                const curInterval = setInterval(() => {
                    requestDashboardSubList(curDashboardGroupId, curDashboardGroupName);

                    setRefreshTime('refreshTime2');

                    startRemaining('refreshRemaining2');

                }, dashboardRefreshInterval);
                intervalObjs.push(curInterval);

                // 갱신 일시 시간 표시
                setRefreshTime('refreshTime2');
                startRemaining('refreshRemaining2');

            } else if (pageName == 'page2-2') {
                console.log($('#searchDeviceInput').val());

                requestDeviceList(currentPage, 10);


            } else if (pageName == 'page2-3') {

                requestDeviceGroupList(currentPage, 10);


            } else if (pageName == 'page3-1') {

                requestLegacy();

            } else if (pageName == 'page4-1') {

                requestUsersList(currentPage, 10);


                // 현장운영자 > 대시보드 화면일때
            } else if (pageName == 'page5-1') {

                if (sessionUser) {
                    if (sessionUser.dept) {
                        $('#searchDashboardFieldInput').val(sessionUser.dept);
                    }
                }
                requestDashboardFieldList(sessionUser.dept);

                // 화면 갱신 취소
                clearAllIntervals();

                // 화면 갱신 설정
                const curInterval = setInterval(() => {
                    requestDashboardFieldList();

                    setRefreshTime('refreshTime3');

                    startRemaining('refreshRemaining3');

                }, dashboardRefreshInterval);
                intervalObjs.push(curInterval);


                // 갱신 일시 시간 표시
                setRefreshTime('refreshTime3');
                startRemaining('refreshRemaining3');

            } else if (pageName == 'page6-1') {
                requestImageFileList();
                requestImageCategoryList ();
                
            }
            
            else {

                // 화면 갱신 취소
                clearAllIntervals();

            }

        }

        /* BY START 2019 11-11
         * locationhash 로 페이지 변환 시키기 위해서 ( 뒤로가기 시 hash변화 감지)
         */
        function changePage() {

            // BY START 2019-12-13 페이지 옮길때 검색 단어 없애기
            $('#searchDashboardFieldInput').empty();
            $('#searchLayoutInput').empty();
            $('#searchDeviceInput').empty();
            $('#searchUsersInput').empty();
            $('#searchDeviceGroupInput').empty();
            // BY END 2019-12-13
            if (location.hash == '#ll') {
               
                showPage('page1-1');
            }
            else if (location.hash == '#le') {
                showLayoutBuilderPage();
            }
            else if (location.hash == '#db') {
                showPage('page2-1');
            }
            else if (location.hash == '#dl') {
                
                showPage('page2-2');
            }
            else if (location.hash == '#gl') {
                showPage('page2-3');
            }
            else if (location.hash == '#esl') {
                showPage('page3-1');
            }
            else if (location.hash == '#ul') {
                showPage('page4-1');
            }
            else if (location.hash == '#di') {
                showPage('page5-1');
            }
            else if (location.hash == '#image') {
                showPage('page6-1');
            }
            
        }

        // BY END 2019-11-11 
        function clearAllIntervals() {
            console.log('clearAllIntervals called : ' + intervalObjs.length);

            if (intervalObjs.length > 0) {
                for (let i = 0; i < intervalObjs.length; i++) {
                    clearInterval(intervalObjs[i]);
                }
                intervalObjs = [];
            }
        }

        // BY START 2020-01-08
        function nameWarningOptions () {
            $('#nameWarningOptions2').prop('checked',false);
            $('#deviceInput_nameWarning').val('Y');
        };
        function nameWarningOptions3 () {
            $('#nameWarningOptions1').prop('checked',false);
            $('#deviceInput_nameWarning').val('N');
        };

        function nameWarningOptions4 (val) {
            if  ($('#deviceInput_nameWarning').val() =='N') {
                $('#nameWarningOptions2').prop('checked',true);
            }
            else if ($('#deviceInput_nameWarning').val() =='Y'){
                $('#nameWarningOptions1').prop('checked',true);
            }
        }
        // BY END 2020-01-08

        function imageOptions (item) {
            var key = item.id.split('_')[0];
            var value = item.id.split('_')[1] +"_"+item.id.split('_')[2];
            $('input[name='+key+']').prop('checked',false);
            item.checked=true;
            $()
            $('#deviceInput_'+key+'').val(value);
            
        }

        
        function clearAllIntervals2() {
            console.log('clearAllIntervals2 called : ' + intervalObjs2.length);

            if (intervalObjs2.length > 0) {
                for (let i = 0; i < intervalObjs2.length; i++) {
                    clearInterval(intervalObjs2[i]);
                }
                intervalObjs2 = [];
            }
        }

        function getTimeBefore(inputDate) {
            //현재시간
            const now = new Date();
            console.log(now);

            let minus;
            let output = '';

            //현재 년도랑 글쓴시간의 년도 비교 
            if (now.getFullYear() > inputDate.getFullYear()) {
                minus = now.getFullYear() - inputDate.getFullYear();

                //두개의 차이를 구해서 표시 
                output = minus + "년 전";
            } else if (now.getMonth() > inputDate.getMonth()) {
                //년도가 같을 경우 달을 비교해서 출력 
                minus = now.getMonth() - inputDate.getMonth();
                output = minus + "달 전";
            } else if (now.getDate() > inputDate.getDate()) {
                //같은 달일 경우 일을 계산 
                minus = now.getDate() - inputDate.getDate();
                output = minus + "일 전";
            } else if (now.getDate() == inputDate.getDate()) {
                //당일인 경우에는 
                const nowTime = now.getTime();
                const writeTime = inputDate.getTime();
                if (nowTime > writeTime) {
                    //시간을 비교 
                    sec = parseInt(nowTime - writeTime) / 1000;
                    day = parseInt(sec / 60 / 60 / 24);
                    sec = (sec - (day * 60 * 60 * 24));
                    hour = parseInt(sec / 60 / 60);
                    sec = (sec - (hour * 60 * 60));
                    min = parseInt(sec / 60);
                    sec = parseInt(sec - (min * 60));

                    if (hour > 0) {
                        //몇시간전인지 
                        if (min > 0) {
                            output = hour + "시간 " + min + "분 전";
                        } else {
                            output = hour + "시간 전";
                        }
                    } else if (min > 0) {
                        //몇분전인지 
                        if (sec > 0) {
                            output = min + "분 " + sec + "초 전";
                        } else {
                            output = min + "분 전";
                        }
                    } else if (sec > 0) {
                        //몇초전인지 계산 
                        output = sec + "초 전";
                    }
                }
            }

            return output;
        }

        function imageClick(id) {
            console.log(id)
            var active = $('#'+id).attr('active');
            var imageName = $('#'+id).attr('name2');
            console.log(imageName);
            $('[name="totalImage"]').attr('active','false');
            $('[name="totalImage"]').css('border','');
            if(active == 'false') {
                $('#'+id).css('border','3px solid green');
                selectedImage =  imageName;
                $('#'+id).attr('active','true');
            }
            else if (active == 'true') {
                selectedImage = '';
                $('#'+id).attr('active','false');

            }

        }

        function imageClick2(id) {
            var active = $('#'+id).attr('active');
            $('[name="totalImage"]').attr('active','false');
            $('[name="totalImage"]').css('border','');
            if(active == 'false') {
                $('#'+id).css('border','3px solid green');
                selectedImage =  id.split('_')[0]+"_"+id.split('_')[1];
                console.log(selectedImage)
                $('#'+id).attr('active','true');
            }
            else if (active == 'true') {
                selectedImage = '';
                $('#'+id).attr('active','false');

            }

        }

        function imageClickInCategory(id,name) {
            console.log(id);
            console.log(name);
            var active = $('#'+id).attr('active');
            selectedCategory = $('#'+id).attr('name');
            $('[name='+`${name}`+']').attr('active','false');
            $('[name='+`${name}`+']').css('border','');
            if(active == 'false') {
                $('#'+id).css('border','3px solid red');
                selectedImageInCategory[`${name}`] =  id.split('_')[0].toString();
                $('#'+id).attr('active','true');
            }
            else if (active == 'true') {
                selectedImageInCategory[`${name}`] = '';
                $('#'+id).attr('active','false');

            }
        
        }

        // 이미지 업로드 modal
        function showImageInput(id, name) {
            console.log('showImageInput 호출됨');

            $('#modalImageInput').modal('show');

        }

        function saveImageDataInput() {
            
            var image =document.getElementById("imageFile").files[0];
            var imageFile = new FormData();
            imageFile.append('imageFile',image);
            
            const url = '/baroboard/upload';
            $.ajax({ 
                url: url, 
                data: imageFile, 
                processData: false,
                contentType: false,
                type: 'POST', 
                success: function(data){ // 사진 public/images 폴더로 옮기기 성공 시 
                    const params = {
                        name:image.name
                    }

                    axios({
                        method: 'post',
                        url: '/baroboard/layout/image/update',
                        data: params,
                        responseType: 'json'
                    }).then(function (response) {
                        console.log('응답 -> ' + JSON.stringify(response));

                        if (response.data.output.affectedRows > 0) {
                            toastr.info('정상적으로 이미지를 등록했습니다.');
                            showPage('page6-1');
                        }

                    }).catch(function (err) {
                        console.error('Error -> ' + err);
                        
                    });

                } 
            });

        }

        function selectedImageArray(selected) {
            var newImageItems = new Array();
            let newImageArray = new Array();
            console.log(selected)
            for(let i = 0 ; i < imageFile.length ; i ++) {
                newImageItems.push(imageFile[i].name );
            }
            for(let i = 0 ; i < imageCategoryItems.length ; i ++) {
                if(imageCategoryItems[i].name == selected) {
                    if(imageCategoryItems[i].image !== null ) {
                        imageInSelectedCategory = imageCategoryItems[i].image;
                        imageInSelectedCategory = imageInSelectedCategory.split(',');
                    }
                    else {
                        imageInSelectedCategory = [];
                    }
                    
                }
                
            }
            console.log(imageInSelectedCategory);

            if (imageInSelectedCategory !== undefined) {
                for(let i = 0 ; i <newImageItems.length ; i ++) {
                    let search = imageInSelectedCategory.indexOf(newImageItems[i]);
                    
                    if(  search == -1) {
                        
                        newImageArray.push(newImageItems[i]);
                    }
                
                }
                
                return newImageArray;
            }
            else {
                return newImageItems;
            }
            

        } 

        function darwinPost () {
            const params = {
				"ptntNm": "저승재",
				"gendCd": "M",
				"ageCtn": "28세",
				"btdt": "1995-01-02",
				"mcdpNm": "신경과",
				"chdrNm": "김용훈",
				"gndrNm": "이인호",
				"fallCtn": "",
				"bdsrEtcCtn": "",
				"ctctYn": "",
				"cnsdCtctStcrVl": "",
				"airCatnYn": "",
				"drplYn": "",
				"blodCatnYn": "",
				"invrIsltYn": "",
				"etcYn": "",
				"inptCasbCtn": "",
				"admsDt": "2021-02-15",
				"dschPrrnYmd": "",
				"dvsnNm1": "",
				"dvsnNm2": "",
				"dvsnNm3": "",
				"dvsnNm4": "",
				"dvsnNm5": "",
				"dvsnNm6": "",
				"dvsnNm7": "",
				"wardCdCtn": "07W",
				"carePtrmNo": "02",
				"careSckbNo": "02",
				"ptno": "51848158",
				"wardNm": "07서(NR)",
				"wardCd": "171130",
				"mdrpNo": 2023155495,
				"ptntNmCatnYn": "Y",
				"npoYn": "Y",
				"npoCtn": "자정부터 금식",
				"npoDscrMemoCtn": "",
				"ptntInftCtn": "오른팔 채혈금지/( 09:00 )시까지 절대안정",
				"obsrRomStinYn": "Y"
            };
            axios({
                method: 'post',
                url: '/baroboard/darwin/request_esl_sync',
                data:params,
                responseType: 'json'
            }).then(function (response) {
                toastr.info('데이터보내기 성공.');

            }).catch(function (err) {
                console.error('Error -> ' + err);
                toastr.error('데이터보내기 실패');
            });
        }


        // /* START 2022-02-03
        //  *  AIMS 장애 발생 시 SMS 보내기 TEST
        //  */
        // function postSMS () {
        //     const params = {
        //         msg: "오른팔 채혈 금지"
        //     }
        //     axios({
        //         method: 'post',
        //         url: '/baroboard/aims/postsms',
        //         data:params,
        //         responseType: 'json'
        //     }).then(function (response) {
        //         toastr.info('SMS보내기 성공.');

        //     }).catch(function (err) {
        //         console.error('Error -> ' + err);
        //         toastr.error('SMS보내기 실패');
        //     });
        // }
        // //  END 2022-02-03

        // START 2022-02-16
        function showDataImage(code,rotate) {
            console.log(code);
            console.log(rotate);
            $("#data_image").attr("src", '../esl/'+code+'.png');
            if (rotate == 90) {
                $("#data_image").css('transform','rotate(270deg)');
            }
	    else if (rotate == 180) {
                $("#data_image").css('transform','rotate(180deg)');
            }
            else if (rotate == 270) {
                $("#data_image").css('transform','rotate(90deg)');
            }
            $("#imageModal").modal('show');
            
        }

        function timeSet ()  {
            const now = new Date(); // 현재 시간
            const utcNow = now.getTime() + (now.getTimezoneOffset() * 60 * 1000); // 현재 시간을 utc로 변환한 밀리세컨드값
            const koreaTimeDiff = 9 * 60 * 60 * 1000; // 한국 시간은 UTC보다 9시간 빠름(9시간의 밀리세컨드 표현)
            let koreaNow = new Date(utcNow + koreaTimeDiff);
            let year = koreaNow.getFullYear();
            let month = koreaNow.getMonth()+1;
            let day = koreaNow.getDate();
            if (day < 10 ) {
                day = "0"+day;
            }
            let hour = koreaNow.getHours();
            if(hour < 10) {
                hour = "0"+hour;
            }
            let minutes = koreaNow.getMinutes();
            if (minutes < 10) {
                minutes = "0" +minutes;
            }
            const seconds = koreaNow.getSeconds();
            if (seconds < 10) {
                seconds = "0" +seconds;
            }
            const date = year+""+month+""+day+""+hour+""+minutes+""+seconds;
            return date;
        } 
        
    </script>


</body>

</html>